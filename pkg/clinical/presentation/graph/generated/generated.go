// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/savannahghi/clinical/pkg/clinical/application/dto"
	"github.com/savannahghi/clinical/pkg/clinical/domain"
	"github.com/savannahghi/firebasetools"
	"github.com/savannahghi/scalarutils"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AllergyIntolerance struct {
		EncounterID     func(childComplexity int) int
		ID              func(childComplexity int) int
		OnsetDateTime   func(childComplexity int) int
		PatientID       func(childComplexity int) int
		Severity        func(childComplexity int) int
		SubstanceCode   func(childComplexity int) int
		SubstanceSystem func(childComplexity int) int
	}

	Encounter struct {
		Class           func(childComplexity int) int
		EpisodeOfCareID func(childComplexity int) int
		ID              func(childComplexity int) int
		PatientID       func(childComplexity int) int
		Status          func(childComplexity int) int
	}

	EpisodeOfCare struct {
		ID        func(childComplexity int) int
		PatientID func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	FHIRAddress struct {
		City       func(childComplexity int) int
		Country    func(childComplexity int) int
		District   func(childComplexity int) int
		ID         func(childComplexity int) int
		Line       func(childComplexity int) int
		Period     func(childComplexity int) int
		PostalCode func(childComplexity int) int
		State      func(childComplexity int) int
		Text       func(childComplexity int) int
		Type       func(childComplexity int) int
		Use        func(childComplexity int) int
	}

	FHIRAge struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		ID         func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	FHIRAnnotation struct {
		AuthorReference func(childComplexity int) int
		AuthorString    func(childComplexity int) int
		ID              func(childComplexity int) int
		Text            func(childComplexity int) int
		Time            func(childComplexity int) int
	}

	FHIRAttachment struct {
		ContentType func(childComplexity int) int
		Creation    func(childComplexity int) int
		Data        func(childComplexity int) int
		Hash        func(childComplexity int) int
		ID          func(childComplexity int) int
		Language    func(childComplexity int) int
		Size        func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	FHIRCodeableConcept struct {
		Coding func(childComplexity int) int
		ID     func(childComplexity int) int
		Text   func(childComplexity int) int
	}

	FHIRCoding struct {
		Code         func(childComplexity int) int
		Display      func(childComplexity int) int
		ID           func(childComplexity int) int
		System       func(childComplexity int) int
		UserSelected func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	FHIRContactPoint struct {
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
		Rank   func(childComplexity int) int
		System func(childComplexity int) int
		Use    func(childComplexity int) int
		Value  func(childComplexity int) int
	}

	FHIRDosage struct {
		AdditionalInstruction    func(childComplexity int) int
		AsNeededBoolean          func(childComplexity int) int
		AsNeededCodeableConcept  func(childComplexity int) int
		DoseAndRate              func(childComplexity int) int
		ID                       func(childComplexity int) int
		MaxDosePerAdministration func(childComplexity int) int
		MaxDosePerLifetime       func(childComplexity int) int
		MaxDosePerPeriod         func(childComplexity int) int
		Method                   func(childComplexity int) int
		PatientInstruction       func(childComplexity int) int
		Route                    func(childComplexity int) int
		Sequence                 func(childComplexity int) int
		Site                     func(childComplexity int) int
		Text                     func(childComplexity int) int
		Timing                   func(childComplexity int) int
	}

	FHIRDosageDoseandrate struct {
		DoseQuantity func(childComplexity int) int
		DoseRange    func(childComplexity int) int
		ID           func(childComplexity int) int
		RateQuantity func(childComplexity int) int
		RateRange    func(childComplexity int) int
		RateRatio    func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	FHIRDuration struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		ID         func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	FHIRHumanName struct {
		Family func(childComplexity int) int
		Given  func(childComplexity int) int
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
		Prefix func(childComplexity int) int
		Suffix func(childComplexity int) int
		Text   func(childComplexity int) int
		Use    func(childComplexity int) int
	}

	FHIRIdentifier struct {
		Assigner func(childComplexity int) int
		ID       func(childComplexity int) int
		Period   func(childComplexity int) int
		System   func(childComplexity int) int
		Type     func(childComplexity int) int
		Use      func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	FHIRNarrative struct {
		Div    func(childComplexity int) int
		ID     func(childComplexity int) int
		Status func(childComplexity int) int
	}

	FHIROrganization struct {
		Active     func(childComplexity int) int
		Address    func(childComplexity int) int
		Alias      func(childComplexity int) int
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		Name       func(childComplexity int) int
		Telecom    func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	FHIROrganizationRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIROrganizationRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIROrganizationRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRPeriod struct {
		End   func(childComplexity int) int
		ID    func(childComplexity int) int
		Start func(childComplexity int) int
	}

	FHIRQuantity struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		ID         func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	FHIRRange struct {
		High func(childComplexity int) int
		ID   func(childComplexity int) int
		Low  func(childComplexity int) int
	}

	FHIRRatio struct {
		Denominator func(childComplexity int) int
		ID          func(childComplexity int) int
		Numerator   func(childComplexity int) int
	}

	FHIRReference struct {
		Display    func(childComplexity int) int
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		Reference  func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	FHIRSampledData struct {
		Data       func(childComplexity int) int
		Dimensions func(childComplexity int) int
		Factor     func(childComplexity int) int
		ID         func(childComplexity int) int
		LowerLimit func(childComplexity int) int
		Origin     func(childComplexity int) int
		Period     func(childComplexity int) int
		UpperLimit func(childComplexity int) int
	}

	FHIRTiming struct {
		Code   func(childComplexity int) int
		Event  func(childComplexity int) int
		ID     func(childComplexity int) int
		Repeat func(childComplexity int) int
	}

	FHIRTimingRepeat struct {
		BoundsDuration func(childComplexity int) int
		BoundsPeriod   func(childComplexity int) int
		BoundsRange    func(childComplexity int) int
		Count          func(childComplexity int) int
		CountMax       func(childComplexity int) int
		DayOfWeek      func(childComplexity int) int
		Duration       func(childComplexity int) int
		DurationMax    func(childComplexity int) int
		DurationUnit   func(childComplexity int) int
		Frequency      func(childComplexity int) int
		FrequencyMax   func(childComplexity int) int
		ID             func(childComplexity int) int
		Offset         func(childComplexity int) int
		Period         func(childComplexity int) int
		PeriodMax      func(childComplexity int) int
		PeriodUnit     func(childComplexity int) int
		TimeOfDay      func(childComplexity int) int
		When           func(childComplexity int) int
	}

	HealthTimeline struct {
		Timeline   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MedicalData struct {
		Allergies func(childComplexity int) int
		BMI       func(childComplexity int) int
		CD4Count  func(childComplexity int) int
		Regimen   func(childComplexity int) int
		ViralLoad func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	Medication struct {
		Code func(childComplexity int) int
		Name func(childComplexity int) int
	}

	MedicationStatement struct {
		ID         func(childComplexity int) int
		Medication func(childComplexity int) int
		PatientID  func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	Mutation struct {
		CreateEpisodeOfCare    func(childComplexity int, episodeOfCare dto.EpisodeOfCareInput) int
		CreateFHIROrganization func(childComplexity int, input domain.FHIROrganizationInput) int
		CreatePatient          func(childComplexity int, input dto.PatientInput) int
		EndEncounter           func(childComplexity int, encounterID string) int
		EndEpisodeOfCare       func(childComplexity int, id string) int
		RecordBloodPressure    func(childComplexity int, input dto.ObservationInput) int
		RecordBmi              func(childComplexity int, input dto.ObservationInput) int
		RecordHeight           func(childComplexity int, input dto.ObservationInput) int
		RecordPulseRate        func(childComplexity int, input dto.ObservationInput) int
		RecordRespiratoryRate  func(childComplexity int, input dto.ObservationInput) int
		RecordTemperature      func(childComplexity int, input dto.ObservationInput) int
		RecordWeight           func(childComplexity int, input dto.ObservationInput) int
		StartEncounter         func(childComplexity int, episodeID string) int
	}

	Observation struct {
		EncounterID func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PatientID   func(childComplexity int) int
		Status      func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	PageInfo struct {
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
	}

	Patient struct {
		Active      func(childComplexity int) int
		BirthDate   func(childComplexity int) int
		Gender      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
	}

	Query struct {
		GetEpisodeOfCare               func(childComplexity int, id string) int
		GetMedicalData                 func(childComplexity int, patientID string) int
		GetPatientBloodPressureEntries func(childComplexity int, patientID string) int
		GetPatientTemperatureEntries   func(childComplexity int, patientID string) int
		ListPatientEncounters          func(childComplexity int, patientID string) int
		PatientHealthTimeline          func(childComplexity int, input dto.HealthTimelineInput) int
		__resolve__service             func(childComplexity int) int
	}

	TimelineResource struct {
		Date         func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		ResourceType func(childComplexity int) int
		Status       func(childComplexity int) int
		Value        func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateFHIROrganization(ctx context.Context, input domain.FHIROrganizationInput) (*domain.FHIROrganizationRelayPayload, error)
	CreateEpisodeOfCare(ctx context.Context, episodeOfCare dto.EpisodeOfCareInput) (*dto.EpisodeOfCare, error)
	EndEpisodeOfCare(ctx context.Context, id string) (*dto.EpisodeOfCare, error)
	StartEncounter(ctx context.Context, episodeID string) (string, error)
	EndEncounter(ctx context.Context, encounterID string) (bool, error)
	RecordTemperature(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordHeight(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordWeight(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordRespiratoryRate(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordPulseRate(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordBloodPressure(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordBmi(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	CreatePatient(ctx context.Context, input dto.PatientInput) (*dto.Patient, error)
}
type QueryResolver interface {
	PatientHealthTimeline(ctx context.Context, input dto.HealthTimelineInput) (*dto.HealthTimeline, error)
	GetMedicalData(ctx context.Context, patientID string) (*dto.MedicalData, error)
	GetEpisodeOfCare(ctx context.Context, id string) (*dto.EpisodeOfCare, error)
	ListPatientEncounters(ctx context.Context, patientID string) ([]*dto.Encounter, error)
	GetPatientTemperatureEntries(ctx context.Context, patientID string) ([]*dto.Observation, error)
	GetPatientBloodPressureEntries(ctx context.Context, patientID string) ([]*dto.Observation, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AllergyIntolerance.encounterID":
		if e.complexity.AllergyIntolerance.EncounterID == nil {
			break
		}

		return e.complexity.AllergyIntolerance.EncounterID(childComplexity), true

	case "AllergyIntolerance.id":
		if e.complexity.AllergyIntolerance.ID == nil {
			break
		}

		return e.complexity.AllergyIntolerance.ID(childComplexity), true

	case "AllergyIntolerance.onsetDateTime":
		if e.complexity.AllergyIntolerance.OnsetDateTime == nil {
			break
		}

		return e.complexity.AllergyIntolerance.OnsetDateTime(childComplexity), true

	case "AllergyIntolerance.patientID":
		if e.complexity.AllergyIntolerance.PatientID == nil {
			break
		}

		return e.complexity.AllergyIntolerance.PatientID(childComplexity), true

	case "AllergyIntolerance.severity":
		if e.complexity.AllergyIntolerance.Severity == nil {
			break
		}

		return e.complexity.AllergyIntolerance.Severity(childComplexity), true

	case "AllergyIntolerance.substanceCode":
		if e.complexity.AllergyIntolerance.SubstanceCode == nil {
			break
		}

		return e.complexity.AllergyIntolerance.SubstanceCode(childComplexity), true

	case "AllergyIntolerance.substanceSystem":
		if e.complexity.AllergyIntolerance.SubstanceSystem == nil {
			break
		}

		return e.complexity.AllergyIntolerance.SubstanceSystem(childComplexity), true

	case "Encounter.class":
		if e.complexity.Encounter.Class == nil {
			break
		}

		return e.complexity.Encounter.Class(childComplexity), true

	case "Encounter.episodeOfCareID":
		if e.complexity.Encounter.EpisodeOfCareID == nil {
			break
		}

		return e.complexity.Encounter.EpisodeOfCareID(childComplexity), true

	case "Encounter.id":
		if e.complexity.Encounter.ID == nil {
			break
		}

		return e.complexity.Encounter.ID(childComplexity), true

	case "Encounter.patientID":
		if e.complexity.Encounter.PatientID == nil {
			break
		}

		return e.complexity.Encounter.PatientID(childComplexity), true

	case "Encounter.status":
		if e.complexity.Encounter.Status == nil {
			break
		}

		return e.complexity.Encounter.Status(childComplexity), true

	case "EpisodeOfCare.id":
		if e.complexity.EpisodeOfCare.ID == nil {
			break
		}

		return e.complexity.EpisodeOfCare.ID(childComplexity), true

	case "EpisodeOfCare.patientID":
		if e.complexity.EpisodeOfCare.PatientID == nil {
			break
		}

		return e.complexity.EpisodeOfCare.PatientID(childComplexity), true

	case "EpisodeOfCare.status":
		if e.complexity.EpisodeOfCare.Status == nil {
			break
		}

		return e.complexity.EpisodeOfCare.Status(childComplexity), true

	case "FHIRAddress.City":
		if e.complexity.FHIRAddress.City == nil {
			break
		}

		return e.complexity.FHIRAddress.City(childComplexity), true

	case "FHIRAddress.Country":
		if e.complexity.FHIRAddress.Country == nil {
			break
		}

		return e.complexity.FHIRAddress.Country(childComplexity), true

	case "FHIRAddress.District":
		if e.complexity.FHIRAddress.District == nil {
			break
		}

		return e.complexity.FHIRAddress.District(childComplexity), true

	case "FHIRAddress.ID":
		if e.complexity.FHIRAddress.ID == nil {
			break
		}

		return e.complexity.FHIRAddress.ID(childComplexity), true

	case "FHIRAddress.Line":
		if e.complexity.FHIRAddress.Line == nil {
			break
		}

		return e.complexity.FHIRAddress.Line(childComplexity), true

	case "FHIRAddress.Period":
		if e.complexity.FHIRAddress.Period == nil {
			break
		}

		return e.complexity.FHIRAddress.Period(childComplexity), true

	case "FHIRAddress.PostalCode":
		if e.complexity.FHIRAddress.PostalCode == nil {
			break
		}

		return e.complexity.FHIRAddress.PostalCode(childComplexity), true

	case "FHIRAddress.State":
		if e.complexity.FHIRAddress.State == nil {
			break
		}

		return e.complexity.FHIRAddress.State(childComplexity), true

	case "FHIRAddress.Text":
		if e.complexity.FHIRAddress.Text == nil {
			break
		}

		return e.complexity.FHIRAddress.Text(childComplexity), true

	case "FHIRAddress.Type":
		if e.complexity.FHIRAddress.Type == nil {
			break
		}

		return e.complexity.FHIRAddress.Type(childComplexity), true

	case "FHIRAddress.Use":
		if e.complexity.FHIRAddress.Use == nil {
			break
		}

		return e.complexity.FHIRAddress.Use(childComplexity), true

	case "FHIRAge.Code":
		if e.complexity.FHIRAge.Code == nil {
			break
		}

		return e.complexity.FHIRAge.Code(childComplexity), true

	case "FHIRAge.Comparator":
		if e.complexity.FHIRAge.Comparator == nil {
			break
		}

		return e.complexity.FHIRAge.Comparator(childComplexity), true

	case "FHIRAge.ID":
		if e.complexity.FHIRAge.ID == nil {
			break
		}

		return e.complexity.FHIRAge.ID(childComplexity), true

	case "FHIRAge.System":
		if e.complexity.FHIRAge.System == nil {
			break
		}

		return e.complexity.FHIRAge.System(childComplexity), true

	case "FHIRAge.Unit":
		if e.complexity.FHIRAge.Unit == nil {
			break
		}

		return e.complexity.FHIRAge.Unit(childComplexity), true

	case "FHIRAge.Value":
		if e.complexity.FHIRAge.Value == nil {
			break
		}

		return e.complexity.FHIRAge.Value(childComplexity), true

	case "FHIRAnnotation.AuthorReference":
		if e.complexity.FHIRAnnotation.AuthorReference == nil {
			break
		}

		return e.complexity.FHIRAnnotation.AuthorReference(childComplexity), true

	case "FHIRAnnotation.AuthorString":
		if e.complexity.FHIRAnnotation.AuthorString == nil {
			break
		}

		return e.complexity.FHIRAnnotation.AuthorString(childComplexity), true

	case "FHIRAnnotation.ID":
		if e.complexity.FHIRAnnotation.ID == nil {
			break
		}

		return e.complexity.FHIRAnnotation.ID(childComplexity), true

	case "FHIRAnnotation.Text":
		if e.complexity.FHIRAnnotation.Text == nil {
			break
		}

		return e.complexity.FHIRAnnotation.Text(childComplexity), true

	case "FHIRAnnotation.Time":
		if e.complexity.FHIRAnnotation.Time == nil {
			break
		}

		return e.complexity.FHIRAnnotation.Time(childComplexity), true

	case "FHIRAttachment.ContentType":
		if e.complexity.FHIRAttachment.ContentType == nil {
			break
		}

		return e.complexity.FHIRAttachment.ContentType(childComplexity), true

	case "FHIRAttachment.Creation":
		if e.complexity.FHIRAttachment.Creation == nil {
			break
		}

		return e.complexity.FHIRAttachment.Creation(childComplexity), true

	case "FHIRAttachment.Data":
		if e.complexity.FHIRAttachment.Data == nil {
			break
		}

		return e.complexity.FHIRAttachment.Data(childComplexity), true

	case "FHIRAttachment.Hash":
		if e.complexity.FHIRAttachment.Hash == nil {
			break
		}

		return e.complexity.FHIRAttachment.Hash(childComplexity), true

	case "FHIRAttachment.ID":
		if e.complexity.FHIRAttachment.ID == nil {
			break
		}

		return e.complexity.FHIRAttachment.ID(childComplexity), true

	case "FHIRAttachment.Language":
		if e.complexity.FHIRAttachment.Language == nil {
			break
		}

		return e.complexity.FHIRAttachment.Language(childComplexity), true

	case "FHIRAttachment.Size":
		if e.complexity.FHIRAttachment.Size == nil {
			break
		}

		return e.complexity.FHIRAttachment.Size(childComplexity), true

	case "FHIRAttachment.Title":
		if e.complexity.FHIRAttachment.Title == nil {
			break
		}

		return e.complexity.FHIRAttachment.Title(childComplexity), true

	case "FHIRAttachment.URL":
		if e.complexity.FHIRAttachment.URL == nil {
			break
		}

		return e.complexity.FHIRAttachment.URL(childComplexity), true

	case "FHIRCodeableConcept.Coding":
		if e.complexity.FHIRCodeableConcept.Coding == nil {
			break
		}

		return e.complexity.FHIRCodeableConcept.Coding(childComplexity), true

	case "FHIRCodeableConcept.ID":
		if e.complexity.FHIRCodeableConcept.ID == nil {
			break
		}

		return e.complexity.FHIRCodeableConcept.ID(childComplexity), true

	case "FHIRCodeableConcept.Text":
		if e.complexity.FHIRCodeableConcept.Text == nil {
			break
		}

		return e.complexity.FHIRCodeableConcept.Text(childComplexity), true

	case "FHIRCoding.Code":
		if e.complexity.FHIRCoding.Code == nil {
			break
		}

		return e.complexity.FHIRCoding.Code(childComplexity), true

	case "FHIRCoding.Display":
		if e.complexity.FHIRCoding.Display == nil {
			break
		}

		return e.complexity.FHIRCoding.Display(childComplexity), true

	case "FHIRCoding.ID":
		if e.complexity.FHIRCoding.ID == nil {
			break
		}

		return e.complexity.FHIRCoding.ID(childComplexity), true

	case "FHIRCoding.System":
		if e.complexity.FHIRCoding.System == nil {
			break
		}

		return e.complexity.FHIRCoding.System(childComplexity), true

	case "FHIRCoding.UserSelected":
		if e.complexity.FHIRCoding.UserSelected == nil {
			break
		}

		return e.complexity.FHIRCoding.UserSelected(childComplexity), true

	case "FHIRCoding.Version":
		if e.complexity.FHIRCoding.Version == nil {
			break
		}

		return e.complexity.FHIRCoding.Version(childComplexity), true

	case "FHIRContactPoint.ID":
		if e.complexity.FHIRContactPoint.ID == nil {
			break
		}

		return e.complexity.FHIRContactPoint.ID(childComplexity), true

	case "FHIRContactPoint.Period":
		if e.complexity.FHIRContactPoint.Period == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Period(childComplexity), true

	case "FHIRContactPoint.Rank":
		if e.complexity.FHIRContactPoint.Rank == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Rank(childComplexity), true

	case "FHIRContactPoint.System":
		if e.complexity.FHIRContactPoint.System == nil {
			break
		}

		return e.complexity.FHIRContactPoint.System(childComplexity), true

	case "FHIRContactPoint.Use":
		if e.complexity.FHIRContactPoint.Use == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Use(childComplexity), true

	case "FHIRContactPoint.Value":
		if e.complexity.FHIRContactPoint.Value == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Value(childComplexity), true

	case "FHIRDosage.AdditionalInstruction":
		if e.complexity.FHIRDosage.AdditionalInstruction == nil {
			break
		}

		return e.complexity.FHIRDosage.AdditionalInstruction(childComplexity), true

	case "FHIRDosage.AsNeededBoolean":
		if e.complexity.FHIRDosage.AsNeededBoolean == nil {
			break
		}

		return e.complexity.FHIRDosage.AsNeededBoolean(childComplexity), true

	case "FHIRDosage.AsNeededCodeableConcept":
		if e.complexity.FHIRDosage.AsNeededCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRDosage.AsNeededCodeableConcept(childComplexity), true

	case "FHIRDosage.DoseAndRate":
		if e.complexity.FHIRDosage.DoseAndRate == nil {
			break
		}

		return e.complexity.FHIRDosage.DoseAndRate(childComplexity), true

	case "FHIRDosage.ID":
		if e.complexity.FHIRDosage.ID == nil {
			break
		}

		return e.complexity.FHIRDosage.ID(childComplexity), true

	case "FHIRDosage.MaxDosePerAdministration":
		if e.complexity.FHIRDosage.MaxDosePerAdministration == nil {
			break
		}

		return e.complexity.FHIRDosage.MaxDosePerAdministration(childComplexity), true

	case "FHIRDosage.MaxDosePerLifetime":
		if e.complexity.FHIRDosage.MaxDosePerLifetime == nil {
			break
		}

		return e.complexity.FHIRDosage.MaxDosePerLifetime(childComplexity), true

	case "FHIRDosage.MaxDosePerPeriod":
		if e.complexity.FHIRDosage.MaxDosePerPeriod == nil {
			break
		}

		return e.complexity.FHIRDosage.MaxDosePerPeriod(childComplexity), true

	case "FHIRDosage.Method":
		if e.complexity.FHIRDosage.Method == nil {
			break
		}

		return e.complexity.FHIRDosage.Method(childComplexity), true

	case "FHIRDosage.PatientInstruction":
		if e.complexity.FHIRDosage.PatientInstruction == nil {
			break
		}

		return e.complexity.FHIRDosage.PatientInstruction(childComplexity), true

	case "FHIRDosage.Route":
		if e.complexity.FHIRDosage.Route == nil {
			break
		}

		return e.complexity.FHIRDosage.Route(childComplexity), true

	case "FHIRDosage.Sequence":
		if e.complexity.FHIRDosage.Sequence == nil {
			break
		}

		return e.complexity.FHIRDosage.Sequence(childComplexity), true

	case "FHIRDosage.Site":
		if e.complexity.FHIRDosage.Site == nil {
			break
		}

		return e.complexity.FHIRDosage.Site(childComplexity), true

	case "FHIRDosage.Text":
		if e.complexity.FHIRDosage.Text == nil {
			break
		}

		return e.complexity.FHIRDosage.Text(childComplexity), true

	case "FHIRDosage.Timing":
		if e.complexity.FHIRDosage.Timing == nil {
			break
		}

		return e.complexity.FHIRDosage.Timing(childComplexity), true

	case "FHIRDosageDoseandrate.DoseQuantity":
		if e.complexity.FHIRDosageDoseandrate.DoseQuantity == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.DoseQuantity(childComplexity), true

	case "FHIRDosageDoseandrate.DoseRange":
		if e.complexity.FHIRDosageDoseandrate.DoseRange == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.DoseRange(childComplexity), true

	case "FHIRDosageDoseandrate.ID":
		if e.complexity.FHIRDosageDoseandrate.ID == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.ID(childComplexity), true

	case "FHIRDosageDoseandrate.RateQuantity":
		if e.complexity.FHIRDosageDoseandrate.RateQuantity == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.RateQuantity(childComplexity), true

	case "FHIRDosageDoseandrate.RateRange":
		if e.complexity.FHIRDosageDoseandrate.RateRange == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.RateRange(childComplexity), true

	case "FHIRDosageDoseandrate.RateRatio":
		if e.complexity.FHIRDosageDoseandrate.RateRatio == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.RateRatio(childComplexity), true

	case "FHIRDosageDoseandrate.Type":
		if e.complexity.FHIRDosageDoseandrate.Type == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.Type(childComplexity), true

	case "FHIRDuration.Code":
		if e.complexity.FHIRDuration.Code == nil {
			break
		}

		return e.complexity.FHIRDuration.Code(childComplexity), true

	case "FHIRDuration.Comparator":
		if e.complexity.FHIRDuration.Comparator == nil {
			break
		}

		return e.complexity.FHIRDuration.Comparator(childComplexity), true

	case "FHIRDuration.ID":
		if e.complexity.FHIRDuration.ID == nil {
			break
		}

		return e.complexity.FHIRDuration.ID(childComplexity), true

	case "FHIRDuration.System":
		if e.complexity.FHIRDuration.System == nil {
			break
		}

		return e.complexity.FHIRDuration.System(childComplexity), true

	case "FHIRDuration.Unit":
		if e.complexity.FHIRDuration.Unit == nil {
			break
		}

		return e.complexity.FHIRDuration.Unit(childComplexity), true

	case "FHIRDuration.Value":
		if e.complexity.FHIRDuration.Value == nil {
			break
		}

		return e.complexity.FHIRDuration.Value(childComplexity), true

	case "FHIRHumanName.Family":
		if e.complexity.FHIRHumanName.Family == nil {
			break
		}

		return e.complexity.FHIRHumanName.Family(childComplexity), true

	case "FHIRHumanName.Given":
		if e.complexity.FHIRHumanName.Given == nil {
			break
		}

		return e.complexity.FHIRHumanName.Given(childComplexity), true

	case "FHIRHumanName.ID":
		if e.complexity.FHIRHumanName.ID == nil {
			break
		}

		return e.complexity.FHIRHumanName.ID(childComplexity), true

	case "FHIRHumanName.Period":
		if e.complexity.FHIRHumanName.Period == nil {
			break
		}

		return e.complexity.FHIRHumanName.Period(childComplexity), true

	case "FHIRHumanName.Prefix":
		if e.complexity.FHIRHumanName.Prefix == nil {
			break
		}

		return e.complexity.FHIRHumanName.Prefix(childComplexity), true

	case "FHIRHumanName.Suffix":
		if e.complexity.FHIRHumanName.Suffix == nil {
			break
		}

		return e.complexity.FHIRHumanName.Suffix(childComplexity), true

	case "FHIRHumanName.Text":
		if e.complexity.FHIRHumanName.Text == nil {
			break
		}

		return e.complexity.FHIRHumanName.Text(childComplexity), true

	case "FHIRHumanName.Use":
		if e.complexity.FHIRHumanName.Use == nil {
			break
		}

		return e.complexity.FHIRHumanName.Use(childComplexity), true

	case "FHIRIdentifier.Assigner":
		if e.complexity.FHIRIdentifier.Assigner == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Assigner(childComplexity), true

	case "FHIRIdentifier.ID":
		if e.complexity.FHIRIdentifier.ID == nil {
			break
		}

		return e.complexity.FHIRIdentifier.ID(childComplexity), true

	case "FHIRIdentifier.Period":
		if e.complexity.FHIRIdentifier.Period == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Period(childComplexity), true

	case "FHIRIdentifier.System":
		if e.complexity.FHIRIdentifier.System == nil {
			break
		}

		return e.complexity.FHIRIdentifier.System(childComplexity), true

	case "FHIRIdentifier.Type":
		if e.complexity.FHIRIdentifier.Type == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Type(childComplexity), true

	case "FHIRIdentifier.Use":
		if e.complexity.FHIRIdentifier.Use == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Use(childComplexity), true

	case "FHIRIdentifier.Value":
		if e.complexity.FHIRIdentifier.Value == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Value(childComplexity), true

	case "FHIRNarrative.Div":
		if e.complexity.FHIRNarrative.Div == nil {
			break
		}

		return e.complexity.FHIRNarrative.Div(childComplexity), true

	case "FHIRNarrative.ID":
		if e.complexity.FHIRNarrative.ID == nil {
			break
		}

		return e.complexity.FHIRNarrative.ID(childComplexity), true

	case "FHIRNarrative.Status":
		if e.complexity.FHIRNarrative.Status == nil {
			break
		}

		return e.complexity.FHIRNarrative.Status(childComplexity), true

	case "FHIROrganization.Active":
		if e.complexity.FHIROrganization.Active == nil {
			break
		}

		return e.complexity.FHIROrganization.Active(childComplexity), true

	case "FHIROrganization.Address":
		if e.complexity.FHIROrganization.Address == nil {
			break
		}

		return e.complexity.FHIROrganization.Address(childComplexity), true

	case "FHIROrganization.Alias":
		if e.complexity.FHIROrganization.Alias == nil {
			break
		}

		return e.complexity.FHIROrganization.Alias(childComplexity), true

	case "FHIROrganization.ID":
		if e.complexity.FHIROrganization.ID == nil {
			break
		}

		return e.complexity.FHIROrganization.ID(childComplexity), true

	case "FHIROrganization.Identifier":
		if e.complexity.FHIROrganization.Identifier == nil {
			break
		}

		return e.complexity.FHIROrganization.Identifier(childComplexity), true

	case "FHIROrganization.Name":
		if e.complexity.FHIROrganization.Name == nil {
			break
		}

		return e.complexity.FHIROrganization.Name(childComplexity), true

	case "FHIROrganization.Telecom":
		if e.complexity.FHIROrganization.Telecom == nil {
			break
		}

		return e.complexity.FHIROrganization.Telecom(childComplexity), true

	case "FHIROrganization.Type":
		if e.complexity.FHIROrganization.Type == nil {
			break
		}

		return e.complexity.FHIROrganization.Type(childComplexity), true

	case "FHIROrganizationRelayConnection.edges":
		if e.complexity.FHIROrganizationRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayConnection.Edges(childComplexity), true

	case "FHIROrganizationRelayConnection.pageInfo":
		if e.complexity.FHIROrganizationRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayConnection.PageInfo(childComplexity), true

	case "FHIROrganizationRelayEdge.cursor":
		if e.complexity.FHIROrganizationRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayEdge.Cursor(childComplexity), true

	case "FHIROrganizationRelayEdge.node":
		if e.complexity.FHIROrganizationRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayEdge.Node(childComplexity), true

	case "FHIROrganizationRelayPayload.resource":
		if e.complexity.FHIROrganizationRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayPayload.Resource(childComplexity), true

	case "FHIRPeriod.End":
		if e.complexity.FHIRPeriod.End == nil {
			break
		}

		return e.complexity.FHIRPeriod.End(childComplexity), true

	case "FHIRPeriod.ID":
		if e.complexity.FHIRPeriod.ID == nil {
			break
		}

		return e.complexity.FHIRPeriod.ID(childComplexity), true

	case "FHIRPeriod.Start":
		if e.complexity.FHIRPeriod.Start == nil {
			break
		}

		return e.complexity.FHIRPeriod.Start(childComplexity), true

	case "FHIRQuantity.Code":
		if e.complexity.FHIRQuantity.Code == nil {
			break
		}

		return e.complexity.FHIRQuantity.Code(childComplexity), true

	case "FHIRQuantity.Comparator":
		if e.complexity.FHIRQuantity.Comparator == nil {
			break
		}

		return e.complexity.FHIRQuantity.Comparator(childComplexity), true

	case "FHIRQuantity.ID":
		if e.complexity.FHIRQuantity.ID == nil {
			break
		}

		return e.complexity.FHIRQuantity.ID(childComplexity), true

	case "FHIRQuantity.System":
		if e.complexity.FHIRQuantity.System == nil {
			break
		}

		return e.complexity.FHIRQuantity.System(childComplexity), true

	case "FHIRQuantity.Unit":
		if e.complexity.FHIRQuantity.Unit == nil {
			break
		}

		return e.complexity.FHIRQuantity.Unit(childComplexity), true

	case "FHIRQuantity.Value":
		if e.complexity.FHIRQuantity.Value == nil {
			break
		}

		return e.complexity.FHIRQuantity.Value(childComplexity), true

	case "FHIRRange.High":
		if e.complexity.FHIRRange.High == nil {
			break
		}

		return e.complexity.FHIRRange.High(childComplexity), true

	case "FHIRRange.ID":
		if e.complexity.FHIRRange.ID == nil {
			break
		}

		return e.complexity.FHIRRange.ID(childComplexity), true

	case "FHIRRange.Low":
		if e.complexity.FHIRRange.Low == nil {
			break
		}

		return e.complexity.FHIRRange.Low(childComplexity), true

	case "FHIRRatio.Denominator":
		if e.complexity.FHIRRatio.Denominator == nil {
			break
		}

		return e.complexity.FHIRRatio.Denominator(childComplexity), true

	case "FHIRRatio.ID":
		if e.complexity.FHIRRatio.ID == nil {
			break
		}

		return e.complexity.FHIRRatio.ID(childComplexity), true

	case "FHIRRatio.Numerator":
		if e.complexity.FHIRRatio.Numerator == nil {
			break
		}

		return e.complexity.FHIRRatio.Numerator(childComplexity), true

	case "FHIRReference.Display":
		if e.complexity.FHIRReference.Display == nil {
			break
		}

		return e.complexity.FHIRReference.Display(childComplexity), true

	case "FHIRReference.ID":
		if e.complexity.FHIRReference.ID == nil {
			break
		}

		return e.complexity.FHIRReference.ID(childComplexity), true

	case "FHIRReference.Identifier":
		if e.complexity.FHIRReference.Identifier == nil {
			break
		}

		return e.complexity.FHIRReference.Identifier(childComplexity), true

	case "FHIRReference.Reference":
		if e.complexity.FHIRReference.Reference == nil {
			break
		}

		return e.complexity.FHIRReference.Reference(childComplexity), true

	case "FHIRReference.Type":
		if e.complexity.FHIRReference.Type == nil {
			break
		}

		return e.complexity.FHIRReference.Type(childComplexity), true

	case "FHIRSampledData.Data":
		if e.complexity.FHIRSampledData.Data == nil {
			break
		}

		return e.complexity.FHIRSampledData.Data(childComplexity), true

	case "FHIRSampledData.Dimensions":
		if e.complexity.FHIRSampledData.Dimensions == nil {
			break
		}

		return e.complexity.FHIRSampledData.Dimensions(childComplexity), true

	case "FHIRSampledData.Factor":
		if e.complexity.FHIRSampledData.Factor == nil {
			break
		}

		return e.complexity.FHIRSampledData.Factor(childComplexity), true

	case "FHIRSampledData.ID":
		if e.complexity.FHIRSampledData.ID == nil {
			break
		}

		return e.complexity.FHIRSampledData.ID(childComplexity), true

	case "FHIRSampledData.LowerLimit":
		if e.complexity.FHIRSampledData.LowerLimit == nil {
			break
		}

		return e.complexity.FHIRSampledData.LowerLimit(childComplexity), true

	case "FHIRSampledData.Origin":
		if e.complexity.FHIRSampledData.Origin == nil {
			break
		}

		return e.complexity.FHIRSampledData.Origin(childComplexity), true

	case "FHIRSampledData.Period":
		if e.complexity.FHIRSampledData.Period == nil {
			break
		}

		return e.complexity.FHIRSampledData.Period(childComplexity), true

	case "FHIRSampledData.UpperLimit":
		if e.complexity.FHIRSampledData.UpperLimit == nil {
			break
		}

		return e.complexity.FHIRSampledData.UpperLimit(childComplexity), true

	case "FHIRTiming.Code":
		if e.complexity.FHIRTiming.Code == nil {
			break
		}

		return e.complexity.FHIRTiming.Code(childComplexity), true

	case "FHIRTiming.Event":
		if e.complexity.FHIRTiming.Event == nil {
			break
		}

		return e.complexity.FHIRTiming.Event(childComplexity), true

	case "FHIRTiming.ID":
		if e.complexity.FHIRTiming.ID == nil {
			break
		}

		return e.complexity.FHIRTiming.ID(childComplexity), true

	case "FHIRTiming.Repeat":
		if e.complexity.FHIRTiming.Repeat == nil {
			break
		}

		return e.complexity.FHIRTiming.Repeat(childComplexity), true

	case "FHIRTimingRepeat.BoundsDuration":
		if e.complexity.FHIRTimingRepeat.BoundsDuration == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.BoundsDuration(childComplexity), true

	case "FHIRTimingRepeat.BoundsPeriod":
		if e.complexity.FHIRTimingRepeat.BoundsPeriod == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.BoundsPeriod(childComplexity), true

	case "FHIRTimingRepeat.BoundsRange":
		if e.complexity.FHIRTimingRepeat.BoundsRange == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.BoundsRange(childComplexity), true

	case "FHIRTimingRepeat.Count":
		if e.complexity.FHIRTimingRepeat.Count == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Count(childComplexity), true

	case "FHIRTimingRepeat.CountMax":
		if e.complexity.FHIRTimingRepeat.CountMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.CountMax(childComplexity), true

	case "FHIRTimingRepeat.DayOfWeek":
		if e.complexity.FHIRTimingRepeat.DayOfWeek == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.DayOfWeek(childComplexity), true

	case "FHIRTimingRepeat.Duration":
		if e.complexity.FHIRTimingRepeat.Duration == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Duration(childComplexity), true

	case "FHIRTimingRepeat.DurationMax":
		if e.complexity.FHIRTimingRepeat.DurationMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.DurationMax(childComplexity), true

	case "FHIRTimingRepeat.DurationUnit":
		if e.complexity.FHIRTimingRepeat.DurationUnit == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.DurationUnit(childComplexity), true

	case "FHIRTimingRepeat.Frequency":
		if e.complexity.FHIRTimingRepeat.Frequency == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Frequency(childComplexity), true

	case "FHIRTimingRepeat.FrequencyMax":
		if e.complexity.FHIRTimingRepeat.FrequencyMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.FrequencyMax(childComplexity), true

	case "FHIRTimingRepeat.ID":
		if e.complexity.FHIRTimingRepeat.ID == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.ID(childComplexity), true

	case "FHIRTimingRepeat.Offset":
		if e.complexity.FHIRTimingRepeat.Offset == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Offset(childComplexity), true

	case "FHIRTimingRepeat.Period":
		if e.complexity.FHIRTimingRepeat.Period == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Period(childComplexity), true

	case "FHIRTimingRepeat.PeriodMax":
		if e.complexity.FHIRTimingRepeat.PeriodMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.PeriodMax(childComplexity), true

	case "FHIRTimingRepeat.PeriodUnit":
		if e.complexity.FHIRTimingRepeat.PeriodUnit == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.PeriodUnit(childComplexity), true

	case "FHIRTimingRepeat.TimeOfDay":
		if e.complexity.FHIRTimingRepeat.TimeOfDay == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.TimeOfDay(childComplexity), true

	case "FHIRTimingRepeat.When":
		if e.complexity.FHIRTimingRepeat.When == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.When(childComplexity), true

	case "HealthTimeline.timeline":
		if e.complexity.HealthTimeline.Timeline == nil {
			break
		}

		return e.complexity.HealthTimeline.Timeline(childComplexity), true

	case "HealthTimeline.totalCount":
		if e.complexity.HealthTimeline.TotalCount == nil {
			break
		}

		return e.complexity.HealthTimeline.TotalCount(childComplexity), true

	case "MedicalData.allergies":
		if e.complexity.MedicalData.Allergies == nil {
			break
		}

		return e.complexity.MedicalData.Allergies(childComplexity), true

	case "MedicalData.bmi":
		if e.complexity.MedicalData.BMI == nil {
			break
		}

		return e.complexity.MedicalData.BMI(childComplexity), true

	case "MedicalData.cd4Count":
		if e.complexity.MedicalData.CD4Count == nil {
			break
		}

		return e.complexity.MedicalData.CD4Count(childComplexity), true

	case "MedicalData.regimen":
		if e.complexity.MedicalData.Regimen == nil {
			break
		}

		return e.complexity.MedicalData.Regimen(childComplexity), true

	case "MedicalData.viralLoad":
		if e.complexity.MedicalData.ViralLoad == nil {
			break
		}

		return e.complexity.MedicalData.ViralLoad(childComplexity), true

	case "MedicalData.weight":
		if e.complexity.MedicalData.Weight == nil {
			break
		}

		return e.complexity.MedicalData.Weight(childComplexity), true

	case "Medication.code":
		if e.complexity.Medication.Code == nil {
			break
		}

		return e.complexity.Medication.Code(childComplexity), true

	case "Medication.name":
		if e.complexity.Medication.Name == nil {
			break
		}

		return e.complexity.Medication.Name(childComplexity), true

	case "MedicationStatement.id":
		if e.complexity.MedicationStatement.ID == nil {
			break
		}

		return e.complexity.MedicationStatement.ID(childComplexity), true

	case "MedicationStatement.medication":
		if e.complexity.MedicationStatement.Medication == nil {
			break
		}

		return e.complexity.MedicationStatement.Medication(childComplexity), true

	case "MedicationStatement.patientID":
		if e.complexity.MedicationStatement.PatientID == nil {
			break
		}

		return e.complexity.MedicationStatement.PatientID(childComplexity), true

	case "MedicationStatement.status":
		if e.complexity.MedicationStatement.Status == nil {
			break
		}

		return e.complexity.MedicationStatement.Status(childComplexity), true

	case "Mutation.createEpisodeOfCare":
		if e.complexity.Mutation.CreateEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Mutation_createEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEpisodeOfCare(childComplexity, args["episodeOfCare"].(dto.EpisodeOfCareInput)), true

	case "Mutation.createFHIROrganization":
		if e.complexity.Mutation.CreateFHIROrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIROrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIROrganization(childComplexity, args["input"].(domain.FHIROrganizationInput)), true

	case "Mutation.createPatient":
		if e.complexity.Mutation.CreatePatient == nil {
			break
		}

		args, err := ec.field_Mutation_createPatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePatient(childComplexity, args["input"].(dto.PatientInput)), true

	case "Mutation.endEncounter":
		if e.complexity.Mutation.EndEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_endEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndEncounter(childComplexity, args["encounterID"].(string)), true

	case "Mutation.endEpisodeOfCare":
		if e.complexity.Mutation.EndEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Mutation_endEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndEpisodeOfCare(childComplexity, args["id"].(string)), true

	case "Mutation.recordBloodPressure":
		if e.complexity.Mutation.RecordBloodPressure == nil {
			break
		}

		args, err := ec.field_Mutation_recordBloodPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordBloodPressure(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordBMI":
		if e.complexity.Mutation.RecordBmi == nil {
			break
		}

		args, err := ec.field_Mutation_recordBMI_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordBmi(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordHeight":
		if e.complexity.Mutation.RecordHeight == nil {
			break
		}

		args, err := ec.field_Mutation_recordHeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordHeight(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordPulseRate":
		if e.complexity.Mutation.RecordPulseRate == nil {
			break
		}

		args, err := ec.field_Mutation_recordPulseRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordPulseRate(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordRespiratoryRate":
		if e.complexity.Mutation.RecordRespiratoryRate == nil {
			break
		}

		args, err := ec.field_Mutation_recordRespiratoryRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordRespiratoryRate(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordTemperature":
		if e.complexity.Mutation.RecordTemperature == nil {
			break
		}

		args, err := ec.field_Mutation_recordTemperature_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordTemperature(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordWeight":
		if e.complexity.Mutation.RecordWeight == nil {
			break
		}

		args, err := ec.field_Mutation_recordWeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordWeight(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.startEncounter":
		if e.complexity.Mutation.StartEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_startEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartEncounter(childComplexity, args["episodeID"].(string)), true

	case "Observation.encounterID":
		if e.complexity.Observation.EncounterID == nil {
			break
		}

		return e.complexity.Observation.EncounterID(childComplexity), true

	case "Observation.id":
		if e.complexity.Observation.ID == nil {
			break
		}

		return e.complexity.Observation.ID(childComplexity), true

	case "Observation.name":
		if e.complexity.Observation.Name == nil {
			break
		}

		return e.complexity.Observation.Name(childComplexity), true

	case "Observation.patientID":
		if e.complexity.Observation.PatientID == nil {
			break
		}

		return e.complexity.Observation.PatientID(childComplexity), true

	case "Observation.status":
		if e.complexity.Observation.Status == nil {
			break
		}

		return e.complexity.Observation.Status(childComplexity), true

	case "Observation.value":
		if e.complexity.Observation.Value == nil {
			break
		}

		return e.complexity.Observation.Value(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "Patient.active":
		if e.complexity.Patient.Active == nil {
			break
		}

		return e.complexity.Patient.Active(childComplexity), true

	case "Patient.birthDate":
		if e.complexity.Patient.BirthDate == nil {
			break
		}

		return e.complexity.Patient.BirthDate(childComplexity), true

	case "Patient.gender":
		if e.complexity.Patient.Gender == nil {
			break
		}

		return e.complexity.Patient.Gender(childComplexity), true

	case "Patient.id":
		if e.complexity.Patient.ID == nil {
			break
		}

		return e.complexity.Patient.ID(childComplexity), true

	case "Patient.name":
		if e.complexity.Patient.Name == nil {
			break
		}

		return e.complexity.Patient.Name(childComplexity), true

	case "Patient.phoneNumber":
		if e.complexity.Patient.PhoneNumber == nil {
			break
		}

		return e.complexity.Patient.PhoneNumber(childComplexity), true

	case "Query.getEpisodeOfCare":
		if e.complexity.Query.GetEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Query_getEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEpisodeOfCare(childComplexity, args["id"].(string)), true

	case "Query.getMedicalData":
		if e.complexity.Query.GetMedicalData == nil {
			break
		}

		args, err := ec.field_Query_getMedicalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMedicalData(childComplexity, args["patientID"].(string)), true

	case "Query.getPatientBloodPressureEntries":
		if e.complexity.Query.GetPatientBloodPressureEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientBloodPressureEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientBloodPressureEntries(childComplexity, args["patientID"].(string)), true

	case "Query.getPatientTemperatureEntries":
		if e.complexity.Query.GetPatientTemperatureEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientTemperatureEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientTemperatureEntries(childComplexity, args["patientID"].(string)), true

	case "Query.listPatientEncounters":
		if e.complexity.Query.ListPatientEncounters == nil {
			break
		}

		args, err := ec.field_Query_listPatientEncounters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPatientEncounters(childComplexity, args["patientID"].(string)), true

	case "Query.patientHealthTimeline":
		if e.complexity.Query.PatientHealthTimeline == nil {
			break
		}

		args, err := ec.field_Query_patientHealthTimeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientHealthTimeline(childComplexity, args["input"].(dto.HealthTimelineInput)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "TimelineResource.date":
		if e.complexity.TimelineResource.Date == nil {
			break
		}

		return e.complexity.TimelineResource.Date(childComplexity), true

	case "TimelineResource.id":
		if e.complexity.TimelineResource.ID == nil {
			break
		}

		return e.complexity.TimelineResource.ID(childComplexity), true

	case "TimelineResource.name":
		if e.complexity.TimelineResource.Name == nil {
			break
		}

		return e.complexity.TimelineResource.Name(childComplexity), true

	case "TimelineResource.resourceType":
		if e.complexity.TimelineResource.ResourceType == nil {
			break
		}

		return e.complexity.TimelineResource.ResourceType(childComplexity), true

	case "TimelineResource.status":
		if e.complexity.TimelineResource.Status == nil {
			break
		}

		return e.complexity.TimelineResource.Status(childComplexity), true

	case "TimelineResource.value":
		if e.complexity.TimelineResource.Value == nil {
			break
		}

		return e.complexity.TimelineResource.Value(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputContactInput,
		ec.unmarshalInputEpisodeOfCareInput,
		ec.unmarshalInputFHIRAddressInput,
		ec.unmarshalInputFHIRAgeInput,
		ec.unmarshalInputFHIRAnnotationInput,
		ec.unmarshalInputFHIRAttachmentInput,
		ec.unmarshalInputFHIRCodeableConceptInput,
		ec.unmarshalInputFHIRCodingInput,
		ec.unmarshalInputFHIRContactPointInput,
		ec.unmarshalInputFHIRDosageDoseandrateInput,
		ec.unmarshalInputFHIRDosageInput,
		ec.unmarshalInputFHIRDurationInput,
		ec.unmarshalInputFHIRHumanNameInput,
		ec.unmarshalInputFHIRIdentifierInput,
		ec.unmarshalInputFHIRNarrativeInput,
		ec.unmarshalInputFHIROrganizationInput,
		ec.unmarshalInputFHIRPeriodInput,
		ec.unmarshalInputFHIRQuantityInput,
		ec.unmarshalInputFHIRRangeInput,
		ec.unmarshalInputFHIRRatioInput,
		ec.unmarshalInputFHIRReferenceInput,
		ec.unmarshalInputFHIRSampledDataInput,
		ec.unmarshalInputFHIRTimingInput,
		ec.unmarshalInputFHIRTimingRepeatInput,
		ec.unmarshalInputHealthTimelineInput,
		ec.unmarshalInputIdentifierInput,
		ec.unmarshalInputObservationInput,
		ec.unmarshalInputPatientInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../clinical.graphql", Input: `extend type Query {
  patientHealthTimeline(input: HealthTimelineInput!): HealthTimeline!
  getMedicalData(patientID: String!): MedicalData

  getEpisodeOfCare(id: ID!): EpisodeOfCare

  # Encounter
  listPatientEncounters(patientID: String!): [Encounter!]!

  # Observation
  getPatientTemperatureEntries(patientID: String!): [Observation!]
  getPatientBloodPressureEntries(patientID: String!): [Observation!]
}

extend type Mutation {
  createFHIROrganization(
    input: FHIROrganizationInput!
  ): FHIROrganizationRelayPayload!

  # EpisodeOfCare
  createEpisodeOfCare(episodeOfCare: EpisodeOfCareInput!): EpisodeOfCare
  endEpisodeOfCare(id: ID!): EpisodeOfCare

  # Encounter
  startEncounter(episodeID: String!): String!
  endEncounter(encounterID: String!): Boolean!

  # Observation
  recordTemperature(input: ObservationInput!): Observation!
  recordHeight(input: ObservationInput!): Observation!
  recordWeight(input: ObservationInput!): Observation!
  recordRespiratoryRate(input: ObservationInput!): Observation!
  recordPulseRate(input: ObservationInput!): Observation!
  recordBloodPressure(input: ObservationInput!): Observation!
  recordBMI(input: ObservationInput!): Observation!

  # Patient
  createPatient(input: PatientInput!): Patient!
}
`, BuiltIn: false},
	{Name: "../enums.graphql", Input: `enum EpisodeOfCareStatusEnum {
  planned
  active
  finished
  cancelled
}

enum EncounterStatusEnum {
  planned
  arrived
  triaged
  in_progress
  onleave
  finished
  cancelled
  entered_in_error
  unknown
}

enum EncounterClass {
  ambulatory
}

enum ResourceType {
  AllergyIntolerance
  Observation
  Condition
  MedicationStatement
}

enum AllergyIntoleranceReactionSeverityEnum {
  mild
  moderate
  severe
}

enum ObservationStatus {
  final
  cancelled
}

enum MedicationStatementStatusEnum {
  active
  inactive
  unknown
}

enum Gender {
  male
  female
  other
}

enum IdentifierType {
  NATIONAL_ID
  PASSPORT
  ALIEN_ID
  CCC_NUMBER
}

enum ContactType {
  PHONE_NUMBER
}`, BuiltIn: false},
	{Name: "../external.graphql", Input: `scalar Map
scalar Any
scalar Time
scalar Date
scalar Markdown
scalar Decimal
scalar URL
scalar ResourceList
scalar Base64Binary
scalar Canonical
scalar Code
scalar DateTime
scalar Instant
scalar Integer
scalar OID
scalar PositiveInt
scalar UnsignedInt
scalar URI
scalar UUID
scalar XHTML

extend type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}`, BuiltIn: false},
	{Name: "../inputs.graphql", Input: `input HealthTimelineInput {
  patientID: String!
  offset: Int!
  limit: Int!
}

input EpisodeOfCareInput {
  status: EpisodeOfCareStatusEnum!
  patientID: String!
}

input ObservationInput {
  status: ObservationStatus!
  encounterID: String!
  value: String!
}

input PatientInput {
  firstName: String!
  lastName: String
  otherNames: String
  birthDate: Date!
  gender: Gender!
  identifiers: [IdentifierInput!]!
  contacts: [ContactInput!]!
}

input IdentifierInput {
  type: IdentifierType!
  value: String!
}

input ContactInput {
  type: ContactType!
  value: String!
}`, BuiltIn: false},
	{Name: "../types.graphql", Input: `type AllergyIntolerance {
  id: ID!
  patientID: String!
  encounterID: String
  onsetDateTime: DateTime!
  severity: AllergyIntoleranceReactionSeverityEnum
  substanceCode: String!
  substanceSystem: String
}

type Observation {
  id: String!
  status: ObservationStatus!
  patientID: String!
  encounterID: String!
  name: String!
  value: String!
}

type Medication {
  name: String!
  code: String!
}

type MedicationStatement {
  id: ID!

  status: MedicationStatementStatusEnum

  medication: Medication!

  patientID: String
}

type MedicalData {
  regimen: [MedicationStatement]
  allergies: [AllergyIntolerance]
  weight: [Observation]
  bmi: [Observation]
  viralLoad: [Observation]
  cd4Count: [Observation]
}

type TimelineResource {
  id: ID!
  resourceType: ResourceType
  name: String
  value: String
  status: String
  date: Date
}

type HealthTimeline {
  timeline: [TimelineResource]
  totalCount: Int!
}

type EpisodeOfCare {
  id: ID!
  status: EpisodeOfCareStatusEnum!
  patientID: String!
}

type Encounter {
  id: String
  class: EncounterClass
  episodeOfCareID: String
  status: EncounterStatusEnum
  patientID: String
}

type Patient {
  id: ID!
  active: Boolean!
  name: String!
  phoneNumber: [String!]!
  gender: Gender!
  birthDate: Date
}
`, BuiltIn: false},
	{Name: "../fhir/Organization.graphql", Input: `"""
FHIROrganizationInput: input for Organization
"""
input FHIROrganizationInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  An identifier for this organization
  """
  Identifier: [FHIRIdentifierInput]
  """
  Whether this organization record is in active use.
  """

  Active: Boolean
  
  """
  Specific type of organization (e.g. Healthcare Provider, Hospital Department, Insurance Company).
  """
  Type: [FHIRCodeableConceptInput]

  """
  A name associated with the organization.
  """

  Name: String
  """
  An alternate name for the organization.
  """
  Alias: [String]
  
  """
  A contact detail (e.g. a telephone number or an email address) by which the organization may be contacted.
  """
  Telecom: [FHIRContactPointInput]
  
  """
  An address for the organization.
  """
  Address: [FHIRAddressInput]

}

type FHIROrganization {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  An identifier for this organization.
  """
  Identifier: [FHIRIdentifier]

  """
  Whether this organization record is in active use.
  """
  Active: Boolean

  """
  Specific type of organization (e.g. Healthcare Provider, Hospital Department, Insurance Company).
  """
  Type: [FHIRCodeableConcept]

  """
  A name associated with the organization.
  """
  Name: String

  """
  An alternate name for the organization.
  """
  Alias: [String]

  """
  A contact detail (e.g. a telephone number or an email address) by which the organization may be contacted.
  """
  Telecom: [FHIRContactPoint]

  """
  An address for the organization.
  """
  Address: [FHIRAddress]

}

"""
FHIROrganizationRelayPayload is used to return single instances of Organization
"""
type FHIROrganizationRelayPayload  {
  resource: FHIROrganization!
}

"""
FHIROrganizationRelayEdge is a Relay edge for Organization
"""
type FHIROrganizationRelayEdge {
  cursor: String
  node: FHIROrganization
}

"""
FHIROrganizationRelayConnection is a Relay connection for Organization
"""
type FHIROrganizationRelayConnection {
  edges: [FHIROrganizationRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "../fhir/complex_types.graphql", Input: `
"""
FHIRTimingRepeatInput: input for TimingRepeat
"""
input FHIRTimingRepeatInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsDuration: FHIRDurationInput
  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsRange: FHIRRangeInput
  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsPeriod: FHIRPeriodInput
  """
  A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
  """
  Count: PositiveInt
  """
  If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
  """
  CountMax: PositiveInt
  """
  How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
  """
  Duration: Decimal
  """
  If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
  """
  DurationMax: Decimal
  """
  The units of time for the duration, in UCUM units.
  """
  DurationUnit: TimingRepeatDurationUnitEnum
  """
  The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
  """
  Frequency: PositiveInt
  """
  If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
  """
  FrequencyMax: PositiveInt
  """
  Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
  """
  Period: Decimal
  """
  If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
  """
  PeriodMax: Decimal
  """
  The units of time for the period in UCUM units.
  """
  PeriodUnit: TimingRepeatPeriodUnitEnum
  """
  If one or more days of week is provided, then the action happens only on the specified day(s).
  """
  DayOfWeek: Code
  """
  Specified time of day for action to take place.
  """
  TimeOfDay: Time
  """
  An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
  """
  When: TimingRepeatWhenEnum
  """
  The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
  """
  Offset: Int
}
"""
FHIRTimingInput: input for Timing
"""
input FHIRTimingInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identifies specific times when the event occurs.
  """
  Event: DateTime
  """
  A set of rules that describe when the event is scheduled.
  """
  Repeat: FHIRTimingRepeatInput
  """
  A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
  """
  Code: Code!
}

"""
FHIRSampledDataInput: input for SampledData
"""
input FHIRSampledDataInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
  """
  Origin: FHIRQuantityInput!
  """
  The length of time between sampling times, measured in milliseconds.
  """
  Period: Decimal
  """
  A correction factor that is applied to the sampled data points before they are added to the origin.
  """
  Factor: Decimal
  """
  The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
  """
  LowerLimit: Decimal
  """
  The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
  """
  UpperLimit: Decimal
  """
  The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
  """
  Dimensions: PositiveInt
  """
  A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
  """
  Data: String
}

"""
FHIRReferenceInput: input for Reference
"""
input FHIRReferenceInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
  """
  Reference: String
  """
      The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
  """
  Type: URI
  """
  An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
  """
  Identifier: FHIRIdentifierInput
  """
  Plain text narrative that identifies the resource in addition to the resource reference.
  """
  Display: String!
}

"""
FHIRRangeInput: input for Range
"""
input FHIRRangeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The low limit. The boundary is inclusive.
  """
  Low: FHIRQuantityInput
  """
  The high limit. The boundary is inclusive.
  """
  High: FHIRQuantityInput
}
"""
FHIRQuantityInput: input for Quantity
"""
input FHIRQuantityInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Float!
  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: QuantityComparatorEnum
  """
  A human-readable form of the unit.
  """
  Unit: String!
  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI!
  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code!
}

"""
FHIRPeriodInput: input for Period
"""
input FHIRPeriodInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The start of the period. The boundary is inclusive.
  """
  Start: DateTime!
  """
  The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
  """
  End: DateTime!
}

"""
FHIRNarrativeInput: input for Narrative
"""
input FHIRNarrativeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
  """
  Status: NarrativeStatusEnum
  """
  The actual narrative content, a stripped down version of XHTML.
  """
  Div: XHTML!
}

"""
FHIRIdentifierInput: input for Identifier
"""
input FHIRIdentifierInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The purpose of this identifier.
  """
  Use: IdentifierUseEnum!
  """
  A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
  """
  Type: FHIRCodeableConceptInput!
  """
  Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
  """
  System: URI
  """
  The portion of the identifier typically relevant to the user and which is unique within the context of the system.
  """
  Value: String!
  """
  Time period during which identifier is/was valid for use.
  """
  Period: FHIRPeriodInput
  """
  Organization that issued/manages the identifier.
  """
  Assigner: FHIRReferenceInput
}
"""
FHIRHumanNameInput: input for HumanName
"""
input FHIRHumanNameInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identifies the purpose for this name.
  """
  Use: HumanNameUseEnum!
  """
  Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
  """
  Text: String!
  """
  The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
  """
  Family: String
  """
  Given name.
  """
  Given: [String!]!
  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
  """
  Prefix: [String]
  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
  """
  Suffix: [String]
  """
  Indicates the period of time when this name was valid for the named person.
  """
  Period: FHIRPeriodInput
}

"""
FHIRDurationInput: input for Duration
"""
input FHIRDurationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal
  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: DurationComparatorEnum
  """
  A human-readable form of the unit.
  """
  Unit: String
  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI
  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}
"""
FHIRDosageDoseandrateInput: input for DosageDoseandrate
"""
input FHIRDosageDoseandrateInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The kind of dose or rate specified, for example, ordered or calculated.
  """
  Type: FHIRCodeableConceptInput
  """
  Amount of medication per dose.
  """
  DoseRange: FHIRRangeInput
  """
  Amount of medication per dose.
  """
  DoseQuantity: FHIRQuantityInput
  """
  Amount of medication per unit of time.
  """
  RateRatio: FHIRRatioInput
  """
  Amount of medication per unit of time.
  """
  RateRange: FHIRRangeInput
  """
  Amount of medication per unit of time.
  """
  RateQuantity: FHIRQuantityInput
}
"""
FHIRDosageInput: input for Dosage
"""
input FHIRDosageInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Indicates the order in which the dosage instructions should be applied or interpreted.
  """
  Sequence: Integer
  """
  Free text dosage instructions e.g. SIG.
  """
  Text: String
  """
  Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
  """
  AdditionalInstruction: [FHIRCodeableConceptInput]
  """
  Instructions in terms that are understood by the patient or consumer.
  """
  PatientInstruction: String
  """
  When medication should be administered.
  """
  Timing: FHIRTimingInput
  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededBoolean: Boolean
  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededCodeableConcept: Code
  """
  Body site to administer to.
  """
  Site: FHIRCodeableConceptInput
  """
  How drug should enter body.
  """
  Route: FHIRCodeableConceptInput
  """
  Technique for administering medication.
  """
  Method: FHIRCodeableConceptInput
  """
  The amount of medication administered.
  """
  DoseAndRate: [FHIRDosageDoseandrateInput]
  """
  Upper limit on medication per unit of time.
  """
  MaxDosePerPeriod: FHIRRatioInput
  """
  Upper limit on medication per administration.
  """
  MaxDosePerAdministration: FHIRQuantityInput
  """
  Upper limit on medication per lifetime of the patient.
  """
  MaxDosePerLifetime: FHIRQuantityInput
}

"""
FHIRContactPointInput: input for ContactPoint
"""
input FHIRContactPointInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Telecommunications form for contact point - what communications system is required to make use of the contact.
  """
  System: ContactPointSystemEnum
  """
  The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
  """
  Value: String
  """
  Identifies the purpose for the contact point.
  """
  Use: ContactPointUseEnum
  """
  Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
  """
  Rank: Int
  """
  Time period when the contact point was/is in use.
  """
  Period: FHIRPeriodInput
}

"""
FHIRCodingInput: input for Coding
"""
input FHIRCodingInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The identification of the code system that defines the meaning of the symbol in the code.
  """
  System: URI
  """
  The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
  """
  Version: String
  """
  A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
  """
  Code: Code!
  """
  A representation of the meaning of the code in the system, following the rules of the system.
  """
  Display: String!
  """
  Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
  """
  UserSelected: Boolean
}
"""
FHIRCodeableConceptInput: input for CodeableConcept
"""
input FHIRCodeableConceptInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A reference to a code defined by a terminology system.
  """
  Coding: [FHIRCodingInput!]!
  """
  A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
  """
  Text: String!
}
"""
FHIRAttachmentInput: input for Attachment
"""
input FHIRAttachmentInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
  """
  ContentType: Code
  """
  The human language of the content. The value can be any valid value according to BCP 47.
  """
  Language: Code
  """
  The actual data of the attachment - a sequence of bytes, base64 encoded.
  """
  Data: Base64Binary
  """
  A location where the data can be accessed.
  """
  URL: URL
  """
  The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
  """
  Size: Int
  """
  The calculated hash of the data using SHA-1. Represented using base64.
  """
  Hash: Base64Binary
  """
  A label or set of text to display in place of the data.
  """
  Title: String
  """
  The date that the attachment was first created.
  """
  Creation: DateTime
}
"""
FHIRAnnotationInput: input for Annotation
"""
input FHIRAnnotationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The individual responsible for making the annotation.
  """
  AuthorReference: FHIRReferenceInput
  """
  The individual responsible for making the annotation.
  """
  AuthorString: String
  """
  Indicates when this particular annotation was made.
  """
  Time: DateTime
  """
  The text of the annotation in markdown format.
  """
  Text: Markdown
}
"""
FHIRAgeInput: input for Age
"""
input FHIRAgeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal
  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: AgeComparatorEnum
  """
  A human-readable form of the unit.
  """
  Unit: String
  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI
  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}
"""
FHIRAddressInput: input for Address
"""
input FHIRAddressInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The purpose of this address.
  """
  Use: AddressUseEnum
  """
  Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
  """
  Type: AddressTypeEnum
  """
  Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
  """
  Text: String!
  """
  This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
  """
  Line: [String]
  """
  The name of the city, town, suburb, village or other community or delivery center.
  """
  City: String
  """
  The name of the administrative area (county).
  """
  District: String
  """
  Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
  """
  State: String
  """
  A postal code designating a region defined by the postal service.
  """
  PostalCode: Code
  """
  Country - a nation as commonly understood or generally accepted.
  """
  Country: String
  """
  Time period when address was/is in use.
  """
  Period: FHIRPeriodInput
}

"""
FHIRTimingRepeat definition: specifies an event that may occur multiple times. timing schedules are used to record when things are planned, expected or requested to occur. the most common usage is in dosage instructions for medications. they are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
"""
type FHIRTimingRepeat {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsDuration: FHIRDuration

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsRange: FHIRRange

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsPeriod: FHIRPeriod

  """
  A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
  """
  Count: PositiveInt

  """
  If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
  """
  CountMax: PositiveInt

  """
  How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
  """
  Duration: Decimal

  """
  If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
  """
  DurationMax: Decimal

  """
  The units of time for the duration, in UCUM units.
  """
  DurationUnit: TimingRepeatDurationUnitEnum

  """
  The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
  """
  Frequency: PositiveInt

  """
  If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
  """
  FrequencyMax: PositiveInt

  """
  Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
  """
  Period: Decimal

  """
  If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
  """
  PeriodMax: Decimal

  """
  The units of time for the period in UCUM units.
  """
  PeriodUnit: TimingRepeatPeriodUnitEnum

  """
  If one or more days of week is provided, then the action happens only on the specified day(s).
  """
  DayOfWeek: [Code]

  """
  Specified time of day for action to take place.
  """
  TimeOfDay: Time

  """
  An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
  """
  When: TimingRepeatWhenEnum

  """
  The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
  """
  Offset: Int
}

"""
FHIRTiming definition: specifies an event that may occur multiple times. timing schedules are used to record when things are planned, expected or requested to occur. the most common usage is in dosage instructions for medications. they are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
"""
type FHIRTiming {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identifies specific times when the event occurs.
  """
  Event: [DateTime]

  """
  A set of rules that describe when the event is scheduled.
  """
  Repeat: FHIRTimingRepeat

  """
  A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
  """
  Code: Code!
}

"""
FHIRSampledData definition: a series of measurements taken by a device, with upper and lower limits. there may be more than one dimension in the data.
"""
type FHIRSampledData {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
  """
  Origin: FHIRQuantity!

  """
  The length of time between sampling times, measured in milliseconds.
  """
  Period: Decimal

  """
  A correction factor that is applied to the sampled data points before they are added to the origin.
  """
  Factor: Decimal

  """
  The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
  """
  LowerLimit: Decimal

  """
  The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
  """
  UpperLimit: Decimal

  """
  The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
  """
  Dimensions: PositiveInt

  """
  A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
  """
  Data: String
}

"""
FHIRReference definition: a reference from one resource to another.
"""
type FHIRReference {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
  """
  Reference: String

  """
      The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
  """
  Type: URI

  """
  An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
  """
  Identifier: FHIRIdentifier

  """
  Plain text narrative that identifies the resource in addition to the resource reference.
  """
  Display: String!
}

"""
FHIRRatio definition: a relationship of two quantity values - expressed as a numerator and a denominator.
"""
type FHIRRatio {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the numerator.
  """
  Numerator: FHIRQuantity!

  """
  The value of the denominator.
  """
  Denominator: FHIRQuantity!
}


"""
FHIRRatio definition: a relationship of two quantity values - expressed as a numerator and a denominator.
"""
input FHIRRatioInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the numerator.
  """
  Numerator: FHIRQuantityInput!

  """
  The value of the denominator.
  """
  Denominator: FHIRQuantityInput!
}

"""
FHIRRange definition: a set of ordered quantities defined by a low and high limit.
"""
type FHIRRange {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The low limit. The boundary is inclusive.
  """
  Low: FHIRQuantity!

  """
  The high limit. The boundary is inclusive.
  """
  High: FHIRQuantity!
}

"""
FHIRQuantity definition: a measured amount (or an amount that can potentially be measured). note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
"""
type FHIRQuantity {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Float!

  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: QuantityComparatorEnum

  """
  A human-readable form of the unit.
  """
  Unit: String!

  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI!

  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code!
}

"""
FHIRPeriod definition: a time period defined by a start and end date and optionally time.
"""
type FHIRPeriod {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The start of the period. The boundary is inclusive.
  """
  Start: DateTime!

  """
  The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
  """
  End: DateTime!
}

"""
FHIRNarrative definition: a human-readable summary of the resource conveying the essential clinical and business information for the resource.
"""
type FHIRNarrative {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
  """
  Status: NarrativeStatusEnum

  """
  The actual narrative content, a stripped down version of XHTML.
  """
  Div: XHTML!
}

"""
FHIRIdentifier definition: an identifier - identifies some entity uniquely and unambiguously. typically this is used for business identifiers.
"""
type FHIRIdentifier {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The purpose of this identifier.
  """
  Use: IdentifierUseEnum!

  """
  A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
  """
  Type: FHIRCodeableConcept!

  """
  Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
  """
  System: URI

  """
  The portion of the identifier typically relevant to the user and which is unique within the context of the system.
  """
  Value: String!

  """
  Time period during which identifier is/was valid for use.
  """
  Period: FHIRPeriod

  """
  Organization that issued/manages the identifier.
  """
  Assigner: FHIRReference
}

"""
FHIRHumanName definition: a human's name with the ability to identify parts and usage.
"""
type FHIRHumanName {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identifies the purpose for this name.
  """
  Use: HumanNameUseEnum!

  """
  Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
  """
  Text: String!

  """
  The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
  """
  Family: String

  """
  Given name.
  """
  Given: [String]

  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
  """
  Prefix: [String]

  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
  """
  Suffix: [String]

  """
  Indicates the period of time when this name was valid for the named person.
  """
  Period: FHIRPeriod
}

"""
FHIRDuration definition: a length of time.
"""
type FHIRDuration {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal

  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: DurationComparatorEnum

  """
  A human-readable form of the unit.
  """
  Unit: String

  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI

  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}

"""
FHIRDosageDoseandrate definition: indicates how the medication is/was taken or should be taken by the patient.
"""
type FHIRDosageDoseandrate {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The kind of dose or rate specified, for example, ordered or calculated.
  """
  Type: FHIRCodeableConcept

  """
  Amount of medication per dose.
  """
  DoseRange: FHIRRange

  """
  Amount of medication per dose.
  """
  DoseQuantity: FHIRQuantity

  """
  Amount of medication per unit of time.
  """
  RateRatio: FHIRRatio

  """
  Amount of medication per unit of time.
  """
  RateRange: FHIRRange

  """
  Amount of medication per unit of time.
  """
  RateQuantity: FHIRQuantity
}

"""
FHIRDosage definition: indicates how the medication is/was taken or should be taken by the patient.
"""
type FHIRDosage {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Indicates the order in which the dosage instructions should be applied or interpreted.
  """
  Sequence: Integer

  """
  Free text dosage instructions e.g. SIG.
  """
  Text: String

  """
  Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
  """
  AdditionalInstruction: [FHIRCodeableConcept]

  """
  Instructions in terms that are understood by the patient or consumer.
  """
  PatientInstruction: String

  """
  When medication should be administered.
  """
  Timing: FHIRTiming

  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededBoolean: Boolean

  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededCodeableConcept: Code

  """
  Body site to administer to.
  """
  Site: FHIRCodeableConcept

  """
  How drug should enter body.
  """
  Route: FHIRCodeableConcept

  """
  Technique for administering medication.
  """
  Method: FHIRCodeableConcept

  """
  The amount of medication administered.
  """
  DoseAndRate: [FHIRDosageDoseandrate]

  """
  Upper limit on medication per unit of time.
  """
  MaxDosePerPeriod: FHIRRatio

  """
  Upper limit on medication per administration.
  """
  MaxDosePerAdministration: FHIRQuantity

  """
  Upper limit on medication per lifetime of the patient.
  """
  MaxDosePerLifetime: FHIRQuantity
}


"""
FHIRContactPoint definition: details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
"""
type FHIRContactPoint {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Telecommunications form for contact point - what communications system is required to make use of the contact.
  """
  System: ContactPointSystemEnum

  """
  The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
  """
  Value: String

  """
  Identifies the purpose for the contact point.
  """
  Use: ContactPointUseEnum

  """
  Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
  """
  Rank: Int

  """
  Time period when the contact point was/is in use.
  """
  Period: FHIRPeriod
}

"""
FHIRCoding definition: a reference to a code defined by a terminology system.
"""
type FHIRCoding {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The identification of the code system that defines the meaning of the symbol in the code.
  """
  System: URI

  """
  The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
  """
  Version: String

  """
  A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
  """
  Code: Code!

  """
  A representation of the meaning of the code in the system, following the rules of the system.
  """
  Display: String!

  """
  Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
  """
  UserSelected: Boolean
}

"""
FHIRCodeableConcept definition: a concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
"""
type FHIRCodeableConcept {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A reference to a code defined by a terminology system.
  """
  Coding: [FHIRCoding!]!

  """
  A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
  """
  Text: String!
}

"""
FHIRAttachment definition: for referring to data content defined in other formats.
"""
type FHIRAttachment {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
  """
  ContentType: Code

  """
  The human language of the content. The value can be any valid value according to BCP 47.
  """
  Language: Code

  """
  The actual data of the attachment - a sequence of bytes, base64 encoded.
  """
  Data: Base64Binary

  """
  A location where the data can be accessed.
  """
  URL: URL

  """
  The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
  """
  Size: Int

  """
  The calculated hash of the data using SHA-1. Represented using base64.
  """
  Hash: Base64Binary

  """
  A label or set of text to display in place of the data.
  """
  Title: String

  """
  The date that the attachment was first created.
  """
  Creation: DateTime
}

"""
FHIRAnnotation definition: a  text note which also  contains information about who made the statement and when.
"""
type FHIRAnnotation {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The individual responsible for making the annotation.
  """
  AuthorReference: FHIRReference

  """
  The individual responsible for making the annotation.
  """
  AuthorString: String

  """
  Indicates when this particular annotation was made.
  """
  Time: Time

  """
  The text of the annotation in markdown format.
  """
  Text: Markdown
}

"""
FHIRAge definition: a duration of time during which an organism (or a process) has existed.
"""
type FHIRAge {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal

  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: AgeComparatorEnum

  """
  A human-readable form of the unit.
  """
  Unit: String

  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI

  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}

"""
FHIRAddress definition: an address expressed using postal conventions (as opposed to gps or other location definition formats).  this data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  there are a variety of postal address formats defined around the world.
"""
type FHIRAddress {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The purpose of this address.
  """
  Use: AddressUseEnum

  """
  Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
  """
  Type: AddressTypeEnum

  """
  Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
  """
  Text: String!

  """
  This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
  """
  Line: [String]

  """
  The name of the city, town, suburb, village or other community or delivery center.
  """
  City: String

  """
  The name of the administrative area (county).
  """
  District: String

  """
  Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
  """
  State: String

  """
  A postal code designating a region defined by the postal service.
  """
  PostalCode: Code

  """
  Country - a nation as commonly understood or generally accepted.
  """
  Country: String

  """
  Time period when address was/is in use.
  """
  Period: FHIRPeriod
}

"""
ContactPointSystemEnum is a FHIR enum
"""
enum ContactPointSystemEnum {
  phone
  fax
  email
  pager
  url
  sms
  other
}

"""
ContactPointUseEnum is a FHIR enum
"""
enum ContactPointUseEnum {
  home
  work
  temp
  old
  mobile
}

"""
AgeComparatorEnum is a FHIR enum
"""
enum AgeComparatorEnum {
  less_than # ` + "`" + `original: <` + "`" + `
  less_than_or_equal_to # ` + "`" + `original: <=` + "`" + `
  greater_than_or_equal_to # ` + "`" + `original: >=` + "`" + `
  greater_than # ` + "`" + `original: >` + "`" + `
}

"""
AddressUseEnum is a FHIR enum
"""
enum AddressUseEnum {
  home
  work
  temp
  old
  billing
}

"""
AddressTypeEnum is a FHIR enum
"""
enum AddressTypeEnum {
  postal
  physical
  both
}

"""
NarrativeStatusEnum is a FHIR enum
"""
enum NarrativeStatusEnum {
  generated
  extensions
  additional
  empty
}

"""
IdentifierUseEnum is a FHIR enum
"""
enum IdentifierUseEnum {
  usual
  official
  temp
  secondary
  old
}

"""
HumanNameUseEnum is a FHIR enum
"""
enum HumanNameUseEnum {
  usual
  official
  temp
  nickname
  anonymous
  old
  maiden
}

"""
TimingRepeatDurationUnitEnum is a FHIR enum
"""
enum TimingRepeatDurationUnitEnum {
  s
  min
  h
  d
  wk
  mo
  a
}

"""
TimingRepeatPeriodUnitEnum is a FHIR enum
"""
enum TimingRepeatPeriodUnitEnum {
  s
  min
  h
  d
  wk
  mo
  a
}

"""
TimingRepeatWhenEnum is a FHIR enum
"""
enum TimingRepeatWhenEnum {
  MORN
  MORN_early # ` + "`" + `original: MORN.early` + "`" + `
  MORN_late # ` + "`" + `original: MORN.late` + "`" + `
  NOON
  AFT
  AFT_early # ` + "`" + `original: AFT.early` + "`" + `
  AFT_late # ` + "`" + `original: AFT.late` + "`" + `
  EVE
  EVE_early # ` + "`" + `original: EVE.early` + "`" + `
  EVE_late # ` + "`" + `original: EVE.late` + "`" + `
  NIGHT
  PHS
  HS
  WAKE
  C
  CM
  CD
  CV
  AC
  ACM
  ACD
  ACV
  PC
  PCM
  PCD
  PCV
}

"""
QuantityComparatorEnum is a FHIR enum
"""
enum QuantityComparatorEnum {
  less_than # ` + "`" + `original: <` + "`" + `
  less_than_or_equal_to # ` + "`" + `original: <=` + "`" + `
  greater_than_or_equal_to # ` + "`" + `original: >=` + "`" + `
  greater_than # ` + "`" + `original: >` + "`" + `
}

"""
DurationComparatorEnum is a FHIR enum
"""
enum DurationComparatorEnum {
  less_than # ` + "`" + `original: <` + "`" + `
  less_than_or_equal_to # ` + "`" + `original: <=` + "`" + `
  greater_than_or_equal_to # ` + "`" + `original: >=` + "`" + `
  greater_than # ` + "`" + `original: >` + "`" + `
}
`, BuiltIn: false},
	{Name: "../../../../../federation/directives.graphql", Input: `
	scalar _Any
	scalar _FieldSet

	directive @external on FIELD_DEFINITION
	directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
	directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
	directive @extends on OBJECT | INTERFACE

	directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE
`, BuiltIn: true},
	{Name: "../../../../../federation/entity.graphql", Input: `
type _Service {
  sdl: String
}

extend type Query {
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.EpisodeOfCareInput
	if tmp, ok := rawArgs["episodeOfCare"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeOfCare"))
		arg0, err = ec.unmarshalNEpisodeOfCareInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeOfCare"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIROrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIROrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIROrganizationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.PatientInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPatientInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatientInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordBMI_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordBloodPressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordHeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordPulseRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordRespiratoryRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordTemperature_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordWeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_startEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMedicalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPatientBloodPressureEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPatientTemperatureEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listPatientEncounters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_patientHealthTimeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.HealthTimelineInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNHealthTimelineInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimelineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AllergyIntolerance_id(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyIntolerance_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyIntolerance_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyIntolerance_onsetDateTime(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_onsetDateTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.DateTime)
	fc.Result = res
	return ec.marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_onsetDateTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyIntolerance_severity(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_severity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.AllergyIntoleranceReactionSeverityEnum)
	fc.Result = res
	return ec.marshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_severity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AllergyIntoleranceReactionSeverityEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyIntolerance_substanceCode(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_substanceCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubstanceCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_substanceCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyIntolerance_substanceSystem(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyIntolerance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyIntolerance_substanceSystem(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubstanceSystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyIntolerance_substanceSystem(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyIntolerance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_id(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_class(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_class(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.EncounterClass)
	fc.Result = res
	return ec.marshalOEncounterClass2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClass(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_class(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EncounterClass does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_episodeOfCareID(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_episodeOfCareID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeOfCareID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_episodeOfCareID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_status(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.EncounterStatusEnum)
	fc.Result = res
	return ec.marshalOEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EncounterStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EpisodeOfCare_id(ctx context.Context, field graphql.CollectedField, obj *dto.EpisodeOfCare) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EpisodeOfCare_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EpisodeOfCare_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EpisodeOfCare",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EpisodeOfCare_status(ctx context.Context, field graphql.CollectedField, obj *dto.EpisodeOfCare) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EpisodeOfCare_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.EpisodeOfCareStatusEnum)
	fc.Result = res
	return ec.marshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EpisodeOfCare_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EpisodeOfCare",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EpisodeOfCareStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EpisodeOfCare_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.EpisodeOfCare) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EpisodeOfCare_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EpisodeOfCare",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_Use(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AddressUseEnum)
	fc.Result = res
	return ec.marshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_Use(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AddressUseEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AddressTypeEnum)
	fc.Result = res
	return ec.marshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AddressTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_Text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_Text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_Line(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_Line(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Line, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_Line(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_City(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_City(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_City(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_District(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_District(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_District(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_State(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_State(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_State(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_PostalCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_PostalCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_PostalCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_Country(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_Country(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_Country(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAddress_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAddress_Period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAddress_Period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRPeriod_ID(ctx, field)
			case "Start":
				return ec.fieldContext_FHIRPeriod_Start(ctx, field)
			case "End":
				return ec.fieldContext_FHIRPeriod_End(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAge_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAge_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAge_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAge_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAge_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAge_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAge_Comparator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAge_Comparator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AgeComparatorEnum)
	fc.Result = res
	return ec.marshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAge_Comparator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AgeComparatorEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAge_Unit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAge_Unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAge_Unit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAge_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAge_System(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAge_System(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAge_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAge_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAge_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAnnotation_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAnnotation_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAnnotation_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAnnotation_AuthorReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAnnotation_AuthorReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAnnotation_AuthorReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRReference_ID(ctx, field)
			case "Reference":
				return ec.fieldContext_FHIRReference_Reference(ctx, field)
			case "Type":
				return ec.fieldContext_FHIRReference_Type(ctx, field)
			case "Identifier":
				return ec.fieldContext_FHIRReference_Identifier(ctx, field)
			case "Display":
				return ec.fieldContext_FHIRReference_Display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAnnotation_AuthorString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAnnotation_AuthorString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAnnotation_AuthorString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAnnotation_Time(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAnnotation_Time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAnnotation_Time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAnnotation_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAnnotation_Text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Markdown)
	fc.Result = res
	return ec.marshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAnnotation_Text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Markdown does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_ContentType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_ContentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_ContentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_Language(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_Language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_Language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_Data(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_Data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Base64Binary)
	fc.Result = res
	return ec.marshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_Data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Base64Binary does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_URL(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_URL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URL)
	fc.Result = res
	return ec.marshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_URL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_Size(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_Size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_Size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_Hash(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_Hash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Base64Binary)
	fc.Result = res
	return ec.marshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_Hash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Base64Binary does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_Title(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_Title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_Title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRAttachment_Creation(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRAttachment_Creation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRAttachment_Creation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCodeableConcept_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCodeableConcept) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCodeableConcept_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCodeableConcept",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCodeableConcept_Coding(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCodeableConcept) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCoding)
	fc.Result = res
	return ec.marshalNFHIRCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCodeableConcept_Coding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCodeableConcept",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCoding_ID(ctx, field)
			case "System":
				return ec.fieldContext_FHIRCoding_System(ctx, field)
			case "Version":
				return ec.fieldContext_FHIRCoding_Version(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRCoding_Code(ctx, field)
			case "Display":
				return ec.fieldContext_FHIRCoding_Display(ctx, field)
			case "UserSelected":
				return ec.fieldContext_FHIRCoding_UserSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCoding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCodeableConcept_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCodeableConcept) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCodeableConcept_Text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCodeableConcept",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCoding_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCoding_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCoding_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCoding_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCoding_System(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCoding_System(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCoding_Version(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCoding_Version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCoding_Version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCoding_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCoding_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCoding_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCoding_Display(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCoding_Display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCoding_Display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRCoding_UserSelected(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRCoding_UserSelected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserSelected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRCoding_UserSelected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRContactPoint_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRContactPoint_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRContactPoint_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRContactPoint_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRContactPoint_System(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ContactPointSystemEnum)
	fc.Result = res
	return ec.marshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRContactPoint_System(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContactPointSystemEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRContactPoint_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRContactPoint_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRContactPoint_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRContactPoint_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRContactPoint_Use(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ContactPointUseEnum)
	fc.Result = res
	return ec.marshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRContactPoint_Use(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ContactPointUseEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRContactPoint_Rank(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRContactPoint_Rank(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRContactPoint_Rank(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRContactPoint_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRContactPoint_Period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRContactPoint_Period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRPeriod_ID(ctx, field)
			case "Start":
				return ec.fieldContext_FHIRPeriod_Start(ctx, field)
			case "End":
				return ec.fieldContext_FHIRPeriod_End(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_Sequence(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_Sequence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOInteger2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_Sequence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Integer does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_Text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_Text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_AdditionalInstruction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_AdditionalInstruction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalInstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_AdditionalInstruction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_PatientInstruction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_PatientInstruction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientInstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_PatientInstruction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_Timing(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_Timing(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRTiming)
	fc.Result = res
	return ec.marshalOFHIRTiming2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTiming(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_Timing(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRTiming_ID(ctx, field)
			case "Event":
				return ec.fieldContext_FHIRTiming_Event(ctx, field)
			case "Repeat":
				return ec.fieldContext_FHIRTiming_Repeat(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRTiming_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRTiming", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_AsNeededBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_AsNeededBoolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsNeededBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_AsNeededBoolean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_AsNeededCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_AsNeededCodeableConcept(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsNeededCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_AsNeededCodeableConcept(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_Site(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_Site(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Site, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_Site(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_Route(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_Route(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_Route(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_Method(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_Method(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_Method(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_DoseAndRate(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_DoseAndRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoseAndRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRDosageDoseandrate)
	fc.Result = res
	return ec.marshalOFHIRDosageDoseandrate2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_DoseAndRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRDosageDoseandrate_ID(ctx, field)
			case "Type":
				return ec.fieldContext_FHIRDosageDoseandrate_Type(ctx, field)
			case "DoseRange":
				return ec.fieldContext_FHIRDosageDoseandrate_DoseRange(ctx, field)
			case "DoseQuantity":
				return ec.fieldContext_FHIRDosageDoseandrate_DoseQuantity(ctx, field)
			case "RateRatio":
				return ec.fieldContext_FHIRDosageDoseandrate_RateRatio(ctx, field)
			case "RateRange":
				return ec.fieldContext_FHIRDosageDoseandrate_RateRange(ctx, field)
			case "RateQuantity":
				return ec.fieldContext_FHIRDosageDoseandrate_RateQuantity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRDosageDoseandrate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_MaxDosePerPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_MaxDosePerPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDosePerPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_MaxDosePerPeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRRatio_ID(ctx, field)
			case "Numerator":
				return ec.fieldContext_FHIRRatio_Numerator(ctx, field)
			case "Denominator":
				return ec.fieldContext_FHIRRatio_Denominator(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRRatio", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_MaxDosePerAdministration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_MaxDosePerAdministration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDosePerAdministration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_MaxDosePerAdministration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosage_MaxDosePerLifetime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosage_MaxDosePerLifetime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDosePerLifetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosage_MaxDosePerLifetime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_DoseRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_DoseRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoseRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_DoseRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRRange_ID(ctx, field)
			case "Low":
				return ec.fieldContext_FHIRRange_Low(ctx, field)
			case "High":
				return ec.fieldContext_FHIRRange_High(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_DoseQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_DoseQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoseQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_DoseQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_RateRatio(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_RateRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_RateRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRRatio_ID(ctx, field)
			case "Numerator":
				return ec.fieldContext_FHIRRatio_Numerator(ctx, field)
			case "Denominator":
				return ec.fieldContext_FHIRRatio_Denominator(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRRatio", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_RateRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_RateRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_RateRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRRange_ID(ctx, field)
			case "Low":
				return ec.fieldContext_FHIRRange_Low(ctx, field)
			case "High":
				return ec.fieldContext_FHIRRange_High(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDosageDoseandrate_RateQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDosageDoseandrate_RateQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDosageDoseandrate_RateQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDuration_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDuration_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDuration_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDuration_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDuration_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDuration_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDuration_Comparator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDuration_Comparator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.DurationComparatorEnum)
	fc.Result = res
	return ec.marshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDuration_Comparator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DurationComparatorEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDuration_Unit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDuration_Unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDuration_Unit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDuration_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDuration_System(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDuration_System(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRDuration_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRDuration_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRDuration_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Use(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.HumanNameUseEnum)
	fc.Result = res
	return ec.marshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Use(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type HumanNameUseEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Family(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Family(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Family, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Family(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Given(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Given(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Given, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Given(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Prefix(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Prefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Suffix(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Suffix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Suffix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRHumanName_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRHumanName_Period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRHumanName_Period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRPeriod_ID(ctx, field)
			case "Start":
				return ec.fieldContext_FHIRPeriod_Start(ctx, field)
			case "End":
				return ec.fieldContext_FHIRPeriod_End(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_Use(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.IdentifierUseEnum)
	fc.Result = res
	return ec.marshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_Use(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type IdentifierUseEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_System(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_System(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_Period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_Period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRPeriod_ID(ctx, field)
			case "Start":
				return ec.fieldContext_FHIRPeriod_Start(ctx, field)
			case "End":
				return ec.fieldContext_FHIRPeriod_End(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRIdentifier_Assigner(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRIdentifier_Assigner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assigner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRIdentifier_Assigner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRReference_ID(ctx, field)
			case "Reference":
				return ec.fieldContext_FHIRReference_Reference(ctx, field)
			case "Type":
				return ec.fieldContext_FHIRReference_Type(ctx, field)
			case "Identifier":
				return ec.fieldContext_FHIRReference_Identifier(ctx, field)
			case "Display":
				return ec.fieldContext_FHIRReference_Display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRReference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRNarrative_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRNarrative) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRNarrative_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRNarrative_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRNarrative",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRNarrative_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRNarrative) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRNarrative_Status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.NarrativeStatusEnum)
	fc.Result = res
	return ec.marshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRNarrative_Status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRNarrative",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NarrativeStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRNarrative_Div(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRNarrative) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRNarrative_Div(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Div, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.XHTML)
	fc.Result = res
	return ec.marshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRNarrative_Div(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRNarrative",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type XHTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRIdentifier_ID(ctx, field)
			case "Use":
				return ec.fieldContext_FHIRIdentifier_Use(ctx, field)
			case "Type":
				return ec.fieldContext_FHIRIdentifier_Type(ctx, field)
			case "System":
				return ec.fieldContext_FHIRIdentifier_System(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRIdentifier_Value(ctx, field)
			case "Period":
				return ec.fieldContext_FHIRIdentifier_Period(ctx, field)
			case "Assigner":
				return ec.fieldContext_FHIRIdentifier_Assigner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRIdentifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Active(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRCodeableConcept_ID(ctx, field)
			case "Coding":
				return ec.fieldContext_FHIRCodeableConcept_Coding(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRCodeableConcept_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRCodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Name(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Alias(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Alias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Alias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Telecom(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Telecom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telecom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRContactPoint)
	fc.Result = res
	return ec.marshalOFHIRContactPoint2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Telecom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRContactPoint_ID(ctx, field)
			case "System":
				return ec.fieldContext_FHIRContactPoint_System(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRContactPoint_Value(ctx, field)
			case "Use":
				return ec.fieldContext_FHIRContactPoint_Use(ctx, field)
			case "Rank":
				return ec.fieldContext_FHIRContactPoint_Rank(ctx, field)
			case "Period":
				return ec.fieldContext_FHIRContactPoint_Period(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRContactPoint", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganization_Address(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganization_Address(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAddress)
	fc.Result = res
	return ec.marshalOFHIRAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganization_Address(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRAddress_ID(ctx, field)
			case "Use":
				return ec.fieldContext_FHIRAddress_Use(ctx, field)
			case "Type":
				return ec.fieldContext_FHIRAddress_Type(ctx, field)
			case "Text":
				return ec.fieldContext_FHIRAddress_Text(ctx, field)
			case "Line":
				return ec.fieldContext_FHIRAddress_Line(ctx, field)
			case "City":
				return ec.fieldContext_FHIRAddress_City(ctx, field)
			case "District":
				return ec.fieldContext_FHIRAddress_District(ctx, field)
			case "State":
				return ec.fieldContext_FHIRAddress_State(ctx, field)
			case "PostalCode":
				return ec.fieldContext_FHIRAddress_PostalCode(ctx, field)
			case "Country":
				return ec.fieldContext_FHIRAddress_Country(ctx, field)
			case "Period":
				return ec.fieldContext_FHIRAddress_Period(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRAddress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganizationRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganizationRelayConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIROrganizationRelayEdge)
	fc.Result = res
	return ec.marshalOFHIROrganizationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganizationRelayConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganizationRelayConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "cursor":
				return ec.fieldContext_FHIROrganizationRelayEdge_cursor(ctx, field)
			case "node":
				return ec.fieldContext_FHIROrganizationRelayEdge_node(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIROrganizationRelayEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganizationRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganizationRelayConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganizationRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganizationRelayConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganizationRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganizationRelayEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganizationRelayEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganizationRelayEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganizationRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganizationRelayEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIROrganization)
	fc.Result = res
	return ec.marshalOFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganizationRelayEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganizationRelayEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIROrganization_ID(ctx, field)
			case "Identifier":
				return ec.fieldContext_FHIROrganization_Identifier(ctx, field)
			case "Active":
				return ec.fieldContext_FHIROrganization_Active(ctx, field)
			case "Type":
				return ec.fieldContext_FHIROrganization_Type(ctx, field)
			case "Name":
				return ec.fieldContext_FHIROrganization_Name(ctx, field)
			case "Alias":
				return ec.fieldContext_FHIROrganization_Alias(ctx, field)
			case "Telecom":
				return ec.fieldContext_FHIROrganization_Telecom(ctx, field)
			case "Address":
				return ec.fieldContext_FHIROrganization_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIROrganization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIROrganizationRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayPayload) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIROrganizationRelayPayload_resource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIROrganization)
	fc.Result = res
	return ec.marshalNFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIROrganizationRelayPayload_resource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIROrganizationRelayPayload",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIROrganization_ID(ctx, field)
			case "Identifier":
				return ec.fieldContext_FHIROrganization_Identifier(ctx, field)
			case "Active":
				return ec.fieldContext_FHIROrganization_Active(ctx, field)
			case "Type":
				return ec.fieldContext_FHIROrganization_Type(ctx, field)
			case "Name":
				return ec.fieldContext_FHIROrganization_Name(ctx, field)
			case "Alias":
				return ec.fieldContext_FHIROrganization_Alias(ctx, field)
			case "Telecom":
				return ec.fieldContext_FHIROrganization_Telecom(ctx, field)
			case "Address":
				return ec.fieldContext_FHIROrganization_Address(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIROrganization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRPeriod_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRPeriod_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRPeriod_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRPeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRPeriod_Start(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRPeriod_Start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.DateTime)
	fc.Result = res
	return ec.marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRPeriod_Start(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRPeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRPeriod_End(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPeriod) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRPeriod_End(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.DateTime)
	fc.Result = res
	return ec.marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRPeriod_End(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRPeriod",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRQuantity_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRQuantity_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRQuantity_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRQuantity_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRQuantity_Value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRQuantity_Value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRQuantity_Comparator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.QuantityComparatorEnum)
	fc.Result = res
	return ec.marshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRQuantity_Comparator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuantityComparatorEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRQuantity_Unit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRQuantity_Unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRQuantity_Unit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRQuantity_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRQuantity_System(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.URI)
	fc.Result = res
	return ec.marshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRQuantity_System(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRQuantity_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRQuantity_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRQuantity_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRRange_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRRange_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRRange_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRRange_Low(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRRange_Low(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Low, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRRange_Low(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRRange_High(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRange) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRRange_High(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.High, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRRange_High(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRRange",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRRatio_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRRatio_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRRatio_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRRatio_Numerator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRRatio_Numerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Numerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRRatio_Numerator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRRatio_Denominator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRatio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRRatio_Denominator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Denominator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRRatio_Denominator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRRatio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRReference_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRReference_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRReference_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRReference_Reference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRReference_Reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRReference_Reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRReference_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRReference_Type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRReference_Type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRReference_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRReference_Identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRReference_Identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRIdentifier_ID(ctx, field)
			case "Use":
				return ec.fieldContext_FHIRIdentifier_Use(ctx, field)
			case "Type":
				return ec.fieldContext_FHIRIdentifier_Type(ctx, field)
			case "System":
				return ec.fieldContext_FHIRIdentifier_System(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRIdentifier_Value(ctx, field)
			case "Period":
				return ec.fieldContext_FHIRIdentifier_Period(ctx, field)
			case "Assigner":
				return ec.fieldContext_FHIRIdentifier_Assigner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRIdentifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRReference_Display(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRReference_Display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRReference_Display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_Origin(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_Origin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_Origin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRQuantity_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRQuantity_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRQuantity_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRQuantity_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRQuantity_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRQuantity_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRQuantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_Period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_Period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_Factor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_Factor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Factor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_Factor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_LowerLimit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_LowerLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LowerLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_LowerLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_UpperLimit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_UpperLimit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpperLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_UpperLimit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_Dimensions(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_Dimensions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dimensions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_Dimensions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositiveInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRSampledData_Data(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRSampledData_Data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRSampledData_Data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTiming_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTiming_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTiming_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTiming_Event(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTiming_Event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTiming_Event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTiming_Repeat(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTiming_Repeat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repeat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRTimingRepeat)
	fc.Result = res
	return ec.marshalOFHIRTimingRepeat2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTiming_Repeat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRTimingRepeat_ID(ctx, field)
			case "BoundsDuration":
				return ec.fieldContext_FHIRTimingRepeat_BoundsDuration(ctx, field)
			case "BoundsRange":
				return ec.fieldContext_FHIRTimingRepeat_BoundsRange(ctx, field)
			case "BoundsPeriod":
				return ec.fieldContext_FHIRTimingRepeat_BoundsPeriod(ctx, field)
			case "Count":
				return ec.fieldContext_FHIRTimingRepeat_Count(ctx, field)
			case "CountMax":
				return ec.fieldContext_FHIRTimingRepeat_CountMax(ctx, field)
			case "Duration":
				return ec.fieldContext_FHIRTimingRepeat_Duration(ctx, field)
			case "DurationMax":
				return ec.fieldContext_FHIRTimingRepeat_DurationMax(ctx, field)
			case "DurationUnit":
				return ec.fieldContext_FHIRTimingRepeat_DurationUnit(ctx, field)
			case "Frequency":
				return ec.fieldContext_FHIRTimingRepeat_Frequency(ctx, field)
			case "FrequencyMax":
				return ec.fieldContext_FHIRTimingRepeat_FrequencyMax(ctx, field)
			case "Period":
				return ec.fieldContext_FHIRTimingRepeat_Period(ctx, field)
			case "PeriodMax":
				return ec.fieldContext_FHIRTimingRepeat_PeriodMax(ctx, field)
			case "PeriodUnit":
				return ec.fieldContext_FHIRTimingRepeat_PeriodUnit(ctx, field)
			case "DayOfWeek":
				return ec.fieldContext_FHIRTimingRepeat_DayOfWeek(ctx, field)
			case "TimeOfDay":
				return ec.fieldContext_FHIRTimingRepeat_TimeOfDay(ctx, field)
			case "When":
				return ec.fieldContext_FHIRTimingRepeat_When(ctx, field)
			case "Offset":
				return ec.fieldContext_FHIRTimingRepeat_Offset(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRTimingRepeat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTiming_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTiming_Code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTiming_Code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_BoundsDuration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_BoundsDuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoundsDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRDuration)
	fc.Result = res
	return ec.marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_BoundsDuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRDuration_ID(ctx, field)
			case "Value":
				return ec.fieldContext_FHIRDuration_Value(ctx, field)
			case "Comparator":
				return ec.fieldContext_FHIRDuration_Comparator(ctx, field)
			case "Unit":
				return ec.fieldContext_FHIRDuration_Unit(ctx, field)
			case "System":
				return ec.fieldContext_FHIRDuration_System(ctx, field)
			case "Code":
				return ec.fieldContext_FHIRDuration_Code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRDuration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_BoundsRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_BoundsRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoundsRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_BoundsRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRRange_ID(ctx, field)
			case "Low":
				return ec.fieldContext_FHIRRange_Low(ctx, field)
			case "High":
				return ec.fieldContext_FHIRRange_High(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRRange", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_BoundsPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_BoundsPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoundsPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_BoundsPeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_FHIRPeriod_ID(ctx, field)
			case "Start":
				return ec.fieldContext_FHIRPeriod_Start(ctx, field)
			case "End":
				return ec.fieldContext_FHIRPeriod_End(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIRPeriod", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_Count(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_Count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_Count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositiveInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_CountMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_CountMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_CountMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositiveInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_Duration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_Duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_Duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_DurationMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_DurationMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_DurationMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_DurationUnit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_DurationUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.TimingRepeatDurationUnitEnum)
	fc.Result = res
	return ec.marshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_DurationUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimingRepeatDurationUnitEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_Frequency(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_Frequency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_Frequency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositiveInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_FrequencyMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_FrequencyMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrequencyMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_FrequencyMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PositiveInt does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_Period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_Period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_PeriodMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_PeriodMax(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_PeriodMax(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Decimal does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_PeriodUnit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_PeriodUnit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.TimingRepeatPeriodUnitEnum)
	fc.Result = res
	return ec.marshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_PeriodUnit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimingRepeatPeriodUnitEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_DayOfWeek(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_DayOfWeek(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayOfWeek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_DayOfWeek(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_TimeOfDay(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_TimeOfDay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeOfDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_TimeOfDay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_When(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_When(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.When, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.TimingRepeatWhenEnum)
	fc.Result = res
	return ec.marshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_When(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TimingRepeatWhenEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FHIRTimingRepeat_Offset(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FHIRTimingRepeat_Offset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FHIRTimingRepeat_Offset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthTimeline_timeline(ctx context.Context, field graphql.CollectedField, obj *dto.HealthTimeline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HealthTimeline_timeline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.TimelineResource)
	fc.Result = res
	return ec.marshalOTimelineResource2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HealthTimeline_timeline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthTimeline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimelineResource_id(ctx, field)
			case "resourceType":
				return ec.fieldContext_TimelineResource_resourceType(ctx, field)
			case "name":
				return ec.fieldContext_TimelineResource_name(ctx, field)
			case "value":
				return ec.fieldContext_TimelineResource_value(ctx, field)
			case "status":
				return ec.fieldContext_TimelineResource_status(ctx, field)
			case "date":
				return ec.fieldContext_TimelineResource_date(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimelineResource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthTimeline_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.HealthTimeline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HealthTimeline_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HealthTimeline_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthTimeline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_regimen(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_regimen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regimen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.MedicationStatement)
	fc.Result = res
	return ec.marshalOMedicationStatement2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_regimen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MedicationStatement_id(ctx, field)
			case "status":
				return ec.fieldContext_MedicationStatement_status(ctx, field)
			case "medication":
				return ec.fieldContext_MedicationStatement_medication(ctx, field)
			case "patientID":
				return ec.fieldContext_MedicationStatement_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MedicationStatement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_allergies(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_allergies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allergies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.AllergyIntolerance)
	fc.Result = res
	return ec.marshalOAllergyIntolerance2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntolerance(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_allergies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AllergyIntolerance_id(ctx, field)
			case "patientID":
				return ec.fieldContext_AllergyIntolerance_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_AllergyIntolerance_encounterID(ctx, field)
			case "onsetDateTime":
				return ec.fieldContext_AllergyIntolerance_onsetDateTime(ctx, field)
			case "severity":
				return ec.fieldContext_AllergyIntolerance_severity(ctx, field)
			case "substanceCode":
				return ec.fieldContext_AllergyIntolerance_substanceCode(ctx, field)
			case "substanceSystem":
				return ec.fieldContext_AllergyIntolerance_substanceSystem(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AllergyIntolerance", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_weight(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_bmi(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_bmi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BMI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_bmi(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_viralLoad(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_viralLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViralLoad, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_viralLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_cd4Count(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_cd4Count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CD4Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_cd4Count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Medication_name(ctx context.Context, field graphql.CollectedField, obj *dto.Medication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Medication_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Medication_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Medication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Medication_code(ctx context.Context, field graphql.CollectedField, obj *dto.Medication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Medication_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Medication_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Medication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_id(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_status(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.MedicationStatementStatusEnum)
	fc.Result = res
	return ec.marshalOMedicationStatementStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatementStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MedicationStatementStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_medication(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_medication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.Medication)
	fc.Result = res
	return ec.marshalNMedication2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_medication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Medication_name(ctx, field)
			case "code":
				return ec.fieldContext_Medication_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Medication", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createFHIROrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createFHIROrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIROrganization(rctx, fc.Args["input"].(domain.FHIROrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIROrganizationRelayPayload)
	fc.Result = res
	return ec.marshalNFHIROrganizationRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createFHIROrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "resource":
				return ec.fieldContext_FHIROrganizationRelayPayload_resource(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FHIROrganizationRelayPayload", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createFHIROrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEpisodeOfCare(rctx, fc.Args["episodeOfCare"].(dto.EpisodeOfCareInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_endEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_endEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EndEpisodeOfCare(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_endEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_endEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_startEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_startEncounter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartEncounter(rctx, fc.Args["episodeID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_startEncounter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_startEncounter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_endEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_endEncounter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EndEncounter(rctx, fc.Args["encounterID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_endEncounter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_endEncounter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordTemperature(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordTemperature(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordTemperature_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordHeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordHeight(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordHeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordHeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordWeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordWeight(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordWeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordRespiratoryRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordRespiratoryRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordRespiratoryRate(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordRespiratoryRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordRespiratoryRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordPulseRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordPulseRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordPulseRate(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordPulseRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordPulseRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordBloodPressure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordBloodPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordBloodPressure(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordBloodPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordBloodPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordBMI(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordBMI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordBmi(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordBMI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordBMI_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPatient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePatient(rctx, fc.Args["input"].(dto.PatientInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Patient)
	fc.Result = res
	return ec.marshalNPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPatient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Patient_id(ctx, field)
			case "active":
				return ec.fieldContext_Patient_active(ctx, field)
			case "name":
				return ec.fieldContext_Patient_name(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Patient_phoneNumber(ctx, field)
			case "gender":
				return ec.fieldContext_Patient_gender(ctx, field)
			case "birthDate":
				return ec.fieldContext_Patient_birthDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Patient", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPatient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Observation_id(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_status(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.ObservationStatus)
	fc.Result = res
	return ec.marshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObservationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_name(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_value(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_id(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_active(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_name(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_gender(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.Gender)
	fc.Result = res
	return ec.marshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_birthDate(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_birthDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_birthDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_patientHealthTimeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_patientHealthTimeline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientHealthTimeline(rctx, fc.Args["input"].(dto.HealthTimelineInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.HealthTimeline)
	fc.Result = res
	return ec.marshalNHealthTimeline2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimeline(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_patientHealthTimeline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timeline":
				return ec.fieldContext_HealthTimeline_timeline(ctx, field)
			case "totalCount":
				return ec.fieldContext_HealthTimeline_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HealthTimeline", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_patientHealthTimeline_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMedicalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMedicalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMedicalData(rctx, fc.Args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.MedicalData)
	fc.Result = res
	return ec.marshalOMedicalData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicalData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMedicalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "regimen":
				return ec.fieldContext_MedicalData_regimen(ctx, field)
			case "allergies":
				return ec.fieldContext_MedicalData_allergies(ctx, field)
			case "weight":
				return ec.fieldContext_MedicalData_weight(ctx, field)
			case "bmi":
				return ec.fieldContext_MedicalData_bmi(ctx, field)
			case "viralLoad":
				return ec.fieldContext_MedicalData_viralLoad(ctx, field)
			case "cd4Count":
				return ec.fieldContext_MedicalData_cd4Count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MedicalData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMedicalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEpisodeOfCare(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPatientEncounters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPatientEncounters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPatientEncounters(rctx, fc.Args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto.Encounter)
	fc.Result = res
	return ec.marshalNEncounter2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPatientEncounters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Encounter_id(ctx, field)
			case "class":
				return ec.fieldContext_Encounter_class(ctx, field)
			case "episodeOfCareID":
				return ec.fieldContext_Encounter_episodeOfCareID(ctx, field)
			case "status":
				return ec.fieldContext_Encounter_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Encounter_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Encounter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPatientEncounters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientTemperatureEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientTemperatureEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientTemperatureEntries(rctx, fc.Args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientTemperatureEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientTemperatureEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientBloodPressureEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientBloodPressureEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientBloodPressureEntries(rctx, fc.Args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientBloodPressureEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientBloodPressureEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_id(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_resourceType(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_resourceType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ResourceType)
	fc.Result = res
	return ec.marshalOResourceType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐResourceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_resourceType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResourceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_name(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_value(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_status(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_date(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputContactInput(ctx context.Context, obj interface{}) (dto.ContactInput, error) {
	var it dto.ContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNContactType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactType(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEpisodeOfCareInput(ctx context.Context, obj interface{}) (dto.EpisodeOfCareInput, error) {
	var it dto.EpisodeOfCareInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "patientID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAddressInput(ctx context.Context, obj interface{}) (domain.FHIRAddressInput, error) {
	var it domain.FHIRAddressInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Use", "Type", "Text", "Line", "City", "District", "State", "PostalCode", "Country", "Period"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Line":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Line"))
			it.Line, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "District":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("District"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "PostalCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PostalCode"))
			it.PostalCode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAgeInput(ctx context.Context, obj interface{}) (domain.FHIRAgeInput, error) {
	var it domain.FHIRAgeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Value", "Comparator", "Unit", "System", "Code"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Comparator"))
			it.Comparator, err = ec.unmarshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAnnotationInput(ctx context.Context, obj interface{}) (domain.FHIRAnnotationInput, error) {
	var it domain.FHIRAnnotationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "AuthorReference", "AuthorString", "Time", "Text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthorReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthorReference"))
			it.AuthorReference, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthorString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthorString"))
			it.AuthorString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Time"))
			it.Time, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAttachmentInput(ctx context.Context, obj interface{}) (domain.FHIRAttachmentInput, error) {
	var it domain.FHIRAttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "ContentType", "Language", "Data", "URL", "Size", "Hash", "Title", "Creation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ContentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ContentType"))
			it.ContentType, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Language"))
			it.Language, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Data"))
			it.Data, err = ec.unmarshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, v)
			if err != nil {
				return it, err
			}
		case "URL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URL"))
			it.URL, err = ec.unmarshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx, v)
			if err != nil {
				return it, err
			}
		case "Size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Size"))
			it.Size, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Hash"))
			it.Hash, err = ec.unmarshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Creation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Creation"))
			it.Creation, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCodeableConceptInput(ctx context.Context, obj interface{}) (domain.FHIRCodeableConceptInput, error) {
	var it domain.FHIRCodeableConceptInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Coding", "Text"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Coding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Coding"))
			it.Coding, err = ec.unmarshalNFHIRCodingInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCodingInput(ctx context.Context, obj interface{}) (domain.FHIRCodingInput, error) {
	var it domain.FHIRCodingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "System", "Version", "Code", "Display", "UserSelected"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Display":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Display"))
			it.Display, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "UserSelected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UserSelected"))
			it.UserSelected, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRContactPointInput(ctx context.Context, obj interface{}) (domain.FHIRContactPointInput, error) {
	var it domain.FHIRContactPointInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "System", "Value", "Use", "Rank", "Period"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Rank"))
			it.Rank, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRDosageDoseandrateInput(ctx context.Context, obj interface{}) (domain.FHIRDosageDoseandrateInput, error) {
	var it domain.FHIRDosageDoseandrateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Type", "DoseRange", "DoseQuantity", "RateRatio", "RateRange", "RateQuantity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoseRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoseRange"))
			it.DoseRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoseQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoseQuantity"))
			it.DoseQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RateRatio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RateRatio"))
			it.RateRatio, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RateRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RateRange"))
			it.RateRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RateQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RateQuantity"))
			it.RateQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRDosageInput(ctx context.Context, obj interface{}) (domain.FHIRDosageInput, error) {
	var it domain.FHIRDosageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Sequence", "Text", "AdditionalInstruction", "PatientInstruction", "Timing", "AsNeededBoolean", "AsNeededCodeableConcept", "Site", "Route", "Method", "DoseAndRate", "MaxDosePerPeriod", "MaxDosePerAdministration", "MaxDosePerLifetime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Sequence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Sequence"))
			it.Sequence, err = ec.unmarshalOInteger2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AdditionalInstruction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AdditionalInstruction"))
			it.AdditionalInstruction, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PatientInstruction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PatientInstruction"))
			it.PatientInstruction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Timing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Timing"))
			it.Timing, err = ec.unmarshalOFHIRTimingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AsNeededBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AsNeededBoolean"))
			it.AsNeededBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "AsNeededCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AsNeededCodeableConcept"))
			it.AsNeededCodeableConcept, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Site":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Site"))
			it.Site, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Route"))
			it.Route, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Method"))
			it.Method, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoseAndRate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoseAndRate"))
			it.DoseAndRate, err = ec.unmarshalOFHIRDosageDoseandrateInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaxDosePerPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaxDosePerPeriod"))
			it.MaxDosePerPeriod, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaxDosePerAdministration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaxDosePerAdministration"))
			it.MaxDosePerAdministration, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaxDosePerLifetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaxDosePerLifetime"))
			it.MaxDosePerLifetime, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRDurationInput(ctx context.Context, obj interface{}) (domain.FHIRDurationInput, error) {
	var it domain.FHIRDurationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Value", "Comparator", "Unit", "System", "Code"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Comparator"))
			it.Comparator, err = ec.unmarshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRHumanNameInput(ctx context.Context, obj interface{}) (domain.FHIRHumanNameInput, error) {
	var it domain.FHIRHumanNameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Use", "Text", "Family", "Given", "Prefix", "Suffix", "Period"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Family":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Family"))
			it.Family, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Given":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Given"))
			it.Given, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Prefix"))
			it.Prefix, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suffix"))
			it.Suffix, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRIdentifierInput(ctx context.Context, obj interface{}) (domain.FHIRIdentifierInput, error) {
	var it domain.FHIRIdentifierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Use", "Type", "System", "Value", "Period", "Assigner"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Assigner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Assigner"))
			it.Assigner, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRNarrativeInput(ctx context.Context, obj interface{}) (domain.FHIRNarrativeInput, error) {
	var it domain.FHIRNarrativeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Status", "Div"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Div":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Div"))
			it.Div, err = ec.unmarshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIROrganizationInput(ctx context.Context, obj interface{}) (domain.FHIROrganizationInput, error) {
	var it domain.FHIROrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Identifier", "Active", "Type", "Name", "Alias", "Telecom", "Address"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Active"))
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Alias":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Alias"))
			it.Alias, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Telecom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Telecom"))
			it.Telecom, err = ec.unmarshalOFHIRContactPointInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalOFHIRAddressInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRPeriodInput(ctx context.Context, obj interface{}) (domain.FHIRPeriodInput, error) {
	var it domain.FHIRPeriodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Start", "End"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Start":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Start"))
			it.Start, err = ec.unmarshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "End":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("End"))
			it.End, err = ec.unmarshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRQuantityInput(ctx context.Context, obj interface{}) (domain.FHIRQuantityInput, error) {
	var it domain.FHIRQuantityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Value", "Comparator", "Unit", "System", "Code"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "Comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Comparator"))
			it.Comparator, err = ec.unmarshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRRangeInput(ctx context.Context, obj interface{}) (domain.FHIRRangeInput, error) {
	var it domain.FHIRRangeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Low", "High"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Low":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Low"))
			it.Low, err = ec.unmarshalOFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "High":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("High"))
			it.High, err = ec.unmarshalOFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRRatioInput(ctx context.Context, obj interface{}) (domain.FHIRRatioInput, error) {
	var it domain.FHIRRatioInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Numerator", "Denominator"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Numerator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Numerator"))
			it.Numerator, err = ec.unmarshalNFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Denominator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Denominator"))
			it.Denominator, err = ec.unmarshalNFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRReferenceInput(ctx context.Context, obj interface{}) (domain.FHIRReferenceInput, error) {
	var it domain.FHIRReferenceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Reference", "Type", "Identifier", "Display"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Display":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Display"))
			it.Display, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRSampledDataInput(ctx context.Context, obj interface{}) (domain.FHIRSampledDataInput, error) {
	var it domain.FHIRSampledDataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Origin", "Period", "Factor", "LowerLimit", "UpperLimit", "Dimensions", "Data"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Origin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Origin"))
			it.Origin, err = ec.unmarshalNFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Factor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Factor"))
			it.Factor, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "LowerLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LowerLimit"))
			it.LowerLimit, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "UpperLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UpperLimit"))
			it.UpperLimit, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Dimensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Dimensions"))
			it.Dimensions, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Data"))
			it.Data, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRTimingInput(ctx context.Context, obj interface{}) (domain.FHIRTimingInput, error) {
	var it domain.FHIRTimingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "Event", "Repeat", "Code"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Event"))
			it.Event, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Repeat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Repeat"))
			it.Repeat, err = ec.unmarshalOFHIRTimingRepeatInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeatInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRTimingRepeatInput(ctx context.Context, obj interface{}) (domain.FHIRTimingRepeatInput, error) {
	var it domain.FHIRTimingRepeatInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ID", "BoundsDuration", "BoundsRange", "BoundsPeriod", "Count", "CountMax", "Duration", "DurationMax", "DurationUnit", "Frequency", "FrequencyMax", "Period", "PeriodMax", "PeriodUnit", "DayOfWeek", "TimeOfDay", "When", "Offset"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BoundsDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BoundsDuration"))
			it.BoundsDuration, err = ec.unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BoundsRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BoundsRange"))
			it.BoundsRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BoundsPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BoundsPeriod"))
			it.BoundsPeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Count"))
			it.Count, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "CountMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CountMax"))
			it.CountMax, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Duration"))
			it.Duration, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "DurationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DurationMax"))
			it.DurationMax, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "DurationUnit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DurationUnit"))
			it.DurationUnit, err = ec.unmarshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Frequency"))
			it.Frequency, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FrequencyMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FrequencyMax"))
			it.FrequencyMax, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "PeriodMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PeriodMax"))
			it.PeriodMax, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "PeriodUnit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PeriodUnit"))
			it.PeriodUnit, err = ec.unmarshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "DayOfWeek":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DayOfWeek"))
			it.DayOfWeek, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "TimeOfDay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TimeOfDay"))
			it.TimeOfDay, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "When":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("When"))
			it.When, err = ec.unmarshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHealthTimelineInput(ctx context.Context, obj interface{}) (dto.HealthTimelineInput, error) {
	var it dto.HealthTimelineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"patientID", "offset", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifierInput(ctx context.Context, obj interface{}) (dto.IdentifierInput, error) {
	var it dto.IdentifierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNIdentifierType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierType(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputObservationInput(ctx context.Context, obj interface{}) (dto.ObservationInput, error) {
	var it dto.ObservationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "encounterID", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			it.EncounterID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatientInput(ctx context.Context, obj interface{}) (dto.PatientInput, error) {
	var it dto.PatientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "otherNames", "birthDate", "gender", "identifiers", "contacts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherNames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherNames"))
			it.OtherNames, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			it.BirthDate, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
		case "identifiers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
			it.Identifiers, err = ec.unmarshalNIdentifierInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			it.Contacts, err = ec.unmarshalNContactInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var allergyIntoleranceImplementors = []string{"AllergyIntolerance"}

func (ec *executionContext) _AllergyIntolerance(ctx context.Context, sel ast.SelectionSet, obj *dto.AllergyIntolerance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allergyIntoleranceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllergyIntolerance")
		case "id":

			out.Values[i] = ec._AllergyIntolerance_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patientID":

			out.Values[i] = ec._AllergyIntolerance_patientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "encounterID":

			out.Values[i] = ec._AllergyIntolerance_encounterID(ctx, field, obj)

		case "onsetDateTime":

			out.Values[i] = ec._AllergyIntolerance_onsetDateTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "severity":

			out.Values[i] = ec._AllergyIntolerance_severity(ctx, field, obj)

		case "substanceCode":

			out.Values[i] = ec._AllergyIntolerance_substanceCode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "substanceSystem":

			out.Values[i] = ec._AllergyIntolerance_substanceSystem(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var encounterImplementors = []string{"Encounter"}

func (ec *executionContext) _Encounter(ctx context.Context, sel ast.SelectionSet, obj *dto.Encounter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, encounterImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Encounter")
		case "id":

			out.Values[i] = ec._Encounter_id(ctx, field, obj)

		case "class":

			out.Values[i] = ec._Encounter_class(ctx, field, obj)

		case "episodeOfCareID":

			out.Values[i] = ec._Encounter_episodeOfCareID(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Encounter_status(ctx, field, obj)

		case "patientID":

			out.Values[i] = ec._Encounter_patientID(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var episodeOfCareImplementors = []string{"EpisodeOfCare"}

func (ec *executionContext) _EpisodeOfCare(ctx context.Context, sel ast.SelectionSet, obj *dto.EpisodeOfCare) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, episodeOfCareImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EpisodeOfCare")
		case "id":

			out.Values[i] = ec._EpisodeOfCare_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._EpisodeOfCare_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patientID":

			out.Values[i] = ec._EpisodeOfCare_patientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAddressImplementors = []string{"FHIRAddress"}

func (ec *executionContext) _FHIRAddress(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAddressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAddress")
		case "ID":

			out.Values[i] = ec._FHIRAddress_ID(ctx, field, obj)

		case "Use":

			out.Values[i] = ec._FHIRAddress_Use(ctx, field, obj)

		case "Type":

			out.Values[i] = ec._FHIRAddress_Type(ctx, field, obj)

		case "Text":

			out.Values[i] = ec._FHIRAddress_Text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Line":

			out.Values[i] = ec._FHIRAddress_Line(ctx, field, obj)

		case "City":

			out.Values[i] = ec._FHIRAddress_City(ctx, field, obj)

		case "District":

			out.Values[i] = ec._FHIRAddress_District(ctx, field, obj)

		case "State":

			out.Values[i] = ec._FHIRAddress_State(ctx, field, obj)

		case "PostalCode":

			out.Values[i] = ec._FHIRAddress_PostalCode(ctx, field, obj)

		case "Country":

			out.Values[i] = ec._FHIRAddress_Country(ctx, field, obj)

		case "Period":

			out.Values[i] = ec._FHIRAddress_Period(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAgeImplementors = []string{"FHIRAge"}

func (ec *executionContext) _FHIRAge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAge")
		case "ID":

			out.Values[i] = ec._FHIRAge_ID(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._FHIRAge_Value(ctx, field, obj)

		case "Comparator":

			out.Values[i] = ec._FHIRAge_Comparator(ctx, field, obj)

		case "Unit":

			out.Values[i] = ec._FHIRAge_Unit(ctx, field, obj)

		case "System":

			out.Values[i] = ec._FHIRAge_System(ctx, field, obj)

		case "Code":

			out.Values[i] = ec._FHIRAge_Code(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAnnotationImplementors = []string{"FHIRAnnotation"}

func (ec *executionContext) _FHIRAnnotation(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAnnotation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAnnotationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAnnotation")
		case "ID":

			out.Values[i] = ec._FHIRAnnotation_ID(ctx, field, obj)

		case "AuthorReference":

			out.Values[i] = ec._FHIRAnnotation_AuthorReference(ctx, field, obj)

		case "AuthorString":

			out.Values[i] = ec._FHIRAnnotation_AuthorString(ctx, field, obj)

		case "Time":

			out.Values[i] = ec._FHIRAnnotation_Time(ctx, field, obj)

		case "Text":

			out.Values[i] = ec._FHIRAnnotation_Text(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAttachmentImplementors = []string{"FHIRAttachment"}

func (ec *executionContext) _FHIRAttachment(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAttachmentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAttachment")
		case "ID":

			out.Values[i] = ec._FHIRAttachment_ID(ctx, field, obj)

		case "ContentType":

			out.Values[i] = ec._FHIRAttachment_ContentType(ctx, field, obj)

		case "Language":

			out.Values[i] = ec._FHIRAttachment_Language(ctx, field, obj)

		case "Data":

			out.Values[i] = ec._FHIRAttachment_Data(ctx, field, obj)

		case "URL":

			out.Values[i] = ec._FHIRAttachment_URL(ctx, field, obj)

		case "Size":

			out.Values[i] = ec._FHIRAttachment_Size(ctx, field, obj)

		case "Hash":

			out.Values[i] = ec._FHIRAttachment_Hash(ctx, field, obj)

		case "Title":

			out.Values[i] = ec._FHIRAttachment_Title(ctx, field, obj)

		case "Creation":

			out.Values[i] = ec._FHIRAttachment_Creation(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCodeableConceptImplementors = []string{"FHIRCodeableConcept"}

func (ec *executionContext) _FHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCodeableConcept) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCodeableConceptImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCodeableConcept")
		case "ID":

			out.Values[i] = ec._FHIRCodeableConcept_ID(ctx, field, obj)

		case "Coding":

			out.Values[i] = ec._FHIRCodeableConcept_Coding(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Text":

			out.Values[i] = ec._FHIRCodeableConcept_Text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCodingImplementors = []string{"FHIRCoding"}

func (ec *executionContext) _FHIRCoding(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCoding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCodingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCoding")
		case "ID":

			out.Values[i] = ec._FHIRCoding_ID(ctx, field, obj)

		case "System":

			out.Values[i] = ec._FHIRCoding_System(ctx, field, obj)

		case "Version":

			out.Values[i] = ec._FHIRCoding_Version(ctx, field, obj)

		case "Code":

			out.Values[i] = ec._FHIRCoding_Code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Display":

			out.Values[i] = ec._FHIRCoding_Display(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UserSelected":

			out.Values[i] = ec._FHIRCoding_UserSelected(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRContactPointImplementors = []string{"FHIRContactPoint"}

func (ec *executionContext) _FHIRContactPoint(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRContactPoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRContactPointImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRContactPoint")
		case "ID":

			out.Values[i] = ec._FHIRContactPoint_ID(ctx, field, obj)

		case "System":

			out.Values[i] = ec._FHIRContactPoint_System(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._FHIRContactPoint_Value(ctx, field, obj)

		case "Use":

			out.Values[i] = ec._FHIRContactPoint_Use(ctx, field, obj)

		case "Rank":

			out.Values[i] = ec._FHIRContactPoint_Rank(ctx, field, obj)

		case "Period":

			out.Values[i] = ec._FHIRContactPoint_Period(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRDosageImplementors = []string{"FHIRDosage"}

func (ec *executionContext) _FHIRDosage(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRDosage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRDosageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRDosage")
		case "ID":

			out.Values[i] = ec._FHIRDosage_ID(ctx, field, obj)

		case "Sequence":

			out.Values[i] = ec._FHIRDosage_Sequence(ctx, field, obj)

		case "Text":

			out.Values[i] = ec._FHIRDosage_Text(ctx, field, obj)

		case "AdditionalInstruction":

			out.Values[i] = ec._FHIRDosage_AdditionalInstruction(ctx, field, obj)

		case "PatientInstruction":

			out.Values[i] = ec._FHIRDosage_PatientInstruction(ctx, field, obj)

		case "Timing":

			out.Values[i] = ec._FHIRDosage_Timing(ctx, field, obj)

		case "AsNeededBoolean":

			out.Values[i] = ec._FHIRDosage_AsNeededBoolean(ctx, field, obj)

		case "AsNeededCodeableConcept":

			out.Values[i] = ec._FHIRDosage_AsNeededCodeableConcept(ctx, field, obj)

		case "Site":

			out.Values[i] = ec._FHIRDosage_Site(ctx, field, obj)

		case "Route":

			out.Values[i] = ec._FHIRDosage_Route(ctx, field, obj)

		case "Method":

			out.Values[i] = ec._FHIRDosage_Method(ctx, field, obj)

		case "DoseAndRate":

			out.Values[i] = ec._FHIRDosage_DoseAndRate(ctx, field, obj)

		case "MaxDosePerPeriod":

			out.Values[i] = ec._FHIRDosage_MaxDosePerPeriod(ctx, field, obj)

		case "MaxDosePerAdministration":

			out.Values[i] = ec._FHIRDosage_MaxDosePerAdministration(ctx, field, obj)

		case "MaxDosePerLifetime":

			out.Values[i] = ec._FHIRDosage_MaxDosePerLifetime(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRDosageDoseandrateImplementors = []string{"FHIRDosageDoseandrate"}

func (ec *executionContext) _FHIRDosageDoseandrate(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRDosageDoseandrate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRDosageDoseandrateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRDosageDoseandrate")
		case "ID":

			out.Values[i] = ec._FHIRDosageDoseandrate_ID(ctx, field, obj)

		case "Type":

			out.Values[i] = ec._FHIRDosageDoseandrate_Type(ctx, field, obj)

		case "DoseRange":

			out.Values[i] = ec._FHIRDosageDoseandrate_DoseRange(ctx, field, obj)

		case "DoseQuantity":

			out.Values[i] = ec._FHIRDosageDoseandrate_DoseQuantity(ctx, field, obj)

		case "RateRatio":

			out.Values[i] = ec._FHIRDosageDoseandrate_RateRatio(ctx, field, obj)

		case "RateRange":

			out.Values[i] = ec._FHIRDosageDoseandrate_RateRange(ctx, field, obj)

		case "RateQuantity":

			out.Values[i] = ec._FHIRDosageDoseandrate_RateQuantity(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRDurationImplementors = []string{"FHIRDuration"}

func (ec *executionContext) _FHIRDuration(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRDuration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRDurationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRDuration")
		case "ID":

			out.Values[i] = ec._FHIRDuration_ID(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._FHIRDuration_Value(ctx, field, obj)

		case "Comparator":

			out.Values[i] = ec._FHIRDuration_Comparator(ctx, field, obj)

		case "Unit":

			out.Values[i] = ec._FHIRDuration_Unit(ctx, field, obj)

		case "System":

			out.Values[i] = ec._FHIRDuration_System(ctx, field, obj)

		case "Code":

			out.Values[i] = ec._FHIRDuration_Code(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRHumanNameImplementors = []string{"FHIRHumanName"}

func (ec *executionContext) _FHIRHumanName(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRHumanName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRHumanNameImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRHumanName")
		case "ID":

			out.Values[i] = ec._FHIRHumanName_ID(ctx, field, obj)

		case "Use":

			out.Values[i] = ec._FHIRHumanName_Use(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Text":

			out.Values[i] = ec._FHIRHumanName_Text(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Family":

			out.Values[i] = ec._FHIRHumanName_Family(ctx, field, obj)

		case "Given":

			out.Values[i] = ec._FHIRHumanName_Given(ctx, field, obj)

		case "Prefix":

			out.Values[i] = ec._FHIRHumanName_Prefix(ctx, field, obj)

		case "Suffix":

			out.Values[i] = ec._FHIRHumanName_Suffix(ctx, field, obj)

		case "Period":

			out.Values[i] = ec._FHIRHumanName_Period(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRIdentifierImplementors = []string{"FHIRIdentifier"}

func (ec *executionContext) _FHIRIdentifier(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRIdentifierImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRIdentifier")
		case "ID":

			out.Values[i] = ec._FHIRIdentifier_ID(ctx, field, obj)

		case "Use":

			out.Values[i] = ec._FHIRIdentifier_Use(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":

			out.Values[i] = ec._FHIRIdentifier_Type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "System":

			out.Values[i] = ec._FHIRIdentifier_System(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._FHIRIdentifier_Value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Period":

			out.Values[i] = ec._FHIRIdentifier_Period(ctx, field, obj)

		case "Assigner":

			out.Values[i] = ec._FHIRIdentifier_Assigner(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRNarrativeImplementors = []string{"FHIRNarrative"}

func (ec *executionContext) _FHIRNarrative(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRNarrative) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRNarrativeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRNarrative")
		case "ID":

			out.Values[i] = ec._FHIRNarrative_ID(ctx, field, obj)

		case "Status":

			out.Values[i] = ec._FHIRNarrative_Status(ctx, field, obj)

		case "Div":

			out.Values[i] = ec._FHIRNarrative_Div(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationImplementors = []string{"FHIROrganization"}

func (ec *executionContext) _FHIROrganization(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganization")
		case "ID":

			out.Values[i] = ec._FHIROrganization_ID(ctx, field, obj)

		case "Identifier":

			out.Values[i] = ec._FHIROrganization_Identifier(ctx, field, obj)

		case "Active":

			out.Values[i] = ec._FHIROrganization_Active(ctx, field, obj)

		case "Type":

			out.Values[i] = ec._FHIROrganization_Type(ctx, field, obj)

		case "Name":

			out.Values[i] = ec._FHIROrganization_Name(ctx, field, obj)

		case "Alias":

			out.Values[i] = ec._FHIROrganization_Alias(ctx, field, obj)

		case "Telecom":

			out.Values[i] = ec._FHIROrganization_Telecom(ctx, field, obj)

		case "Address":

			out.Values[i] = ec._FHIROrganization_Address(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationRelayConnectionImplementors = []string{"FHIROrganizationRelayConnection"}

func (ec *executionContext) _FHIROrganizationRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganizationRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationRelayConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganizationRelayConnection")
		case "edges":

			out.Values[i] = ec._FHIROrganizationRelayConnection_edges(ctx, field, obj)

		case "pageInfo":

			out.Values[i] = ec._FHIROrganizationRelayConnection_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationRelayEdgeImplementors = []string{"FHIROrganizationRelayEdge"}

func (ec *executionContext) _FHIROrganizationRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganizationRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationRelayEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganizationRelayEdge")
		case "cursor":

			out.Values[i] = ec._FHIROrganizationRelayEdge_cursor(ctx, field, obj)

		case "node":

			out.Values[i] = ec._FHIROrganizationRelayEdge_node(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationRelayPayloadImplementors = []string{"FHIROrganizationRelayPayload"}

func (ec *executionContext) _FHIROrganizationRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganizationRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationRelayPayloadImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganizationRelayPayload")
		case "resource":

			out.Values[i] = ec._FHIROrganizationRelayPayload_resource(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPeriodImplementors = []string{"FHIRPeriod"}

func (ec *executionContext) _FHIRPeriod(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPeriod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPeriodImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPeriod")
		case "ID":

			out.Values[i] = ec._FHIRPeriod_ID(ctx, field, obj)

		case "Start":

			out.Values[i] = ec._FHIRPeriod_Start(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "End":

			out.Values[i] = ec._FHIRPeriod_End(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRQuantityImplementors = []string{"FHIRQuantity"}

func (ec *executionContext) _FHIRQuantity(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRQuantity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRQuantityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRQuantity")
		case "ID":

			out.Values[i] = ec._FHIRQuantity_ID(ctx, field, obj)

		case "Value":

			out.Values[i] = ec._FHIRQuantity_Value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Comparator":

			out.Values[i] = ec._FHIRQuantity_Comparator(ctx, field, obj)

		case "Unit":

			out.Values[i] = ec._FHIRQuantity_Unit(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "System":

			out.Values[i] = ec._FHIRQuantity_System(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Code":

			out.Values[i] = ec._FHIRQuantity_Code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRRangeImplementors = []string{"FHIRRange"}

func (ec *executionContext) _FHIRRange(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRRangeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRRange")
		case "ID":

			out.Values[i] = ec._FHIRRange_ID(ctx, field, obj)

		case "Low":

			out.Values[i] = ec._FHIRRange_Low(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "High":

			out.Values[i] = ec._FHIRRange_High(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRRatioImplementors = []string{"FHIRRatio"}

func (ec *executionContext) _FHIRRatio(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRRatio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRRatioImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRRatio")
		case "ID":

			out.Values[i] = ec._FHIRRatio_ID(ctx, field, obj)

		case "Numerator":

			out.Values[i] = ec._FHIRRatio_Numerator(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Denominator":

			out.Values[i] = ec._FHIRRatio_Denominator(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRReferenceImplementors = []string{"FHIRReference"}

func (ec *executionContext) _FHIRReference(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRReference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRReferenceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRReference")
		case "ID":

			out.Values[i] = ec._FHIRReference_ID(ctx, field, obj)

		case "Reference":

			out.Values[i] = ec._FHIRReference_Reference(ctx, field, obj)

		case "Type":

			out.Values[i] = ec._FHIRReference_Type(ctx, field, obj)

		case "Identifier":

			out.Values[i] = ec._FHIRReference_Identifier(ctx, field, obj)

		case "Display":

			out.Values[i] = ec._FHIRReference_Display(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRSampledDataImplementors = []string{"FHIRSampledData"}

func (ec *executionContext) _FHIRSampledData(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRSampledData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRSampledDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRSampledData")
		case "ID":

			out.Values[i] = ec._FHIRSampledData_ID(ctx, field, obj)

		case "Origin":

			out.Values[i] = ec._FHIRSampledData_Origin(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Period":

			out.Values[i] = ec._FHIRSampledData_Period(ctx, field, obj)

		case "Factor":

			out.Values[i] = ec._FHIRSampledData_Factor(ctx, field, obj)

		case "LowerLimit":

			out.Values[i] = ec._FHIRSampledData_LowerLimit(ctx, field, obj)

		case "UpperLimit":

			out.Values[i] = ec._FHIRSampledData_UpperLimit(ctx, field, obj)

		case "Dimensions":

			out.Values[i] = ec._FHIRSampledData_Dimensions(ctx, field, obj)

		case "Data":

			out.Values[i] = ec._FHIRSampledData_Data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRTimingImplementors = []string{"FHIRTiming"}

func (ec *executionContext) _FHIRTiming(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRTiming) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRTimingImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRTiming")
		case "ID":

			out.Values[i] = ec._FHIRTiming_ID(ctx, field, obj)

		case "Event":

			out.Values[i] = ec._FHIRTiming_Event(ctx, field, obj)

		case "Repeat":

			out.Values[i] = ec._FHIRTiming_Repeat(ctx, field, obj)

		case "Code":

			out.Values[i] = ec._FHIRTiming_Code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRTimingRepeatImplementors = []string{"FHIRTimingRepeat"}

func (ec *executionContext) _FHIRTimingRepeat(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRTimingRepeat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRTimingRepeatImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRTimingRepeat")
		case "ID":

			out.Values[i] = ec._FHIRTimingRepeat_ID(ctx, field, obj)

		case "BoundsDuration":

			out.Values[i] = ec._FHIRTimingRepeat_BoundsDuration(ctx, field, obj)

		case "BoundsRange":

			out.Values[i] = ec._FHIRTimingRepeat_BoundsRange(ctx, field, obj)

		case "BoundsPeriod":

			out.Values[i] = ec._FHIRTimingRepeat_BoundsPeriod(ctx, field, obj)

		case "Count":

			out.Values[i] = ec._FHIRTimingRepeat_Count(ctx, field, obj)

		case "CountMax":

			out.Values[i] = ec._FHIRTimingRepeat_CountMax(ctx, field, obj)

		case "Duration":

			out.Values[i] = ec._FHIRTimingRepeat_Duration(ctx, field, obj)

		case "DurationMax":

			out.Values[i] = ec._FHIRTimingRepeat_DurationMax(ctx, field, obj)

		case "DurationUnit":

			out.Values[i] = ec._FHIRTimingRepeat_DurationUnit(ctx, field, obj)

		case "Frequency":

			out.Values[i] = ec._FHIRTimingRepeat_Frequency(ctx, field, obj)

		case "FrequencyMax":

			out.Values[i] = ec._FHIRTimingRepeat_FrequencyMax(ctx, field, obj)

		case "Period":

			out.Values[i] = ec._FHIRTimingRepeat_Period(ctx, field, obj)

		case "PeriodMax":

			out.Values[i] = ec._FHIRTimingRepeat_PeriodMax(ctx, field, obj)

		case "PeriodUnit":

			out.Values[i] = ec._FHIRTimingRepeat_PeriodUnit(ctx, field, obj)

		case "DayOfWeek":

			out.Values[i] = ec._FHIRTimingRepeat_DayOfWeek(ctx, field, obj)

		case "TimeOfDay":

			out.Values[i] = ec._FHIRTimingRepeat_TimeOfDay(ctx, field, obj)

		case "When":

			out.Values[i] = ec._FHIRTimingRepeat_When(ctx, field, obj)

		case "Offset":

			out.Values[i] = ec._FHIRTimingRepeat_Offset(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var healthTimelineImplementors = []string{"HealthTimeline"}

func (ec *executionContext) _HealthTimeline(ctx context.Context, sel ast.SelectionSet, obj *dto.HealthTimeline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, healthTimelineImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HealthTimeline")
		case "timeline":

			out.Values[i] = ec._HealthTimeline_timeline(ctx, field, obj)

		case "totalCount":

			out.Values[i] = ec._HealthTimeline_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicalDataImplementors = []string{"MedicalData"}

func (ec *executionContext) _MedicalData(ctx context.Context, sel ast.SelectionSet, obj *dto.MedicalData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicalDataImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicalData")
		case "regimen":

			out.Values[i] = ec._MedicalData_regimen(ctx, field, obj)

		case "allergies":

			out.Values[i] = ec._MedicalData_allergies(ctx, field, obj)

		case "weight":

			out.Values[i] = ec._MedicalData_weight(ctx, field, obj)

		case "bmi":

			out.Values[i] = ec._MedicalData_bmi(ctx, field, obj)

		case "viralLoad":

			out.Values[i] = ec._MedicalData_viralLoad(ctx, field, obj)

		case "cd4Count":

			out.Values[i] = ec._MedicalData_cd4Count(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicationImplementors = []string{"Medication"}

func (ec *executionContext) _Medication(ctx context.Context, sel ast.SelectionSet, obj *dto.Medication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Medication")
		case "name":

			out.Values[i] = ec._Medication_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "code":

			out.Values[i] = ec._Medication_code(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicationStatementImplementors = []string{"MedicationStatement"}

func (ec *executionContext) _MedicationStatement(ctx context.Context, sel ast.SelectionSet, obj *dto.MedicationStatement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicationStatementImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicationStatement")
		case "id":

			out.Values[i] = ec._MedicationStatement_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._MedicationStatement_status(ctx, field, obj)

		case "medication":

			out.Values[i] = ec._MedicationStatement_medication(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patientID":

			out.Values[i] = ec._MedicationStatement_patientID(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createFHIROrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createFHIROrganization(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createEpisodeOfCare":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEpisodeOfCare(ctx, field)
			})

		case "endEpisodeOfCare":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_endEpisodeOfCare(ctx, field)
			})

		case "startEncounter":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_startEncounter(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endEncounter":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_endEncounter(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordTemperature":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordTemperature(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordHeight":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordHeight(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordWeight":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordWeight(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordRespiratoryRate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordRespiratoryRate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordPulseRate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordPulseRate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordBloodPressure":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordBloodPressure(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordBMI":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordBMI(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPatient":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPatient(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var observationImplementors = []string{"Observation"}

func (ec *executionContext) _Observation(ctx context.Context, sel ast.SelectionSet, obj *dto.Observation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, observationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Observation")
		case "id":

			out.Values[i] = ec._Observation_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._Observation_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "patientID":

			out.Values[i] = ec._Observation_patientID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "encounterID":

			out.Values[i] = ec._Observation_encounterID(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Observation_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Observation_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *firebasetools.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":

			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientImplementors = []string{"Patient"}

func (ec *executionContext) _Patient(ctx context.Context, sel ast.SelectionSet, obj *dto.Patient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Patient")
		case "id":

			out.Values[i] = ec._Patient_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "active":

			out.Values[i] = ec._Patient_active(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Patient_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":

			out.Values[i] = ec._Patient_phoneNumber(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gender":

			out.Values[i] = ec._Patient_gender(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "birthDate":

			out.Values[i] = ec._Patient_birthDate(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "patientHealthTimeline":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientHealthTimeline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getMedicalData":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMedicalData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getEpisodeOfCare":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEpisodeOfCare(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listPatientEncounters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPatientEncounters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPatientTemperatureEntries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientTemperatureEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getPatientBloodPressureEntries":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientBloodPressureEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "_service":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var timelineResourceImplementors = []string{"TimelineResource"}

func (ec *executionContext) _TimelineResource(ctx context.Context, sel ast.SelectionSet, obj *dto.TimelineResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timelineResourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimelineResource")
		case "id":

			out.Values[i] = ec._TimelineResource_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceType":

			out.Values[i] = ec._TimelineResource_resourceType(ctx, field, obj)

		case "name":

			out.Values[i] = ec._TimelineResource_name(ctx, field, obj)

		case "value":

			out.Values[i] = ec._TimelineResource_value(ctx, field, obj)

		case "status":

			out.Values[i] = ec._TimelineResource_status(ctx, field, obj)

		case "date":

			out.Values[i] = ec._TimelineResource_date(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":

			out.Values[i] = ec.__Service_sdl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) (scalarutils.Code, error) {
	var res scalarutils.Code
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v scalarutils.Code) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContactInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInput(ctx context.Context, v interface{}) (dto.ContactInput, error) {
	res, err := ec.unmarshalInputContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContactInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInputᚄ(ctx context.Context, v interface{}) ([]dto.ContactInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.ContactInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContactInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNContactType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactType(ctx context.Context, v interface{}) (dto.ContactType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ContactType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContactType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactType(ctx context.Context, sel ast.SelectionSet, v dto.ContactType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (scalarutils.Date, error) {
	var res scalarutils.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v scalarutils.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) (scalarutils.DateTime, error) {
	var res scalarutils.DateTime
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v scalarutils.DateTime) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEncounter2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.Encounter) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNEncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx context.Context, sel ast.SelectionSet, v *dto.Encounter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Encounter(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEpisodeOfCareInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareInput(ctx context.Context, v interface{}) (dto.EpisodeOfCareInput, error) {
	res, err := ec.unmarshalInputEpisodeOfCareInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx context.Context, v interface{}) (dto.EpisodeOfCareStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EpisodeOfCareStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.EpisodeOfCareStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v domain.FHIRCodeableConcept) graphql.Marshaler {
	return ec._FHIRCodeableConcept(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) (domain.FHIRCodeableConceptInput, error) {
	res, err := ec.unmarshalInputFHIRCodeableConceptInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCoding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFHIRCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFHIRCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCoding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FHIRCoding(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRCodingInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInputᚄ(ctx context.Context, v interface{}) ([]*domain.FHIRCodingInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*domain.FHIRCodingInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFHIRCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFHIRCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx context.Context, v interface{}) (*domain.FHIRCodingInput, error) {
	res, err := ec.unmarshalInputFHIRCodingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FHIROrganization(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIROrganizationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationInput(ctx context.Context, v interface{}) (domain.FHIROrganizationInput, error) {
	res, err := ec.unmarshalInputFHIROrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIROrganizationRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIROrganizationRelayPayload) graphql.Marshaler {
	return ec._FHIROrganizationRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIROrganizationRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganizationRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FHIROrganizationRelayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx context.Context, sel ast.SelectionSet, v domain.FHIRQuantity) graphql.Marshaler {
	return ec._FHIRQuantity(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRQuantity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FHIRQuantity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (domain.FHIRQuantityInput, error) {
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (*domain.FHIRQuantityInput, error) {
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx context.Context, v interface{}) (dto.Gender, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.Gender(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx context.Context, sel ast.SelectionSet, v dto.Gender) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNHealthTimeline2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimeline(ctx context.Context, sel ast.SelectionSet, v dto.HealthTimeline) graphql.Marshaler {
	return ec._HealthTimeline(ctx, sel, &v)
}

func (ec *executionContext) marshalNHealthTimeline2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimeline(ctx context.Context, sel ast.SelectionSet, v *dto.HealthTimeline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HealthTimeline(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHealthTimelineInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimelineInput(ctx context.Context, v interface{}) (dto.HealthTimelineInput, error) {
	res, err := ec.unmarshalInputHealthTimelineInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx context.Context, v interface{}) (domain.HumanNameUseEnum, error) {
	var res domain.HumanNameUseEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx context.Context, sel ast.SelectionSet, v domain.HumanNameUseEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIdentifierInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInput(ctx context.Context, v interface{}) (dto.IdentifierInput, error) {
	res, err := ec.unmarshalInputIdentifierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIdentifierInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInputᚄ(ctx context.Context, v interface{}) ([]dto.IdentifierInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.IdentifierInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIdentifierInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNIdentifierType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierType(ctx context.Context, v interface{}) (dto.IdentifierType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.IdentifierType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifierType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierType(ctx context.Context, sel ast.SelectionSet, v dto.IdentifierType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx context.Context, v interface{}) (domain.IdentifierUseEnum, error) {
	var res domain.IdentifierUseEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx context.Context, sel ast.SelectionSet, v domain.IdentifierUseEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMedication2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedication(ctx context.Context, sel ast.SelectionSet, v dto.Medication) graphql.Marshaler {
	return ec._Medication(ctx, sel, &v)
}

func (ec *executionContext) marshalNObservation2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v dto.Observation) graphql.Marshaler {
	return ec._Observation(ctx, sel, &v)
}

func (ec *executionContext) marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v *dto.Observation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Observation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx context.Context, v interface{}) (dto.ObservationInput, error) {
	res, err := ec.unmarshalInputObservationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx context.Context, v interface{}) (dto.ObservationStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ObservationStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx context.Context, sel ast.SelectionSet, v dto.ObservationStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *firebasetools.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPatient2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx context.Context, sel ast.SelectionSet, v dto.Patient) graphql.Marshaler {
	return ec._Patient(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx context.Context, sel ast.SelectionSet, v *dto.Patient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Patient(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPatientInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatientInput(ctx context.Context, v interface{}) (dto.PatientInput, error) {
	res, err := ec.unmarshalInputPatientInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) (scalarutils.URI, error) {
	var res scalarutils.URI
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v scalarutils.URI) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx context.Context, v interface{}) (scalarutils.XHTML, error) {
	var res scalarutils.XHTML
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx context.Context, sel ast.SelectionSet, v scalarutils.XHTML) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx context.Context, v interface{}) (*domain.AddressTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AddressTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AddressTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx context.Context, v interface{}) (*domain.AddressUseEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AddressUseEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AddressUseEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx context.Context, v interface{}) (*domain.AgeComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AgeComparatorEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AgeComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAllergyIntolerance2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntolerance(ctx context.Context, sel ast.SelectionSet, v []*dto.AllergyIntolerance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntolerance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntolerance(ctx context.Context, sel ast.SelectionSet, v *dto.AllergyIntolerance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AllergyIntolerance(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx context.Context, v interface{}) (dto.AllergyIntoleranceReactionSeverityEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.AllergyIntoleranceReactionSeverityEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx context.Context, sel ast.SelectionSet, v dto.AllergyIntoleranceReactionSeverityEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx context.Context, v interface{}) (*scalarutils.Base64Binary, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Base64Binary)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Base64Binary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCode2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) ([]*scalarutils.Code, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*scalarutils.Code, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCode2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v []*scalarutils.Code) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) (*scalarutils.Code, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Code)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Code) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx context.Context, v interface{}) (*domain.ContactPointSystemEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.ContactPointSystemEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx context.Context, sel ast.SelectionSet, v *domain.ContactPointSystemEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx context.Context, v interface{}) (*domain.ContactPointUseEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.ContactPointUseEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx context.Context, sel ast.SelectionSet, v *domain.ContactPointUseEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (scalarutils.Date, error) {
	var res scalarutils.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v scalarutils.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalODateTime2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) ([]*scalarutils.DateTime, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*scalarutils.DateTime, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODateTime2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v []*scalarutils.DateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) (*scalarutils.DateTime, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.DateTime)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v *scalarutils.DateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx context.Context, v interface{}) (*scalarutils.Decimal, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Decimal)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Decimal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx context.Context, v interface{}) (*domain.DurationComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.DurationComparatorEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *domain.DurationComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEncounterClass2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClass(ctx context.Context, v interface{}) (dto.EncounterClass, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EncounterClass(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterClass2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClass(ctx context.Context, sel ast.SelectionSet, v dto.EncounterClass) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx context.Context, v interface{}) (dto.EncounterStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EncounterStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.EncounterStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v *dto.EpisodeOfCare) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EpisodeOfCare(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAddress(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRAddressInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx context.Context, v interface{}) ([]*domain.FHIRAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*domain.FHIRAddressInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRAddressInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRAddressInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx context.Context, v interface{}) (*domain.FHIRAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCodeableConcept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCodeableConcept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCodeableConcept(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) ([]*domain.FHIRCodeableConceptInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*domain.FHIRCodeableConceptInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) (*domain.FHIRCodeableConceptInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRCodeableConceptInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRContactPoint2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRContactPoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRContactPoint2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRContactPoint2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRContactPoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRContactPoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRContactPointInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx context.Context, v interface{}) ([]*domain.FHIRContactPointInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*domain.FHIRContactPointInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRContactPointInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRContactPointInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx context.Context, v interface{}) (*domain.FHIRContactPointInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRContactPointInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRDosageDoseandrate2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRDosageDoseandrate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRDosageDoseandrate2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRDosageDoseandrate2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRDosageDoseandrate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRDosageDoseandrate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRDosageDoseandrateInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx context.Context, v interface{}) ([]*domain.FHIRDosageDoseandrateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*domain.FHIRDosageDoseandrateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRDosageDoseandrateInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRDosageDoseandrateInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx context.Context, v interface{}) (*domain.FHIRDosageDoseandrateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRDosageDoseandrateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRDuration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRDuration(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx context.Context, v interface{}) (*domain.FHIRDurationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRDurationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRIdentifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRIdentifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRIdentifier(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx context.Context, v interface{}) ([]*domain.FHIRIdentifierInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*domain.FHIRIdentifierInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx context.Context, v interface{}) (*domain.FHIRIdentifierInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRIdentifierInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIROrganization(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIROrganizationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIROrganizationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIROrganizationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIROrganizationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganizationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIROrganizationRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPeriod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPeriod(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx context.Context, v interface{}) (*domain.FHIRPeriodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRPeriodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRQuantity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRQuantity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (domain.FHIRQuantityInput, error) {
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (*domain.FHIRQuantityInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRRange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRRange(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx context.Context, v interface{}) (*domain.FHIRRangeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRRangeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRRatio) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRRatio(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx context.Context, v interface{}) (*domain.FHIRRatioInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRRatioInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx context.Context, v interface{}) (*domain.FHIRReferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRReferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRTiming2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTiming(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRTiming) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRTiming(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRTimingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingInput(ctx context.Context, v interface{}) (*domain.FHIRTimingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRTimingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRTimingRepeat2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeat(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRTimingRepeat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRTimingRepeat(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRTimingRepeatInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeatInput(ctx context.Context, v interface{}) (*domain.FHIRTimingRepeatInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRTimingRepeatInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOInteger2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInteger2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx context.Context, v interface{}) (*scalarutils.Markdown, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Markdown)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Markdown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMedicalData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicalData(ctx context.Context, sel ast.SelectionSet, v *dto.MedicalData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicalData(ctx, sel, v)
}

func (ec *executionContext) marshalOMedicationStatement2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx context.Context, sel ast.SelectionSet, v []*dto.MedicationStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx context.Context, sel ast.SelectionSet, v *dto.MedicationStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicationStatement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMedicationStatementStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatementStatusEnum(ctx context.Context, v interface{}) (dto.MedicationStatementStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.MedicationStatementStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicationStatementStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatementStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.MedicationStatementStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx context.Context, v interface{}) (*domain.NarrativeStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.NarrativeStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.NarrativeStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v []*dto.Observation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.Observation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v *dto.Observation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Observation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPositiveInt2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPositiveInt2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx context.Context, v interface{}) (*domain.QuantityComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.QuantityComparatorEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *domain.QuantityComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOResourceType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐResourceType(ctx context.Context, v interface{}) (dto.ResourceType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ResourceType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResourceType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐResourceType(ctx context.Context, sel ast.SelectionSet, v dto.ResourceType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOTimelineResource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx context.Context, sel ast.SelectionSet, v dto.TimelineResource) graphql.Marshaler {
	return ec._TimelineResource(ctx, sel, &v)
}

func (ec *executionContext) marshalOTimelineResource2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx context.Context, sel ast.SelectionSet, v []dto.TimelineResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTimelineResource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx context.Context, v interface{}) (*domain.TimingRepeatDurationUnitEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.TimingRepeatDurationUnitEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx context.Context, sel ast.SelectionSet, v *domain.TimingRepeatDurationUnitEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx context.Context, v interface{}) (*domain.TimingRepeatPeriodUnitEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.TimingRepeatPeriodUnitEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx context.Context, sel ast.SelectionSet, v *domain.TimingRepeatPeriodUnitEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx context.Context, v interface{}) (*domain.TimingRepeatWhenEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.TimingRepeatWhenEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx context.Context, sel ast.SelectionSet, v *domain.TimingRepeatWhenEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) (*scalarutils.URI, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.URI)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v *scalarutils.URI) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx context.Context, v interface{}) (*scalarutils.URL, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.URL)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx context.Context, sel ast.SelectionSet, v *scalarutils.URL) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
