// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/savannahghi/clinical/pkg/clinical/domain"
	"github.com/savannahghi/enumutils"
	"github.com/savannahghi/firebasetools"
	"github.com/savannahghi/scalarutils"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Entity() EntityResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Dummy struct {
		ID func(childComplexity int) int
	}

	Entity struct {
		FindDummyByID func(childComplexity int, id string) int
	}

	EpisodeOfCarePayload struct {
		EpisodeOfCare func(childComplexity int) int
		TotalVisits   func(childComplexity int) int
	}

	FHIRAddress struct {
		City       func(childComplexity int) int
		Country    func(childComplexity int) int
		District   func(childComplexity int) int
		ID         func(childComplexity int) int
		Line       func(childComplexity int) int
		Period     func(childComplexity int) int
		PostalCode func(childComplexity int) int
		State      func(childComplexity int) int
		Text       func(childComplexity int) int
		Type       func(childComplexity int) int
		Use        func(childComplexity int) int
	}

	FHIRAge struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		ID         func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	FHIRAllergyIntolerance struct {
		Asserter           func(childComplexity int) int
		Category           func(childComplexity int) int
		ClinicalStatus     func(childComplexity int) int
		Code               func(childComplexity int) int
		Criticality        func(childComplexity int) int
		Encounter          func(childComplexity int) int
		ID                 func(childComplexity int) int
		Identifier         func(childComplexity int) int
		LastOccurrence     func(childComplexity int) int
		Note               func(childComplexity int) int
		OnsetAge           func(childComplexity int) int
		OnsetDateTime      func(childComplexity int) int
		OnsetPeriod        func(childComplexity int) int
		OnsetRange         func(childComplexity int) int
		OnsetString        func(childComplexity int) int
		Patient            func(childComplexity int) int
		Reaction           func(childComplexity int) int
		RecordedDate       func(childComplexity int) int
		Recorder           func(childComplexity int) int
		Text               func(childComplexity int) int
		Type               func(childComplexity int) int
		VerificationStatus func(childComplexity int) int
	}

	FHIRAllergyIntoleranceRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRAllergyIntoleranceRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRAllergyIntoleranceRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRAllergyintoleranceReaction struct {
		Description   func(childComplexity int) int
		ExposureRoute func(childComplexity int) int
		ID            func(childComplexity int) int
		Manifestation func(childComplexity int) int
		Note          func(childComplexity int) int
		Onset         func(childComplexity int) int
		Severity      func(childComplexity int) int
		Substance     func(childComplexity int) int
	}

	FHIRAnnotation struct {
		AuthorReference func(childComplexity int) int
		AuthorString    func(childComplexity int) int
		ID              func(childComplexity int) int
		Text            func(childComplexity int) int
		Time            func(childComplexity int) int
	}

	FHIRAttachment struct {
		ContentType func(childComplexity int) int
		Creation    func(childComplexity int) int
		Data        func(childComplexity int) int
		Hash        func(childComplexity int) int
		ID          func(childComplexity int) int
		Language    func(childComplexity int) int
		Size        func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	FHIRCodeableConcept struct {
		Coding func(childComplexity int) int
		ID     func(childComplexity int) int
		Text   func(childComplexity int) int
	}

	FHIRCoding struct {
		Code         func(childComplexity int) int
		Display      func(childComplexity int) int
		ID           func(childComplexity int) int
		System       func(childComplexity int) int
		UserSelected func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	FHIRComposition struct {
		Attester        func(childComplexity int) int
		Author          func(childComplexity int) int
		Category        func(childComplexity int) int
		Confidentiality func(childComplexity int) int
		Custodian       func(childComplexity int) int
		Date            func(childComplexity int) int
		Encounter       func(childComplexity int) int
		Event           func(childComplexity int) int
		ID              func(childComplexity int) int
		Identifier      func(childComplexity int) int
		RelatesTo       func(childComplexity int) int
		Section         func(childComplexity int) int
		Status          func(childComplexity int) int
		Subject         func(childComplexity int) int
		Text            func(childComplexity int) int
		Title           func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	FHIRCompositionAttester struct {
		ID    func(childComplexity int) int
		Mode  func(childComplexity int) int
		Party func(childComplexity int) int
		Time  func(childComplexity int) int
	}

	FHIRCompositionEvent struct {
		Code   func(childComplexity int) int
		Detail func(childComplexity int) int
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
	}

	FHIRCompositionRelatesto struct {
		Code             func(childComplexity int) int
		ID               func(childComplexity int) int
		TargetIdentifier func(childComplexity int) int
		TargetReference  func(childComplexity int) int
	}

	FHIRCompositionRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRCompositionRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRCompositionRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRCompositionSection struct {
		Author      func(childComplexity int) int
		Code        func(childComplexity int) int
		EmptyReason func(childComplexity int) int
		Entry       func(childComplexity int) int
		Focus       func(childComplexity int) int
		ID          func(childComplexity int) int
		Mode        func(childComplexity int) int
		OrderedBy   func(childComplexity int) int
		Section     func(childComplexity int) int
		Text        func(childComplexity int) int
		Title       func(childComplexity int) int
	}

	FHIRCondition struct {
		AbatementAge       func(childComplexity int) int
		AbatementDateTime  func(childComplexity int) int
		AbatementPeriod    func(childComplexity int) int
		AbatementRange     func(childComplexity int) int
		AbatementString    func(childComplexity int) int
		Asserter           func(childComplexity int) int
		BodySite           func(childComplexity int) int
		Category           func(childComplexity int) int
		ClinicalStatus     func(childComplexity int) int
		Code               func(childComplexity int) int
		Encounter          func(childComplexity int) int
		Evidence           func(childComplexity int) int
		ID                 func(childComplexity int) int
		Identifier         func(childComplexity int) int
		Note               func(childComplexity int) int
		OnsetAge           func(childComplexity int) int
		OnsetDateTime      func(childComplexity int) int
		OnsetPeriod        func(childComplexity int) int
		OnsetRange         func(childComplexity int) int
		OnsetString        func(childComplexity int) int
		RecordedDate       func(childComplexity int) int
		Recorder           func(childComplexity int) int
		Severity           func(childComplexity int) int
		Stage              func(childComplexity int) int
		Subject            func(childComplexity int) int
		Text               func(childComplexity int) int
		VerificationStatus func(childComplexity int) int
	}

	FHIRConditionEvidence struct {
		Code   func(childComplexity int) int
		Detail func(childComplexity int) int
		ID     func(childComplexity int) int
	}

	FHIRConditionRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRConditionRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRConditionRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRConditionStage struct {
		Assessment func(childComplexity int) int
		ID         func(childComplexity int) int
		Summary    func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	FHIRContactPoint struct {
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
		Rank   func(childComplexity int) int
		System func(childComplexity int) int
		Use    func(childComplexity int) int
		Value  func(childComplexity int) int
	}

	FHIRDosage struct {
		AdditionalInstruction    func(childComplexity int) int
		AsNeededBoolean          func(childComplexity int) int
		AsNeededCodeableConcept  func(childComplexity int) int
		DoseAndRate              func(childComplexity int) int
		ID                       func(childComplexity int) int
		MaxDosePerAdministration func(childComplexity int) int
		MaxDosePerLifetime       func(childComplexity int) int
		MaxDosePerPeriod         func(childComplexity int) int
		Method                   func(childComplexity int) int
		PatientInstruction       func(childComplexity int) int
		Route                    func(childComplexity int) int
		Sequence                 func(childComplexity int) int
		Site                     func(childComplexity int) int
		Text                     func(childComplexity int) int
		Timing                   func(childComplexity int) int
	}

	FHIRDosageDoseandrate struct {
		DoseQuantity func(childComplexity int) int
		DoseRange    func(childComplexity int) int
		ID           func(childComplexity int) int
		RateQuantity func(childComplexity int) int
		RateRange    func(childComplexity int) int
		RateRatio    func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	FHIRDuration struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		ID         func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	FHIREncounter struct {
		Account         func(childComplexity int) int
		Appointment     func(childComplexity int) int
		BasedOn         func(childComplexity int) int
		Class           func(childComplexity int) int
		ClassHistory    func(childComplexity int) int
		Diagnosis       func(childComplexity int) int
		EpisodeOfCare   func(childComplexity int) int
		Hospitalization func(childComplexity int) int
		ID              func(childComplexity int) int
		Identifier      func(childComplexity int) int
		Length          func(childComplexity int) int
		Location        func(childComplexity int) int
		PartOf          func(childComplexity int) int
		Participant     func(childComplexity int) int
		Period          func(childComplexity int) int
		Priority        func(childComplexity int) int
		ReasonCode      func(childComplexity int) int
		ReasonReference func(childComplexity int) int
		ServiceProvider func(childComplexity int) int
		ServiceType     func(childComplexity int) int
		Status          func(childComplexity int) int
		StatusHistory   func(childComplexity int) int
		Subject         func(childComplexity int) int
		Text            func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	FHIREncounterClasshistory struct {
		Class  func(childComplexity int) int
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
	}

	FHIREncounterDiagnosis struct {
		Condition func(childComplexity int) int
		ID        func(childComplexity int) int
		Rank      func(childComplexity int) int
		Use       func(childComplexity int) int
	}

	FHIREncounterHospitalization struct {
		AdmitSource            func(childComplexity int) int
		Destination            func(childComplexity int) int
		DietPreference         func(childComplexity int) int
		DischargeDisposition   func(childComplexity int) int
		ID                     func(childComplexity int) int
		Origin                 func(childComplexity int) int
		PreAdmissionIdentifier func(childComplexity int) int
		ReAdmission            func(childComplexity int) int
		SpecialArrangement     func(childComplexity int) int
		SpecialCourtesy        func(childComplexity int) int
	}

	FHIREncounterLocation struct {
		ID           func(childComplexity int) int
		Location     func(childComplexity int) int
		Period       func(childComplexity int) int
		PhysicalType func(childComplexity int) int
		Status       func(childComplexity int) int
	}

	FHIREncounterParticipant struct {
		ID         func(childComplexity int) int
		Individual func(childComplexity int) int
		Period     func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	FHIREncounterRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIREncounterRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIREncounterRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIREncounterStatushistory struct {
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
		Status func(childComplexity int) int
	}

	FHIREpisodeOfCare struct {
		Account              func(childComplexity int) int
		CareManager          func(childComplexity int) int
		Diagnosis            func(childComplexity int) int
		ID                   func(childComplexity int) int
		Identifier           func(childComplexity int) int
		ManagingOrganization func(childComplexity int) int
		Patient              func(childComplexity int) int
		Period               func(childComplexity int) int
		ReferralRequest      func(childComplexity int) int
		Status               func(childComplexity int) int
		StatusHistory        func(childComplexity int) int
		Team                 func(childComplexity int) int
		Text                 func(childComplexity int) int
		Type                 func(childComplexity int) int
	}

	FHIREpisodeOfCareRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIREpisodeOfCareRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIREpisodeOfCareRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIREpisodeofcareDiagnosis struct {
		Condition func(childComplexity int) int
		ID        func(childComplexity int) int
		Rank      func(childComplexity int) int
		Role      func(childComplexity int) int
	}

	FHIREpisodeofcareStatushistory struct {
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
		Status func(childComplexity int) int
	}

	FHIRHumanName struct {
		Family func(childComplexity int) int
		Given  func(childComplexity int) int
		ID     func(childComplexity int) int
		Period func(childComplexity int) int
		Prefix func(childComplexity int) int
		Suffix func(childComplexity int) int
		Text   func(childComplexity int) int
		Use    func(childComplexity int) int
	}

	FHIRIdentifier struct {
		Assigner func(childComplexity int) int
		ID       func(childComplexity int) int
		Period   func(childComplexity int) int
		System   func(childComplexity int) int
		Type     func(childComplexity int) int
		Use      func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	FHIRMedication struct {
		Amount       func(childComplexity int) int
		Batch        func(childComplexity int) int
		Code         func(childComplexity int) int
		Form         func(childComplexity int) int
		ID           func(childComplexity int) int
		Identifier   func(childComplexity int) int
		Ingredient   func(childComplexity int) int
		Manufacturer func(childComplexity int) int
		Status       func(childComplexity int) int
		Text         func(childComplexity int) int
	}

	FHIRMedicationRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRMedicationRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRMedicationRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRMedicationRequest struct {
		AuthoredOn                func(childComplexity int) int
		BasedOn                   func(childComplexity int) int
		Category                  func(childComplexity int) int
		CourseOfTherapyType       func(childComplexity int) int
		DetectedIssue             func(childComplexity int) int
		DispenseRequest           func(childComplexity int) int
		DoNotPerform              func(childComplexity int) int
		DosageInstruction         func(childComplexity int) int
		Encounter                 func(childComplexity int) int
		EventHistory              func(childComplexity int) int
		GroupIdentifier           func(childComplexity int) int
		ID                        func(childComplexity int) int
		Identifier                func(childComplexity int) int
		InstantiatesCanonical     func(childComplexity int) int
		InstantiatesURI           func(childComplexity int) int
		Insurance                 func(childComplexity int) int
		Intent                    func(childComplexity int) int
		MedicationCodeableConcept func(childComplexity int) int
		MedicationReference       func(childComplexity int) int
		Note                      func(childComplexity int) int
		Performer                 func(childComplexity int) int
		PerformerType             func(childComplexity int) int
		PriorPrescription         func(childComplexity int) int
		Priority                  func(childComplexity int) int
		ReasonCode                func(childComplexity int) int
		ReasonReference           func(childComplexity int) int
		Recorder                  func(childComplexity int) int
		ReportedBoolean           func(childComplexity int) int
		ReportedReference         func(childComplexity int) int
		Requester                 func(childComplexity int) int
		Status                    func(childComplexity int) int
		StatusReason              func(childComplexity int) int
		Subject                   func(childComplexity int) int
		Substitution              func(childComplexity int) int
		SupportingInformation     func(childComplexity int) int
		Text                      func(childComplexity int) int
	}

	FHIRMedicationRequestRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRMedicationRequestRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRMedicationRequestRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRMedicationStatement struct {
		BasedOn                   func(childComplexity int) int
		Category                  func(childComplexity int) int
		Context                   func(childComplexity int) int
		DateAsserted              func(childComplexity int) int
		DerivedFrom               func(childComplexity int) int
		Dosage                    func(childComplexity int) int
		EffectiveDateTime         func(childComplexity int) int
		EffectivePeriod           func(childComplexity int) int
		ID                        func(childComplexity int) int
		Identifier                func(childComplexity int) int
		InformationSource         func(childComplexity int) int
		MedicationCodeableConcept func(childComplexity int) int
		MedicationReference       func(childComplexity int) int
		Note                      func(childComplexity int) int
		PartOf                    func(childComplexity int) int
		ReasonCode                func(childComplexity int) int
		ReasonReference           func(childComplexity int) int
		Status                    func(childComplexity int) int
		StatusReason              func(childComplexity int) int
		Subject                   func(childComplexity int) int
		Text                      func(childComplexity int) int
	}

	FHIRMedicationStatementRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRMedicationStatementRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRMedicationStatementRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRMedicationrequestDispenserequest struct {
		DispenseInterval       func(childComplexity int) int
		ExpectedSupplyDuration func(childComplexity int) int
		ID                     func(childComplexity int) int
		InitialFill            func(childComplexity int) int
		NumberOfRepeatsAllowed func(childComplexity int) int
		Performer              func(childComplexity int) int
		Quantity               func(childComplexity int) int
		ValidityPeriod         func(childComplexity int) int
	}

	FHIRMedicationrequestInitialfill struct {
		Duration func(childComplexity int) int
		ID       func(childComplexity int) int
		Quantity func(childComplexity int) int
	}

	FHIRMedicationrequestSubstitution struct {
		AllowedBoolean         func(childComplexity int) int
		AllowedCodeableConcept func(childComplexity int) int
		ID                     func(childComplexity int) int
		Reason                 func(childComplexity int) int
	}

	FHIRNarrative struct {
		Div    func(childComplexity int) int
		ID     func(childComplexity int) int
		Status func(childComplexity int) int
	}

	FHIRObservation struct {
		BasedOn              func(childComplexity int) int
		BodySite             func(childComplexity int) int
		Category             func(childComplexity int) int
		Code                 func(childComplexity int) int
		Component            func(childComplexity int) int
		DataAbsentReason     func(childComplexity int) int
		DerivedFrom          func(childComplexity int) int
		Device               func(childComplexity int) int
		EffectiveDateTime    func(childComplexity int) int
		EffectiveInstant     func(childComplexity int) int
		EffectivePeriod      func(childComplexity int) int
		EffectiveTiming      func(childComplexity int) int
		Encounter            func(childComplexity int) int
		Focus                func(childComplexity int) int
		HasMember            func(childComplexity int) int
		ID                   func(childComplexity int) int
		Identifier           func(childComplexity int) int
		Interpretation       func(childComplexity int) int
		Issued               func(childComplexity int) int
		Method               func(childComplexity int) int
		Note                 func(childComplexity int) int
		PartOf               func(childComplexity int) int
		Performer            func(childComplexity int) int
		ReferenceRange       func(childComplexity int) int
		Specimen             func(childComplexity int) int
		Status               func(childComplexity int) int
		Subject              func(childComplexity int) int
		Text                 func(childComplexity int) int
		ValueBoolean         func(childComplexity int) int
		ValueCodeableConcept func(childComplexity int) int
		ValueDateTime        func(childComplexity int) int
		ValueInteger         func(childComplexity int) int
		ValuePeriod          func(childComplexity int) int
		ValueQuantity        func(childComplexity int) int
		ValueRange           func(childComplexity int) int
		ValueRatio           func(childComplexity int) int
		ValueSampledData     func(childComplexity int) int
		ValueString          func(childComplexity int) int
		ValueTime            func(childComplexity int) int
	}

	FHIRObservationComponent struct {
		Code                 func(childComplexity int) int
		DataAbsentReason     func(childComplexity int) int
		ID                   func(childComplexity int) int
		Interpretation       func(childComplexity int) int
		ReferenceRange       func(childComplexity int) int
		ValueBoolean         func(childComplexity int) int
		ValueCodeableConcept func(childComplexity int) int
		ValueDateTime        func(childComplexity int) int
		ValueInteger         func(childComplexity int) int
		ValuePeriod          func(childComplexity int) int
		ValueQuantity        func(childComplexity int) int
		ValueRange           func(childComplexity int) int
		ValueRatio           func(childComplexity int) int
		ValueSampledData     func(childComplexity int) int
		ValueString          func(childComplexity int) int
		ValueTime            func(childComplexity int) int
	}

	FHIRObservationReferencerange struct {
		Age       func(childComplexity int) int
		AppliesTo func(childComplexity int) int
		High      func(childComplexity int) int
		ID        func(childComplexity int) int
		Low       func(childComplexity int) int
		Text      func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	FHIRObservationRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRObservationRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRObservationRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIROrganization struct {
		Active     func(childComplexity int) int
		Address    func(childComplexity int) int
		Alias      func(childComplexity int) int
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		Name       func(childComplexity int) int
		Telecom    func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	FHIROrganizationRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIROrganizationRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIROrganizationRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRPatient struct {
		Active               func(childComplexity int) int
		Address              func(childComplexity int) int
		BirthDate            func(childComplexity int) int
		Communication        func(childComplexity int) int
		Contact              func(childComplexity int) int
		DeceasedBoolean      func(childComplexity int) int
		DeceasedDateTime     func(childComplexity int) int
		Gender               func(childComplexity int) int
		GeneralPractitioner  func(childComplexity int) int
		ID                   func(childComplexity int) int
		Identifier           func(childComplexity int) int
		Link                 func(childComplexity int) int
		ManagingOrganization func(childComplexity int) int
		MaritalStatus        func(childComplexity int) int
		MultipleBirthBoolean func(childComplexity int) int
		MultipleBirthInteger func(childComplexity int) int
		Name                 func(childComplexity int) int
		Photo                func(childComplexity int) int
		Telecom              func(childComplexity int) int
		Text                 func(childComplexity int) int
	}

	FHIRPatientCommunication struct {
		ID        func(childComplexity int) int
		Language  func(childComplexity int) int
		Preferred func(childComplexity int) int
	}

	FHIRPatientContact struct {
		Address      func(childComplexity int) int
		Gender       func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Organization func(childComplexity int) int
		Period       func(childComplexity int) int
		Relationship func(childComplexity int) int
		Telecom      func(childComplexity int) int
	}

	FHIRPatientLink struct {
		ID    func(childComplexity int) int
		Other func(childComplexity int) int
		Type  func(childComplexity int) int
	}

	FHIRPatientRelayConnection struct {
		Edges           func(childComplexity int) int
		HasOpenEpisodes func(childComplexity int) int
		PageInfo        func(childComplexity int) int
	}

	FHIRPatientRelayEdge struct {
		Cursor          func(childComplexity int) int
		HasOpenEpisodes func(childComplexity int) int
		Node            func(childComplexity int) int
	}

	FHIRPatientRelayPayload struct {
		HasOpenEpisodes func(childComplexity int) int
		Resource        func(childComplexity int) int
	}

	FHIRPeriod struct {
		End   func(childComplexity int) int
		ID    func(childComplexity int) int
		Start func(childComplexity int) int
	}

	FHIRQuantity struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		ID         func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	FHIRRange struct {
		High func(childComplexity int) int
		ID   func(childComplexity int) int
		Low  func(childComplexity int) int
	}

	FHIRRatio struct {
		Denominator func(childComplexity int) int
		ID          func(childComplexity int) int
		Numerator   func(childComplexity int) int
	}

	FHIRReference struct {
		Display    func(childComplexity int) int
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		Reference  func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	FHIRSampledData struct {
		Data       func(childComplexity int) int
		Dimensions func(childComplexity int) int
		Factor     func(childComplexity int) int
		ID         func(childComplexity int) int
		LowerLimit func(childComplexity int) int
		Origin     func(childComplexity int) int
		Period     func(childComplexity int) int
		UpperLimit func(childComplexity int) int
	}

	FHIRServiceRequest struct {
		AsNeededBoolean         func(childComplexity int) int
		AsNeededCodeableConcept func(childComplexity int) int
		AuthoredOn              func(childComplexity int) int
		BasedOn                 func(childComplexity int) int
		BodySite                func(childComplexity int) int
		Category                func(childComplexity int) int
		Code                    func(childComplexity int) int
		DoNotPerform            func(childComplexity int) int
		Encounter               func(childComplexity int) int
		ID                      func(childComplexity int) int
		Identifier              func(childComplexity int) int
		InstantiatesCanonical   func(childComplexity int) int
		InstantiatesURI         func(childComplexity int) int
		Insurance               func(childComplexity int) int
		Intent                  func(childComplexity int) int
		LocationCode            func(childComplexity int) int
		LocationReference       func(childComplexity int) int
		Note                    func(childComplexity int) int
		OccurrenceDateTime      func(childComplexity int) int
		OccurrencePeriod        func(childComplexity int) int
		OccurrenceTiming        func(childComplexity int) int
		OrderDetail             func(childComplexity int) int
		PatientInstruction      func(childComplexity int) int
		Performer               func(childComplexity int) int
		PerformerType           func(childComplexity int) int
		Priority                func(childComplexity int) int
		QuantityQuantity        func(childComplexity int) int
		QuantityRange           func(childComplexity int) int
		QuantityRatio           func(childComplexity int) int
		ReasonCode              func(childComplexity int) int
		ReasonReference         func(childComplexity int) int
		RelevantHistory         func(childComplexity int) int
		Replaces                func(childComplexity int) int
		Requester               func(childComplexity int) int
		Requisition             func(childComplexity int) int
		Specimen                func(childComplexity int) int
		Status                  func(childComplexity int) int
		Subject                 func(childComplexity int) int
		SupportingInfo          func(childComplexity int) int
		Text                    func(childComplexity int) int
	}

	FHIRServiceRequestRelayConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	FHIRServiceRequestRelayEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	FHIRServiceRequestRelayPayload struct {
		Resource func(childComplexity int) int
	}

	FHIRTiming struct {
		Code   func(childComplexity int) int
		Event  func(childComplexity int) int
		ID     func(childComplexity int) int
		Repeat func(childComplexity int) int
	}

	FHIRTimingRepeat struct {
		BoundsDuration func(childComplexity int) int
		BoundsPeriod   func(childComplexity int) int
		BoundsRange    func(childComplexity int) int
		Count          func(childComplexity int) int
		CountMax       func(childComplexity int) int
		DayOfWeek      func(childComplexity int) int
		Duration       func(childComplexity int) int
		DurationMax    func(childComplexity int) int
		DurationUnit   func(childComplexity int) int
		Frequency      func(childComplexity int) int
		FrequencyMax   func(childComplexity int) int
		ID             func(childComplexity int) int
		Offset         func(childComplexity int) int
		Period         func(childComplexity int) int
		PeriodMax      func(childComplexity int) int
		PeriodUnit     func(childComplexity int) int
		TimeOfDay      func(childComplexity int) int
		When           func(childComplexity int) int
	}

	MedicalData struct {
		Allergies func(childComplexity int) int
		BMI       func(childComplexity int) int
		CD4Count  func(childComplexity int) int
		Regimen   func(childComplexity int) int
		ViralLoad func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	MedicationBatch struct {
		ExpirationDate func(childComplexity int) int
		LotNumber      func(childComplexity int) int
	}

	MedicationIngredient struct {
		IsActive           func(childComplexity int) int
		ItemCodelabConcept func(childComplexity int) int
		ItemReference      func(childComplexity int) int
		Strength           func(childComplexity int) int
	}

	Mutation struct {
		AddNextOfKin                        func(childComplexity int, input domain.SimpleNextOfKinInput) int
		AddNhif                             func(childComplexity int, input *domain.SimpleNHIFInput) int
		CreateFHIRAllergyIntolerance        func(childComplexity int, input domain.FHIRAllergyIntoleranceInput) int
		CreateFHIRComposition               func(childComplexity int, input domain.FHIRCompositionInput) int
		CreateFHIRCondition                 func(childComplexity int, input domain.FHIRConditionInput) int
		CreateFHIRMedicationRequest         func(childComplexity int, input domain.FHIRMedicationRequestInput) int
		CreateFHIRObservation               func(childComplexity int, input domain.FHIRObservationInput) int
		CreateFHIRServiceRequest            func(childComplexity int, input domain.FHIRServiceRequestInput) int
		CreateUpdatePatientExtraInformation func(childComplexity int, input domain.PatientExtraInformationInput) int
		DeleteFHIRComposition               func(childComplexity int, id string) int
		DeleteFHIRMedicationRequest         func(childComplexity int, id string) int
		DeleteFHIRObservation               func(childComplexity int, id string) int
		DeleteFHIRPatient                   func(childComplexity int, id string) int
		DeleteFHIRServiceRequest            func(childComplexity int, id string) int
		EndEncounter                        func(childComplexity int, encounterID string) int
		EndEpisode                          func(childComplexity int, episodeID string) int
		RegisterPatient                     func(childComplexity int, input domain.SimplePatientRegistrationInput) int
		RegisterUser                        func(childComplexity int, input domain.SimplePatientRegistrationInput) int
		StartEncounter                      func(childComplexity int, episodeID string) int
		StartEpisodeByBreakGlass            func(childComplexity int, input domain.BreakGlassEpisodeCreationInput) int
		StartEpisodeByOtp                   func(childComplexity int, input domain.OTPEpisodeCreationInput) int
		UpdateFHIRAllergyIntolerance        func(childComplexity int, input domain.FHIRAllergyIntoleranceInput) int
		UpdateFHIRComposition               func(childComplexity int, input domain.FHIRCompositionInput) int
		UpdateFHIRCondition                 func(childComplexity int, input domain.FHIRConditionInput) int
		UpdateFHIRMedicationRequest         func(childComplexity int, input domain.FHIRMedicationRequestInput) int
		UpdatePatient                       func(childComplexity int, input domain.SimplePatientRegistrationInput) int
		UpgradeEpisode                      func(childComplexity int, input domain.OTPEpisodeUpgradeInput) int
	}

	PageInfo struct {
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
	}

	PatientConnection struct {
		Edges    func(childComplexity int) int
		PageInfo func(childComplexity int) int
	}

	PatientEdge struct {
		Cursor          func(childComplexity int) int
		HasOpenEpisodes func(childComplexity int) int
		Node            func(childComplexity int) int
	}

	PatientPayload struct {
		HasOpenEpisodes func(childComplexity int) int
		OpenEpisodes    func(childComplexity int) int
		PatientRecord   func(childComplexity int) int
	}

	Query struct {
		AllergySummary                func(childComplexity int, patientID string) int
		FindPatients                  func(childComplexity int, search string) int
		FindPatientsByMsisdn          func(childComplexity int, msisdn string) int
		GetMedicalData                func(childComplexity int, patientID string) int
		GetPatient                    func(childComplexity int, id string) int
		ListConcepts                  func(childComplexity int, org string, source string, verbose bool, q *string, sortAsc *string, sortDesc *string, conceptClass *string, dataType *string, locale *string, includeRetired *bool, includeMappings *bool, includeInverseMappings *bool) int
		OpenEpisodes                  func(childComplexity int, patientReference string) int
		OpenOrganizationEpisodes      func(childComplexity int, providerSladeCode string) int
		PatientTimeline               func(childComplexity int, patientID string, count int) int
		PatientTimelineWithCount      func(childComplexity int, episodeID string, count int) int
		ProblemSummary                func(childComplexity int, patientID string) int
		SearchFHIRAllergyIntolerance  func(childComplexity int, params map[string]interface{}) int
		SearchFHIRComposition         func(childComplexity int, params map[string]interface{}) int
		SearchFHIRCondition           func(childComplexity int, params map[string]interface{}) int
		SearchFHIREncounter           func(childComplexity int, params map[string]interface{}) int
		SearchFHIRMedicationRequest   func(childComplexity int, params map[string]interface{}) int
		SearchFHIRMedicationStatement func(childComplexity int, params map[string]interface{}) int
		SearchFHIRObservation         func(childComplexity int, params map[string]interface{}) int
		SearchFHIRServiceRequest      func(childComplexity int, params map[string]interface{}) int
		VisitSummary                  func(childComplexity int, encounterID string) int
		__resolve__service            func(childComplexity int) int
		__resolve_entities            func(childComplexity int, representations []map[string]interface{}) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type EntityResolver interface {
	FindDummyByID(ctx context.Context, id string) (*domain.Dummy, error)
}
type MutationResolver interface {
	StartEpisodeByOtp(ctx context.Context, input domain.OTPEpisodeCreationInput) (*domain.EpisodeOfCarePayload, error)
	StartEpisodeByBreakGlass(ctx context.Context, input domain.BreakGlassEpisodeCreationInput) (*domain.EpisodeOfCarePayload, error)
	UpgradeEpisode(ctx context.Context, input domain.OTPEpisodeUpgradeInput) (*domain.EpisodeOfCarePayload, error)
	EndEpisode(ctx context.Context, episodeID string) (bool, error)
	StartEncounter(ctx context.Context, episodeID string) (string, error)
	EndEncounter(ctx context.Context, encounterID string) (bool, error)
	RegisterPatient(ctx context.Context, input domain.SimplePatientRegistrationInput) (*domain.PatientPayload, error)
	RegisterUser(ctx context.Context, input domain.SimplePatientRegistrationInput) (*domain.PatientPayload, error)
	UpdatePatient(ctx context.Context, input domain.SimplePatientRegistrationInput) (*domain.PatientPayload, error)
	AddNextOfKin(ctx context.Context, input domain.SimpleNextOfKinInput) (*domain.PatientPayload, error)
	AddNhif(ctx context.Context, input *domain.SimpleNHIFInput) (*domain.PatientPayload, error)
	CreateUpdatePatientExtraInformation(ctx context.Context, input domain.PatientExtraInformationInput) (bool, error)
	CreateFHIRMedicationRequest(ctx context.Context, input domain.FHIRMedicationRequestInput) (*domain.FHIRMedicationRequestRelayPayload, error)
	UpdateFHIRMedicationRequest(ctx context.Context, input domain.FHIRMedicationRequestInput) (*domain.FHIRMedicationRequestRelayPayload, error)
	DeleteFHIRMedicationRequest(ctx context.Context, id string) (bool, error)
	CreateFHIRAllergyIntolerance(ctx context.Context, input domain.FHIRAllergyIntoleranceInput) (*domain.FHIRAllergyIntoleranceRelayPayload, error)
	UpdateFHIRAllergyIntolerance(ctx context.Context, input domain.FHIRAllergyIntoleranceInput) (*domain.FHIRAllergyIntoleranceRelayPayload, error)
	CreateFHIRCondition(ctx context.Context, input domain.FHIRConditionInput) (*domain.FHIRConditionRelayPayload, error)
	UpdateFHIRCondition(ctx context.Context, input domain.FHIRConditionInput) (*domain.FHIRConditionRelayPayload, error)
	CreateFHIRServiceRequest(ctx context.Context, input domain.FHIRServiceRequestInput) (*domain.FHIRServiceRequestRelayPayload, error)
	DeleteFHIRServiceRequest(ctx context.Context, id string) (bool, error)
	CreateFHIRObservation(ctx context.Context, input domain.FHIRObservationInput) (*domain.FHIRObservationRelayPayload, error)
	CreateFHIRComposition(ctx context.Context, input domain.FHIRCompositionInput) (*domain.FHIRCompositionRelayPayload, error)
	UpdateFHIRComposition(ctx context.Context, input domain.FHIRCompositionInput) (*domain.FHIRCompositionRelayPayload, error)
	DeleteFHIRComposition(ctx context.Context, id string) (bool, error)
	DeleteFHIRPatient(ctx context.Context, id string) (bool, error)
	DeleteFHIRObservation(ctx context.Context, id string) (bool, error)
}
type QueryResolver interface {
	FindPatientsByMsisdn(ctx context.Context, msisdn string) (*domain.PatientConnection, error)
	FindPatients(ctx context.Context, search string) (*domain.PatientConnection, error)
	GetPatient(ctx context.Context, id string) (*domain.PatientPayload, error)
	OpenEpisodes(ctx context.Context, patientReference string) ([]*domain.FHIREpisodeOfCare, error)
	OpenOrganizationEpisodes(ctx context.Context, providerSladeCode string) ([]*domain.FHIREpisodeOfCare, error)
	ProblemSummary(ctx context.Context, patientID string) ([]string, error)
	VisitSummary(ctx context.Context, encounterID string) (map[string]interface{}, error)
	PatientTimelineWithCount(ctx context.Context, episodeID string, count int) ([]map[string]interface{}, error)
	PatientTimeline(ctx context.Context, patientID string, count int) ([]map[string]interface{}, error)
	SearchFHIREncounter(ctx context.Context, params map[string]interface{}) (*domain.FHIREncounterRelayConnection, error)
	SearchFHIRCondition(ctx context.Context, params map[string]interface{}) (*domain.FHIRConditionRelayConnection, error)
	SearchFHIRAllergyIntolerance(ctx context.Context, params map[string]interface{}) (*domain.FHIRAllergyIntoleranceRelayConnection, error)
	SearchFHIRObservation(ctx context.Context, params map[string]interface{}) (*domain.FHIRObservationRelayConnection, error)
	SearchFHIRMedicationStatement(ctx context.Context, params map[string]interface{}) (*domain.FHIRMedicationStatementRelayConnection, error)
	SearchFHIRMedicationRequest(ctx context.Context, params map[string]interface{}) (*domain.FHIRMedicationRequestRelayConnection, error)
	SearchFHIRServiceRequest(ctx context.Context, params map[string]interface{}) (*domain.FHIRServiceRequestRelayConnection, error)
	SearchFHIRComposition(ctx context.Context, params map[string]interface{}) (*domain.FHIRCompositionRelayConnection, error)
	AllergySummary(ctx context.Context, patientID string) ([]string, error)
	GetMedicalData(ctx context.Context, patientID string) (*domain.MedicalData, error)
	ListConcepts(ctx context.Context, org string, source string, verbose bool, q *string, sortAsc *string, sortDesc *string, conceptClass *string, dataType *string, locale *string, includeRetired *bool, includeMappings *bool, includeInverseMappings *bool) ([]map[string]interface{}, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Dummy.id":
		if e.complexity.Dummy.ID == nil {
			break
		}

		return e.complexity.Dummy.ID(childComplexity), true

	case "Entity.findDummyByID":
		if e.complexity.Entity.FindDummyByID == nil {
			break
		}

		args, err := ec.field_Entity_findDummyByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDummyByID(childComplexity, args["id"].(string)), true

	case "EpisodeOfCarePayload.episodeOfCare":
		if e.complexity.EpisodeOfCarePayload.EpisodeOfCare == nil {
			break
		}

		return e.complexity.EpisodeOfCarePayload.EpisodeOfCare(childComplexity), true

	case "EpisodeOfCarePayload.totalVisits":
		if e.complexity.EpisodeOfCarePayload.TotalVisits == nil {
			break
		}

		return e.complexity.EpisodeOfCarePayload.TotalVisits(childComplexity), true

	case "FHIRAddress.City":
		if e.complexity.FHIRAddress.City == nil {
			break
		}

		return e.complexity.FHIRAddress.City(childComplexity), true

	case "FHIRAddress.Country":
		if e.complexity.FHIRAddress.Country == nil {
			break
		}

		return e.complexity.FHIRAddress.Country(childComplexity), true

	case "FHIRAddress.District":
		if e.complexity.FHIRAddress.District == nil {
			break
		}

		return e.complexity.FHIRAddress.District(childComplexity), true

	case "FHIRAddress.ID":
		if e.complexity.FHIRAddress.ID == nil {
			break
		}

		return e.complexity.FHIRAddress.ID(childComplexity), true

	case "FHIRAddress.Line":
		if e.complexity.FHIRAddress.Line == nil {
			break
		}

		return e.complexity.FHIRAddress.Line(childComplexity), true

	case "FHIRAddress.Period":
		if e.complexity.FHIRAddress.Period == nil {
			break
		}

		return e.complexity.FHIRAddress.Period(childComplexity), true

	case "FHIRAddress.PostalCode":
		if e.complexity.FHIRAddress.PostalCode == nil {
			break
		}

		return e.complexity.FHIRAddress.PostalCode(childComplexity), true

	case "FHIRAddress.State":
		if e.complexity.FHIRAddress.State == nil {
			break
		}

		return e.complexity.FHIRAddress.State(childComplexity), true

	case "FHIRAddress.Text":
		if e.complexity.FHIRAddress.Text == nil {
			break
		}

		return e.complexity.FHIRAddress.Text(childComplexity), true

	case "FHIRAddress.Type":
		if e.complexity.FHIRAddress.Type == nil {
			break
		}

		return e.complexity.FHIRAddress.Type(childComplexity), true

	case "FHIRAddress.Use":
		if e.complexity.FHIRAddress.Use == nil {
			break
		}

		return e.complexity.FHIRAddress.Use(childComplexity), true

	case "FHIRAge.Code":
		if e.complexity.FHIRAge.Code == nil {
			break
		}

		return e.complexity.FHIRAge.Code(childComplexity), true

	case "FHIRAge.Comparator":
		if e.complexity.FHIRAge.Comparator == nil {
			break
		}

		return e.complexity.FHIRAge.Comparator(childComplexity), true

	case "FHIRAge.ID":
		if e.complexity.FHIRAge.ID == nil {
			break
		}

		return e.complexity.FHIRAge.ID(childComplexity), true

	case "FHIRAge.System":
		if e.complexity.FHIRAge.System == nil {
			break
		}

		return e.complexity.FHIRAge.System(childComplexity), true

	case "FHIRAge.Unit":
		if e.complexity.FHIRAge.Unit == nil {
			break
		}

		return e.complexity.FHIRAge.Unit(childComplexity), true

	case "FHIRAge.Value":
		if e.complexity.FHIRAge.Value == nil {
			break
		}

		return e.complexity.FHIRAge.Value(childComplexity), true

	case "FHIRAllergyIntolerance.Asserter":
		if e.complexity.FHIRAllergyIntolerance.Asserter == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Asserter(childComplexity), true

	case "FHIRAllergyIntolerance.Category":
		if e.complexity.FHIRAllergyIntolerance.Category == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Category(childComplexity), true

	case "FHIRAllergyIntolerance.ClinicalStatus":
		if e.complexity.FHIRAllergyIntolerance.ClinicalStatus == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.ClinicalStatus(childComplexity), true

	case "FHIRAllergyIntolerance.Code":
		if e.complexity.FHIRAllergyIntolerance.Code == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Code(childComplexity), true

	case "FHIRAllergyIntolerance.Criticality":
		if e.complexity.FHIRAllergyIntolerance.Criticality == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Criticality(childComplexity), true

	case "FHIRAllergyIntolerance.Encounter":
		if e.complexity.FHIRAllergyIntolerance.Encounter == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Encounter(childComplexity), true

	case "FHIRAllergyIntolerance.ID":
		if e.complexity.FHIRAllergyIntolerance.ID == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.ID(childComplexity), true

	case "FHIRAllergyIntolerance.Identifier":
		if e.complexity.FHIRAllergyIntolerance.Identifier == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Identifier(childComplexity), true

	case "FHIRAllergyIntolerance.LastOccurrence":
		if e.complexity.FHIRAllergyIntolerance.LastOccurrence == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.LastOccurrence(childComplexity), true

	case "FHIRAllergyIntolerance.Note":
		if e.complexity.FHIRAllergyIntolerance.Note == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Note(childComplexity), true

	case "FHIRAllergyIntolerance.OnsetAge":
		if e.complexity.FHIRAllergyIntolerance.OnsetAge == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.OnsetAge(childComplexity), true

	case "FHIRAllergyIntolerance.OnsetDateTime":
		if e.complexity.FHIRAllergyIntolerance.OnsetDateTime == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.OnsetDateTime(childComplexity), true

	case "FHIRAllergyIntolerance.OnsetPeriod":
		if e.complexity.FHIRAllergyIntolerance.OnsetPeriod == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.OnsetPeriod(childComplexity), true

	case "FHIRAllergyIntolerance.OnsetRange":
		if e.complexity.FHIRAllergyIntolerance.OnsetRange == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.OnsetRange(childComplexity), true

	case "FHIRAllergyIntolerance.OnsetString":
		if e.complexity.FHIRAllergyIntolerance.OnsetString == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.OnsetString(childComplexity), true

	case "FHIRAllergyIntolerance.Patient":
		if e.complexity.FHIRAllergyIntolerance.Patient == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Patient(childComplexity), true

	case "FHIRAllergyIntolerance.Reaction":
		if e.complexity.FHIRAllergyIntolerance.Reaction == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Reaction(childComplexity), true

	case "FHIRAllergyIntolerance.RecordedDate":
		if e.complexity.FHIRAllergyIntolerance.RecordedDate == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.RecordedDate(childComplexity), true

	case "FHIRAllergyIntolerance.Recorder":
		if e.complexity.FHIRAllergyIntolerance.Recorder == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Recorder(childComplexity), true

	case "FHIRAllergyIntolerance.Text":
		if e.complexity.FHIRAllergyIntolerance.Text == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Text(childComplexity), true

	case "FHIRAllergyIntolerance.Type":
		if e.complexity.FHIRAllergyIntolerance.Type == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.Type(childComplexity), true

	case "FHIRAllergyIntolerance.VerificationStatus":
		if e.complexity.FHIRAllergyIntolerance.VerificationStatus == nil {
			break
		}

		return e.complexity.FHIRAllergyIntolerance.VerificationStatus(childComplexity), true

	case "FHIRAllergyIntoleranceRelayConnection.edges":
		if e.complexity.FHIRAllergyIntoleranceRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRAllergyIntoleranceRelayConnection.Edges(childComplexity), true

	case "FHIRAllergyIntoleranceRelayConnection.pageInfo":
		if e.complexity.FHIRAllergyIntoleranceRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRAllergyIntoleranceRelayConnection.PageInfo(childComplexity), true

	case "FHIRAllergyIntoleranceRelayEdge.cursor":
		if e.complexity.FHIRAllergyIntoleranceRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRAllergyIntoleranceRelayEdge.Cursor(childComplexity), true

	case "FHIRAllergyIntoleranceRelayEdge.node":
		if e.complexity.FHIRAllergyIntoleranceRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRAllergyIntoleranceRelayEdge.Node(childComplexity), true

	case "FHIRAllergyIntoleranceRelayPayload.resource":
		if e.complexity.FHIRAllergyIntoleranceRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRAllergyIntoleranceRelayPayload.Resource(childComplexity), true

	case "FHIRAllergyintoleranceReaction.Description":
		if e.complexity.FHIRAllergyintoleranceReaction.Description == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.Description(childComplexity), true

	case "FHIRAllergyintoleranceReaction.ExposureRoute":
		if e.complexity.FHIRAllergyintoleranceReaction.ExposureRoute == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.ExposureRoute(childComplexity), true

	case "FHIRAllergyintoleranceReaction.ID":
		if e.complexity.FHIRAllergyintoleranceReaction.ID == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.ID(childComplexity), true

	case "FHIRAllergyintoleranceReaction.Manifestation":
		if e.complexity.FHIRAllergyintoleranceReaction.Manifestation == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.Manifestation(childComplexity), true

	case "FHIRAllergyintoleranceReaction.Note":
		if e.complexity.FHIRAllergyintoleranceReaction.Note == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.Note(childComplexity), true

	case "FHIRAllergyintoleranceReaction.Onset":
		if e.complexity.FHIRAllergyintoleranceReaction.Onset == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.Onset(childComplexity), true

	case "FHIRAllergyintoleranceReaction.Severity":
		if e.complexity.FHIRAllergyintoleranceReaction.Severity == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.Severity(childComplexity), true

	case "FHIRAllergyintoleranceReaction.Substance":
		if e.complexity.FHIRAllergyintoleranceReaction.Substance == nil {
			break
		}

		return e.complexity.FHIRAllergyintoleranceReaction.Substance(childComplexity), true

	case "FHIRAnnotation.AuthorReference":
		if e.complexity.FHIRAnnotation.AuthorReference == nil {
			break
		}

		return e.complexity.FHIRAnnotation.AuthorReference(childComplexity), true

	case "FHIRAnnotation.AuthorString":
		if e.complexity.FHIRAnnotation.AuthorString == nil {
			break
		}

		return e.complexity.FHIRAnnotation.AuthorString(childComplexity), true

	case "FHIRAnnotation.ID":
		if e.complexity.FHIRAnnotation.ID == nil {
			break
		}

		return e.complexity.FHIRAnnotation.ID(childComplexity), true

	case "FHIRAnnotation.Text":
		if e.complexity.FHIRAnnotation.Text == nil {
			break
		}

		return e.complexity.FHIRAnnotation.Text(childComplexity), true

	case "FHIRAnnotation.Time":
		if e.complexity.FHIRAnnotation.Time == nil {
			break
		}

		return e.complexity.FHIRAnnotation.Time(childComplexity), true

	case "FHIRAttachment.ContentType":
		if e.complexity.FHIRAttachment.ContentType == nil {
			break
		}

		return e.complexity.FHIRAttachment.ContentType(childComplexity), true

	case "FHIRAttachment.Creation":
		if e.complexity.FHIRAttachment.Creation == nil {
			break
		}

		return e.complexity.FHIRAttachment.Creation(childComplexity), true

	case "FHIRAttachment.Data":
		if e.complexity.FHIRAttachment.Data == nil {
			break
		}

		return e.complexity.FHIRAttachment.Data(childComplexity), true

	case "FHIRAttachment.Hash":
		if e.complexity.FHIRAttachment.Hash == nil {
			break
		}

		return e.complexity.FHIRAttachment.Hash(childComplexity), true

	case "FHIRAttachment.ID":
		if e.complexity.FHIRAttachment.ID == nil {
			break
		}

		return e.complexity.FHIRAttachment.ID(childComplexity), true

	case "FHIRAttachment.Language":
		if e.complexity.FHIRAttachment.Language == nil {
			break
		}

		return e.complexity.FHIRAttachment.Language(childComplexity), true

	case "FHIRAttachment.Size":
		if e.complexity.FHIRAttachment.Size == nil {
			break
		}

		return e.complexity.FHIRAttachment.Size(childComplexity), true

	case "FHIRAttachment.Title":
		if e.complexity.FHIRAttachment.Title == nil {
			break
		}

		return e.complexity.FHIRAttachment.Title(childComplexity), true

	case "FHIRAttachment.URL":
		if e.complexity.FHIRAttachment.URL == nil {
			break
		}

		return e.complexity.FHIRAttachment.URL(childComplexity), true

	case "FHIRCodeableConcept.Coding":
		if e.complexity.FHIRCodeableConcept.Coding == nil {
			break
		}

		return e.complexity.FHIRCodeableConcept.Coding(childComplexity), true

	case "FHIRCodeableConcept.ID":
		if e.complexity.FHIRCodeableConcept.ID == nil {
			break
		}

		return e.complexity.FHIRCodeableConcept.ID(childComplexity), true

	case "FHIRCodeableConcept.Text":
		if e.complexity.FHIRCodeableConcept.Text == nil {
			break
		}

		return e.complexity.FHIRCodeableConcept.Text(childComplexity), true

	case "FHIRCoding.Code":
		if e.complexity.FHIRCoding.Code == nil {
			break
		}

		return e.complexity.FHIRCoding.Code(childComplexity), true

	case "FHIRCoding.Display":
		if e.complexity.FHIRCoding.Display == nil {
			break
		}

		return e.complexity.FHIRCoding.Display(childComplexity), true

	case "FHIRCoding.ID":
		if e.complexity.FHIRCoding.ID == nil {
			break
		}

		return e.complexity.FHIRCoding.ID(childComplexity), true

	case "FHIRCoding.System":
		if e.complexity.FHIRCoding.System == nil {
			break
		}

		return e.complexity.FHIRCoding.System(childComplexity), true

	case "FHIRCoding.UserSelected":
		if e.complexity.FHIRCoding.UserSelected == nil {
			break
		}

		return e.complexity.FHIRCoding.UserSelected(childComplexity), true

	case "FHIRCoding.Version":
		if e.complexity.FHIRCoding.Version == nil {
			break
		}

		return e.complexity.FHIRCoding.Version(childComplexity), true

	case "FHIRComposition.Attester":
		if e.complexity.FHIRComposition.Attester == nil {
			break
		}

		return e.complexity.FHIRComposition.Attester(childComplexity), true

	case "FHIRComposition.Author":
		if e.complexity.FHIRComposition.Author == nil {
			break
		}

		return e.complexity.FHIRComposition.Author(childComplexity), true

	case "FHIRComposition.Category":
		if e.complexity.FHIRComposition.Category == nil {
			break
		}

		return e.complexity.FHIRComposition.Category(childComplexity), true

	case "FHIRComposition.Confidentiality":
		if e.complexity.FHIRComposition.Confidentiality == nil {
			break
		}

		return e.complexity.FHIRComposition.Confidentiality(childComplexity), true

	case "FHIRComposition.Custodian":
		if e.complexity.FHIRComposition.Custodian == nil {
			break
		}

		return e.complexity.FHIRComposition.Custodian(childComplexity), true

	case "FHIRComposition.Date":
		if e.complexity.FHIRComposition.Date == nil {
			break
		}

		return e.complexity.FHIRComposition.Date(childComplexity), true

	case "FHIRComposition.Encounter":
		if e.complexity.FHIRComposition.Encounter == nil {
			break
		}

		return e.complexity.FHIRComposition.Encounter(childComplexity), true

	case "FHIRComposition.Event":
		if e.complexity.FHIRComposition.Event == nil {
			break
		}

		return e.complexity.FHIRComposition.Event(childComplexity), true

	case "FHIRComposition.ID":
		if e.complexity.FHIRComposition.ID == nil {
			break
		}

		return e.complexity.FHIRComposition.ID(childComplexity), true

	case "FHIRComposition.Identifier":
		if e.complexity.FHIRComposition.Identifier == nil {
			break
		}

		return e.complexity.FHIRComposition.Identifier(childComplexity), true

	case "FHIRComposition.RelatesTo":
		if e.complexity.FHIRComposition.RelatesTo == nil {
			break
		}

		return e.complexity.FHIRComposition.RelatesTo(childComplexity), true

	case "FHIRComposition.Section":
		if e.complexity.FHIRComposition.Section == nil {
			break
		}

		return e.complexity.FHIRComposition.Section(childComplexity), true

	case "FHIRComposition.Status":
		if e.complexity.FHIRComposition.Status == nil {
			break
		}

		return e.complexity.FHIRComposition.Status(childComplexity), true

	case "FHIRComposition.Subject":
		if e.complexity.FHIRComposition.Subject == nil {
			break
		}

		return e.complexity.FHIRComposition.Subject(childComplexity), true

	case "FHIRComposition.Text":
		if e.complexity.FHIRComposition.Text == nil {
			break
		}

		return e.complexity.FHIRComposition.Text(childComplexity), true

	case "FHIRComposition.Title":
		if e.complexity.FHIRComposition.Title == nil {
			break
		}

		return e.complexity.FHIRComposition.Title(childComplexity), true

	case "FHIRComposition.Type":
		if e.complexity.FHIRComposition.Type == nil {
			break
		}

		return e.complexity.FHIRComposition.Type(childComplexity), true

	case "FHIRCompositionAttester.ID":
		if e.complexity.FHIRCompositionAttester.ID == nil {
			break
		}

		return e.complexity.FHIRCompositionAttester.ID(childComplexity), true

	case "FHIRCompositionAttester.Mode":
		if e.complexity.FHIRCompositionAttester.Mode == nil {
			break
		}

		return e.complexity.FHIRCompositionAttester.Mode(childComplexity), true

	case "FHIRCompositionAttester.Party":
		if e.complexity.FHIRCompositionAttester.Party == nil {
			break
		}

		return e.complexity.FHIRCompositionAttester.Party(childComplexity), true

	case "FHIRCompositionAttester.Time":
		if e.complexity.FHIRCompositionAttester.Time == nil {
			break
		}

		return e.complexity.FHIRCompositionAttester.Time(childComplexity), true

	case "FHIRCompositionEvent.Code":
		if e.complexity.FHIRCompositionEvent.Code == nil {
			break
		}

		return e.complexity.FHIRCompositionEvent.Code(childComplexity), true

	case "FHIRCompositionEvent.Detail":
		if e.complexity.FHIRCompositionEvent.Detail == nil {
			break
		}

		return e.complexity.FHIRCompositionEvent.Detail(childComplexity), true

	case "FHIRCompositionEvent.ID":
		if e.complexity.FHIRCompositionEvent.ID == nil {
			break
		}

		return e.complexity.FHIRCompositionEvent.ID(childComplexity), true

	case "FHIRCompositionEvent.Period":
		if e.complexity.FHIRCompositionEvent.Period == nil {
			break
		}

		return e.complexity.FHIRCompositionEvent.Period(childComplexity), true

	case "FHIRCompositionRelatesto.Code":
		if e.complexity.FHIRCompositionRelatesto.Code == nil {
			break
		}

		return e.complexity.FHIRCompositionRelatesto.Code(childComplexity), true

	case "FHIRCompositionRelatesto.ID":
		if e.complexity.FHIRCompositionRelatesto.ID == nil {
			break
		}

		return e.complexity.FHIRCompositionRelatesto.ID(childComplexity), true

	case "FHIRCompositionRelatesto.TargetIdentifier":
		if e.complexity.FHIRCompositionRelatesto.TargetIdentifier == nil {
			break
		}

		return e.complexity.FHIRCompositionRelatesto.TargetIdentifier(childComplexity), true

	case "FHIRCompositionRelatesto.TargetReference":
		if e.complexity.FHIRCompositionRelatesto.TargetReference == nil {
			break
		}

		return e.complexity.FHIRCompositionRelatesto.TargetReference(childComplexity), true

	case "FHIRCompositionRelayConnection.edges":
		if e.complexity.FHIRCompositionRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRCompositionRelayConnection.Edges(childComplexity), true

	case "FHIRCompositionRelayConnection.pageInfo":
		if e.complexity.FHIRCompositionRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRCompositionRelayConnection.PageInfo(childComplexity), true

	case "FHIRCompositionRelayEdge.cursor":
		if e.complexity.FHIRCompositionRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRCompositionRelayEdge.Cursor(childComplexity), true

	case "FHIRCompositionRelayEdge.node":
		if e.complexity.FHIRCompositionRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRCompositionRelayEdge.Node(childComplexity), true

	case "FHIRCompositionRelayPayload.resource":
		if e.complexity.FHIRCompositionRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRCompositionRelayPayload.Resource(childComplexity), true

	case "FHIRCompositionSection.Author":
		if e.complexity.FHIRCompositionSection.Author == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Author(childComplexity), true

	case "FHIRCompositionSection.Code":
		if e.complexity.FHIRCompositionSection.Code == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Code(childComplexity), true

	case "FHIRCompositionSection.EmptyReason":
		if e.complexity.FHIRCompositionSection.EmptyReason == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.EmptyReason(childComplexity), true

	case "FHIRCompositionSection.Entry":
		if e.complexity.FHIRCompositionSection.Entry == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Entry(childComplexity), true

	case "FHIRCompositionSection.Focus":
		if e.complexity.FHIRCompositionSection.Focus == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Focus(childComplexity), true

	case "FHIRCompositionSection.ID":
		if e.complexity.FHIRCompositionSection.ID == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.ID(childComplexity), true

	case "FHIRCompositionSection.Mode":
		if e.complexity.FHIRCompositionSection.Mode == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Mode(childComplexity), true

	case "FHIRCompositionSection.OrderedBy":
		if e.complexity.FHIRCompositionSection.OrderedBy == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.OrderedBy(childComplexity), true

	case "FHIRCompositionSection.Section":
		if e.complexity.FHIRCompositionSection.Section == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Section(childComplexity), true

	case "FHIRCompositionSection.Text":
		if e.complexity.FHIRCompositionSection.Text == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Text(childComplexity), true

	case "FHIRCompositionSection.Title":
		if e.complexity.FHIRCompositionSection.Title == nil {
			break
		}

		return e.complexity.FHIRCompositionSection.Title(childComplexity), true

	case "FHIRCondition.AbatementAge":
		if e.complexity.FHIRCondition.AbatementAge == nil {
			break
		}

		return e.complexity.FHIRCondition.AbatementAge(childComplexity), true

	case "FHIRCondition.AbatementDateTime":
		if e.complexity.FHIRCondition.AbatementDateTime == nil {
			break
		}

		return e.complexity.FHIRCondition.AbatementDateTime(childComplexity), true

	case "FHIRCondition.AbatementPeriod":
		if e.complexity.FHIRCondition.AbatementPeriod == nil {
			break
		}

		return e.complexity.FHIRCondition.AbatementPeriod(childComplexity), true

	case "FHIRCondition.AbatementRange":
		if e.complexity.FHIRCondition.AbatementRange == nil {
			break
		}

		return e.complexity.FHIRCondition.AbatementRange(childComplexity), true

	case "FHIRCondition.AbatementString":
		if e.complexity.FHIRCondition.AbatementString == nil {
			break
		}

		return e.complexity.FHIRCondition.AbatementString(childComplexity), true

	case "FHIRCondition.Asserter":
		if e.complexity.FHIRCondition.Asserter == nil {
			break
		}

		return e.complexity.FHIRCondition.Asserter(childComplexity), true

	case "FHIRCondition.BodySite":
		if e.complexity.FHIRCondition.BodySite == nil {
			break
		}

		return e.complexity.FHIRCondition.BodySite(childComplexity), true

	case "FHIRCondition.Category":
		if e.complexity.FHIRCondition.Category == nil {
			break
		}

		return e.complexity.FHIRCondition.Category(childComplexity), true

	case "FHIRCondition.ClinicalStatus":
		if e.complexity.FHIRCondition.ClinicalStatus == nil {
			break
		}

		return e.complexity.FHIRCondition.ClinicalStatus(childComplexity), true

	case "FHIRCondition.Code":
		if e.complexity.FHIRCondition.Code == nil {
			break
		}

		return e.complexity.FHIRCondition.Code(childComplexity), true

	case "FHIRCondition.Encounter":
		if e.complexity.FHIRCondition.Encounter == nil {
			break
		}

		return e.complexity.FHIRCondition.Encounter(childComplexity), true

	case "FHIRCondition.Evidence":
		if e.complexity.FHIRCondition.Evidence == nil {
			break
		}

		return e.complexity.FHIRCondition.Evidence(childComplexity), true

	case "FHIRCondition.ID":
		if e.complexity.FHIRCondition.ID == nil {
			break
		}

		return e.complexity.FHIRCondition.ID(childComplexity), true

	case "FHIRCondition.Identifier":
		if e.complexity.FHIRCondition.Identifier == nil {
			break
		}

		return e.complexity.FHIRCondition.Identifier(childComplexity), true

	case "FHIRCondition.Note":
		if e.complexity.FHIRCondition.Note == nil {
			break
		}

		return e.complexity.FHIRCondition.Note(childComplexity), true

	case "FHIRCondition.OnsetAge":
		if e.complexity.FHIRCondition.OnsetAge == nil {
			break
		}

		return e.complexity.FHIRCondition.OnsetAge(childComplexity), true

	case "FHIRCondition.OnsetDateTime":
		if e.complexity.FHIRCondition.OnsetDateTime == nil {
			break
		}

		return e.complexity.FHIRCondition.OnsetDateTime(childComplexity), true

	case "FHIRCondition.OnsetPeriod":
		if e.complexity.FHIRCondition.OnsetPeriod == nil {
			break
		}

		return e.complexity.FHIRCondition.OnsetPeriod(childComplexity), true

	case "FHIRCondition.OnsetRange":
		if e.complexity.FHIRCondition.OnsetRange == nil {
			break
		}

		return e.complexity.FHIRCondition.OnsetRange(childComplexity), true

	case "FHIRCondition.OnsetString":
		if e.complexity.FHIRCondition.OnsetString == nil {
			break
		}

		return e.complexity.FHIRCondition.OnsetString(childComplexity), true

	case "FHIRCondition.RecordedDate":
		if e.complexity.FHIRCondition.RecordedDate == nil {
			break
		}

		return e.complexity.FHIRCondition.RecordedDate(childComplexity), true

	case "FHIRCondition.Recorder":
		if e.complexity.FHIRCondition.Recorder == nil {
			break
		}

		return e.complexity.FHIRCondition.Recorder(childComplexity), true

	case "FHIRCondition.Severity":
		if e.complexity.FHIRCondition.Severity == nil {
			break
		}

		return e.complexity.FHIRCondition.Severity(childComplexity), true

	case "FHIRCondition.Stage":
		if e.complexity.FHIRCondition.Stage == nil {
			break
		}

		return e.complexity.FHIRCondition.Stage(childComplexity), true

	case "FHIRCondition.Subject":
		if e.complexity.FHIRCondition.Subject == nil {
			break
		}

		return e.complexity.FHIRCondition.Subject(childComplexity), true

	case "FHIRCondition.Text":
		if e.complexity.FHIRCondition.Text == nil {
			break
		}

		return e.complexity.FHIRCondition.Text(childComplexity), true

	case "FHIRCondition.VerificationStatus":
		if e.complexity.FHIRCondition.VerificationStatus == nil {
			break
		}

		return e.complexity.FHIRCondition.VerificationStatus(childComplexity), true

	case "FHIRConditionEvidence.Code":
		if e.complexity.FHIRConditionEvidence.Code == nil {
			break
		}

		return e.complexity.FHIRConditionEvidence.Code(childComplexity), true

	case "FHIRConditionEvidence.Detail":
		if e.complexity.FHIRConditionEvidence.Detail == nil {
			break
		}

		return e.complexity.FHIRConditionEvidence.Detail(childComplexity), true

	case "FHIRConditionEvidence.ID":
		if e.complexity.FHIRConditionEvidence.ID == nil {
			break
		}

		return e.complexity.FHIRConditionEvidence.ID(childComplexity), true

	case "FHIRConditionRelayConnection.edges":
		if e.complexity.FHIRConditionRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRConditionRelayConnection.Edges(childComplexity), true

	case "FHIRConditionRelayConnection.pageInfo":
		if e.complexity.FHIRConditionRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRConditionRelayConnection.PageInfo(childComplexity), true

	case "FHIRConditionRelayEdge.cursor":
		if e.complexity.FHIRConditionRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRConditionRelayEdge.Cursor(childComplexity), true

	case "FHIRConditionRelayEdge.node":
		if e.complexity.FHIRConditionRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRConditionRelayEdge.Node(childComplexity), true

	case "FHIRConditionRelayPayload.resource":
		if e.complexity.FHIRConditionRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRConditionRelayPayload.Resource(childComplexity), true

	case "FHIRConditionStage.Assessment":
		if e.complexity.FHIRConditionStage.Assessment == nil {
			break
		}

		return e.complexity.FHIRConditionStage.Assessment(childComplexity), true

	case "FHIRConditionStage.ID":
		if e.complexity.FHIRConditionStage.ID == nil {
			break
		}

		return e.complexity.FHIRConditionStage.ID(childComplexity), true

	case "FHIRConditionStage.Summary":
		if e.complexity.FHIRConditionStage.Summary == nil {
			break
		}

		return e.complexity.FHIRConditionStage.Summary(childComplexity), true

	case "FHIRConditionStage.Type":
		if e.complexity.FHIRConditionStage.Type == nil {
			break
		}

		return e.complexity.FHIRConditionStage.Type(childComplexity), true

	case "FHIRContactPoint.ID":
		if e.complexity.FHIRContactPoint.ID == nil {
			break
		}

		return e.complexity.FHIRContactPoint.ID(childComplexity), true

	case "FHIRContactPoint.Period":
		if e.complexity.FHIRContactPoint.Period == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Period(childComplexity), true

	case "FHIRContactPoint.Rank":
		if e.complexity.FHIRContactPoint.Rank == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Rank(childComplexity), true

	case "FHIRContactPoint.System":
		if e.complexity.FHIRContactPoint.System == nil {
			break
		}

		return e.complexity.FHIRContactPoint.System(childComplexity), true

	case "FHIRContactPoint.Use":
		if e.complexity.FHIRContactPoint.Use == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Use(childComplexity), true

	case "FHIRContactPoint.Value":
		if e.complexity.FHIRContactPoint.Value == nil {
			break
		}

		return e.complexity.FHIRContactPoint.Value(childComplexity), true

	case "FHIRDosage.AdditionalInstruction":
		if e.complexity.FHIRDosage.AdditionalInstruction == nil {
			break
		}

		return e.complexity.FHIRDosage.AdditionalInstruction(childComplexity), true

	case "FHIRDosage.AsNeededBoolean":
		if e.complexity.FHIRDosage.AsNeededBoolean == nil {
			break
		}

		return e.complexity.FHIRDosage.AsNeededBoolean(childComplexity), true

	case "FHIRDosage.AsNeededCodeableConcept":
		if e.complexity.FHIRDosage.AsNeededCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRDosage.AsNeededCodeableConcept(childComplexity), true

	case "FHIRDosage.DoseAndRate":
		if e.complexity.FHIRDosage.DoseAndRate == nil {
			break
		}

		return e.complexity.FHIRDosage.DoseAndRate(childComplexity), true

	case "FHIRDosage.ID":
		if e.complexity.FHIRDosage.ID == nil {
			break
		}

		return e.complexity.FHIRDosage.ID(childComplexity), true

	case "FHIRDosage.MaxDosePerAdministration":
		if e.complexity.FHIRDosage.MaxDosePerAdministration == nil {
			break
		}

		return e.complexity.FHIRDosage.MaxDosePerAdministration(childComplexity), true

	case "FHIRDosage.MaxDosePerLifetime":
		if e.complexity.FHIRDosage.MaxDosePerLifetime == nil {
			break
		}

		return e.complexity.FHIRDosage.MaxDosePerLifetime(childComplexity), true

	case "FHIRDosage.MaxDosePerPeriod":
		if e.complexity.FHIRDosage.MaxDosePerPeriod == nil {
			break
		}

		return e.complexity.FHIRDosage.MaxDosePerPeriod(childComplexity), true

	case "FHIRDosage.Method":
		if e.complexity.FHIRDosage.Method == nil {
			break
		}

		return e.complexity.FHIRDosage.Method(childComplexity), true

	case "FHIRDosage.PatientInstruction":
		if e.complexity.FHIRDosage.PatientInstruction == nil {
			break
		}

		return e.complexity.FHIRDosage.PatientInstruction(childComplexity), true

	case "FHIRDosage.Route":
		if e.complexity.FHIRDosage.Route == nil {
			break
		}

		return e.complexity.FHIRDosage.Route(childComplexity), true

	case "FHIRDosage.Sequence":
		if e.complexity.FHIRDosage.Sequence == nil {
			break
		}

		return e.complexity.FHIRDosage.Sequence(childComplexity), true

	case "FHIRDosage.Site":
		if e.complexity.FHIRDosage.Site == nil {
			break
		}

		return e.complexity.FHIRDosage.Site(childComplexity), true

	case "FHIRDosage.Text":
		if e.complexity.FHIRDosage.Text == nil {
			break
		}

		return e.complexity.FHIRDosage.Text(childComplexity), true

	case "FHIRDosage.Timing":
		if e.complexity.FHIRDosage.Timing == nil {
			break
		}

		return e.complexity.FHIRDosage.Timing(childComplexity), true

	case "FHIRDosageDoseandrate.DoseQuantity":
		if e.complexity.FHIRDosageDoseandrate.DoseQuantity == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.DoseQuantity(childComplexity), true

	case "FHIRDosageDoseandrate.DoseRange":
		if e.complexity.FHIRDosageDoseandrate.DoseRange == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.DoseRange(childComplexity), true

	case "FHIRDosageDoseandrate.ID":
		if e.complexity.FHIRDosageDoseandrate.ID == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.ID(childComplexity), true

	case "FHIRDosageDoseandrate.RateQuantity":
		if e.complexity.FHIRDosageDoseandrate.RateQuantity == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.RateQuantity(childComplexity), true

	case "FHIRDosageDoseandrate.RateRange":
		if e.complexity.FHIRDosageDoseandrate.RateRange == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.RateRange(childComplexity), true

	case "FHIRDosageDoseandrate.RateRatio":
		if e.complexity.FHIRDosageDoseandrate.RateRatio == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.RateRatio(childComplexity), true

	case "FHIRDosageDoseandrate.Type":
		if e.complexity.FHIRDosageDoseandrate.Type == nil {
			break
		}

		return e.complexity.FHIRDosageDoseandrate.Type(childComplexity), true

	case "FHIRDuration.Code":
		if e.complexity.FHIRDuration.Code == nil {
			break
		}

		return e.complexity.FHIRDuration.Code(childComplexity), true

	case "FHIRDuration.Comparator":
		if e.complexity.FHIRDuration.Comparator == nil {
			break
		}

		return e.complexity.FHIRDuration.Comparator(childComplexity), true

	case "FHIRDuration.ID":
		if e.complexity.FHIRDuration.ID == nil {
			break
		}

		return e.complexity.FHIRDuration.ID(childComplexity), true

	case "FHIRDuration.System":
		if e.complexity.FHIRDuration.System == nil {
			break
		}

		return e.complexity.FHIRDuration.System(childComplexity), true

	case "FHIRDuration.Unit":
		if e.complexity.FHIRDuration.Unit == nil {
			break
		}

		return e.complexity.FHIRDuration.Unit(childComplexity), true

	case "FHIRDuration.Value":
		if e.complexity.FHIRDuration.Value == nil {
			break
		}

		return e.complexity.FHIRDuration.Value(childComplexity), true

	case "FHIREncounter.Account":
		if e.complexity.FHIREncounter.Account == nil {
			break
		}

		return e.complexity.FHIREncounter.Account(childComplexity), true

	case "FHIREncounter.Appointment":
		if e.complexity.FHIREncounter.Appointment == nil {
			break
		}

		return e.complexity.FHIREncounter.Appointment(childComplexity), true

	case "FHIREncounter.BasedOn":
		if e.complexity.FHIREncounter.BasedOn == nil {
			break
		}

		return e.complexity.FHIREncounter.BasedOn(childComplexity), true

	case "FHIREncounter.Class":
		if e.complexity.FHIREncounter.Class == nil {
			break
		}

		return e.complexity.FHIREncounter.Class(childComplexity), true

	case "FHIREncounter.ClassHistory":
		if e.complexity.FHIREncounter.ClassHistory == nil {
			break
		}

		return e.complexity.FHIREncounter.ClassHistory(childComplexity), true

	case "FHIREncounter.Diagnosis":
		if e.complexity.FHIREncounter.Diagnosis == nil {
			break
		}

		return e.complexity.FHIREncounter.Diagnosis(childComplexity), true

	case "FHIREncounter.EpisodeOfCare":
		if e.complexity.FHIREncounter.EpisodeOfCare == nil {
			break
		}

		return e.complexity.FHIREncounter.EpisodeOfCare(childComplexity), true

	case "FHIREncounter.Hospitalization":
		if e.complexity.FHIREncounter.Hospitalization == nil {
			break
		}

		return e.complexity.FHIREncounter.Hospitalization(childComplexity), true

	case "FHIREncounter.ID":
		if e.complexity.FHIREncounter.ID == nil {
			break
		}

		return e.complexity.FHIREncounter.ID(childComplexity), true

	case "FHIREncounter.Identifier":
		if e.complexity.FHIREncounter.Identifier == nil {
			break
		}

		return e.complexity.FHIREncounter.Identifier(childComplexity), true

	case "FHIREncounter.Length":
		if e.complexity.FHIREncounter.Length == nil {
			break
		}

		return e.complexity.FHIREncounter.Length(childComplexity), true

	case "FHIREncounter.Location":
		if e.complexity.FHIREncounter.Location == nil {
			break
		}

		return e.complexity.FHIREncounter.Location(childComplexity), true

	case "FHIREncounter.PartOf":
		if e.complexity.FHIREncounter.PartOf == nil {
			break
		}

		return e.complexity.FHIREncounter.PartOf(childComplexity), true

	case "FHIREncounter.Participant":
		if e.complexity.FHIREncounter.Participant == nil {
			break
		}

		return e.complexity.FHIREncounter.Participant(childComplexity), true

	case "FHIREncounter.Period":
		if e.complexity.FHIREncounter.Period == nil {
			break
		}

		return e.complexity.FHIREncounter.Period(childComplexity), true

	case "FHIREncounter.Priority":
		if e.complexity.FHIREncounter.Priority == nil {
			break
		}

		return e.complexity.FHIREncounter.Priority(childComplexity), true

	case "FHIREncounter.ReasonCode":
		if e.complexity.FHIREncounter.ReasonCode == nil {
			break
		}

		return e.complexity.FHIREncounter.ReasonCode(childComplexity), true

	case "FHIREncounter.ReasonReference":
		if e.complexity.FHIREncounter.ReasonReference == nil {
			break
		}

		return e.complexity.FHIREncounter.ReasonReference(childComplexity), true

	case "FHIREncounter.ServiceProvider":
		if e.complexity.FHIREncounter.ServiceProvider == nil {
			break
		}

		return e.complexity.FHIREncounter.ServiceProvider(childComplexity), true

	case "FHIREncounter.ServiceType":
		if e.complexity.FHIREncounter.ServiceType == nil {
			break
		}

		return e.complexity.FHIREncounter.ServiceType(childComplexity), true

	case "FHIREncounter.Status":
		if e.complexity.FHIREncounter.Status == nil {
			break
		}

		return e.complexity.FHIREncounter.Status(childComplexity), true

	case "FHIREncounter.StatusHistory":
		if e.complexity.FHIREncounter.StatusHistory == nil {
			break
		}

		return e.complexity.FHIREncounter.StatusHistory(childComplexity), true

	case "FHIREncounter.Subject":
		if e.complexity.FHIREncounter.Subject == nil {
			break
		}

		return e.complexity.FHIREncounter.Subject(childComplexity), true

	case "FHIREncounter.Text":
		if e.complexity.FHIREncounter.Text == nil {
			break
		}

		return e.complexity.FHIREncounter.Text(childComplexity), true

	case "FHIREncounter.Type":
		if e.complexity.FHIREncounter.Type == nil {
			break
		}

		return e.complexity.FHIREncounter.Type(childComplexity), true

	case "FHIREncounterClasshistory.Class":
		if e.complexity.FHIREncounterClasshistory.Class == nil {
			break
		}

		return e.complexity.FHIREncounterClasshistory.Class(childComplexity), true

	case "FHIREncounterClasshistory.ID":
		if e.complexity.FHIREncounterClasshistory.ID == nil {
			break
		}

		return e.complexity.FHIREncounterClasshistory.ID(childComplexity), true

	case "FHIREncounterClasshistory.Period":
		if e.complexity.FHIREncounterClasshistory.Period == nil {
			break
		}

		return e.complexity.FHIREncounterClasshistory.Period(childComplexity), true

	case "FHIREncounterDiagnosis.Condition":
		if e.complexity.FHIREncounterDiagnosis.Condition == nil {
			break
		}

		return e.complexity.FHIREncounterDiagnosis.Condition(childComplexity), true

	case "FHIREncounterDiagnosis.ID":
		if e.complexity.FHIREncounterDiagnosis.ID == nil {
			break
		}

		return e.complexity.FHIREncounterDiagnosis.ID(childComplexity), true

	case "FHIREncounterDiagnosis.Rank":
		if e.complexity.FHIREncounterDiagnosis.Rank == nil {
			break
		}

		return e.complexity.FHIREncounterDiagnosis.Rank(childComplexity), true

	case "FHIREncounterDiagnosis.Use":
		if e.complexity.FHIREncounterDiagnosis.Use == nil {
			break
		}

		return e.complexity.FHIREncounterDiagnosis.Use(childComplexity), true

	case "FHIREncounterHospitalization.AdmitSource":
		if e.complexity.FHIREncounterHospitalization.AdmitSource == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.AdmitSource(childComplexity), true

	case "FHIREncounterHospitalization.Destination":
		if e.complexity.FHIREncounterHospitalization.Destination == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.Destination(childComplexity), true

	case "FHIREncounterHospitalization.DietPreference":
		if e.complexity.FHIREncounterHospitalization.DietPreference == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.DietPreference(childComplexity), true

	case "FHIREncounterHospitalization.DischargeDisposition":
		if e.complexity.FHIREncounterHospitalization.DischargeDisposition == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.DischargeDisposition(childComplexity), true

	case "FHIREncounterHospitalization.ID":
		if e.complexity.FHIREncounterHospitalization.ID == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.ID(childComplexity), true

	case "FHIREncounterHospitalization.Origin":
		if e.complexity.FHIREncounterHospitalization.Origin == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.Origin(childComplexity), true

	case "FHIREncounterHospitalization.PreAdmissionIdentifier":
		if e.complexity.FHIREncounterHospitalization.PreAdmissionIdentifier == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.PreAdmissionIdentifier(childComplexity), true

	case "FHIREncounterHospitalization.ReAdmission":
		if e.complexity.FHIREncounterHospitalization.ReAdmission == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.ReAdmission(childComplexity), true

	case "FHIREncounterHospitalization.SpecialArrangement":
		if e.complexity.FHIREncounterHospitalization.SpecialArrangement == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.SpecialArrangement(childComplexity), true

	case "FHIREncounterHospitalization.SpecialCourtesy":
		if e.complexity.FHIREncounterHospitalization.SpecialCourtesy == nil {
			break
		}

		return e.complexity.FHIREncounterHospitalization.SpecialCourtesy(childComplexity), true

	case "FHIREncounterLocation.ID":
		if e.complexity.FHIREncounterLocation.ID == nil {
			break
		}

		return e.complexity.FHIREncounterLocation.ID(childComplexity), true

	case "FHIREncounterLocation.Location":
		if e.complexity.FHIREncounterLocation.Location == nil {
			break
		}

		return e.complexity.FHIREncounterLocation.Location(childComplexity), true

	case "FHIREncounterLocation.Period":
		if e.complexity.FHIREncounterLocation.Period == nil {
			break
		}

		return e.complexity.FHIREncounterLocation.Period(childComplexity), true

	case "FHIREncounterLocation.PhysicalType":
		if e.complexity.FHIREncounterLocation.PhysicalType == nil {
			break
		}

		return e.complexity.FHIREncounterLocation.PhysicalType(childComplexity), true

	case "FHIREncounterLocation.Status":
		if e.complexity.FHIREncounterLocation.Status == nil {
			break
		}

		return e.complexity.FHIREncounterLocation.Status(childComplexity), true

	case "FHIREncounterParticipant.ID":
		if e.complexity.FHIREncounterParticipant.ID == nil {
			break
		}

		return e.complexity.FHIREncounterParticipant.ID(childComplexity), true

	case "FHIREncounterParticipant.Individual":
		if e.complexity.FHIREncounterParticipant.Individual == nil {
			break
		}

		return e.complexity.FHIREncounterParticipant.Individual(childComplexity), true

	case "FHIREncounterParticipant.Period":
		if e.complexity.FHIREncounterParticipant.Period == nil {
			break
		}

		return e.complexity.FHIREncounterParticipant.Period(childComplexity), true

	case "FHIREncounterParticipant.Type":
		if e.complexity.FHIREncounterParticipant.Type == nil {
			break
		}

		return e.complexity.FHIREncounterParticipant.Type(childComplexity), true

	case "FHIREncounterRelayConnection.edges":
		if e.complexity.FHIREncounterRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIREncounterRelayConnection.Edges(childComplexity), true

	case "FHIREncounterRelayConnection.pageInfo":
		if e.complexity.FHIREncounterRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIREncounterRelayConnection.PageInfo(childComplexity), true

	case "FHIREncounterRelayEdge.cursor":
		if e.complexity.FHIREncounterRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIREncounterRelayEdge.Cursor(childComplexity), true

	case "FHIREncounterRelayEdge.node":
		if e.complexity.FHIREncounterRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIREncounterRelayEdge.Node(childComplexity), true

	case "FHIREncounterRelayPayload.resource":
		if e.complexity.FHIREncounterRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIREncounterRelayPayload.Resource(childComplexity), true

	case "FHIREncounterStatushistory.ID":
		if e.complexity.FHIREncounterStatushistory.ID == nil {
			break
		}

		return e.complexity.FHIREncounterStatushistory.ID(childComplexity), true

	case "FHIREncounterStatushistory.Period":
		if e.complexity.FHIREncounterStatushistory.Period == nil {
			break
		}

		return e.complexity.FHIREncounterStatushistory.Period(childComplexity), true

	case "FHIREncounterStatushistory.Status":
		if e.complexity.FHIREncounterStatushistory.Status == nil {
			break
		}

		return e.complexity.FHIREncounterStatushistory.Status(childComplexity), true

	case "FHIREpisodeOfCare.Account":
		if e.complexity.FHIREpisodeOfCare.Account == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Account(childComplexity), true

	case "FHIREpisodeOfCare.CareManager":
		if e.complexity.FHIREpisodeOfCare.CareManager == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.CareManager(childComplexity), true

	case "FHIREpisodeOfCare.Diagnosis":
		if e.complexity.FHIREpisodeOfCare.Diagnosis == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Diagnosis(childComplexity), true

	case "FHIREpisodeOfCare.ID":
		if e.complexity.FHIREpisodeOfCare.ID == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.ID(childComplexity), true

	case "FHIREpisodeOfCare.Identifier":
		if e.complexity.FHIREpisodeOfCare.Identifier == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Identifier(childComplexity), true

	case "FHIREpisodeOfCare.ManagingOrganization":
		if e.complexity.FHIREpisodeOfCare.ManagingOrganization == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.ManagingOrganization(childComplexity), true

	case "FHIREpisodeOfCare.Patient":
		if e.complexity.FHIREpisodeOfCare.Patient == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Patient(childComplexity), true

	case "FHIREpisodeOfCare.Period":
		if e.complexity.FHIREpisodeOfCare.Period == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Period(childComplexity), true

	case "FHIREpisodeOfCare.ReferralRequest":
		if e.complexity.FHIREpisodeOfCare.ReferralRequest == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.ReferralRequest(childComplexity), true

	case "FHIREpisodeOfCare.Status":
		if e.complexity.FHIREpisodeOfCare.Status == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Status(childComplexity), true

	case "FHIREpisodeOfCare.StatusHistory":
		if e.complexity.FHIREpisodeOfCare.StatusHistory == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.StatusHistory(childComplexity), true

	case "FHIREpisodeOfCare.Team":
		if e.complexity.FHIREpisodeOfCare.Team == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Team(childComplexity), true

	case "FHIREpisodeOfCare.Text":
		if e.complexity.FHIREpisodeOfCare.Text == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Text(childComplexity), true

	case "FHIREpisodeOfCare.Type":
		if e.complexity.FHIREpisodeOfCare.Type == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCare.Type(childComplexity), true

	case "FHIREpisodeOfCareRelayConnection.edges":
		if e.complexity.FHIREpisodeOfCareRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCareRelayConnection.Edges(childComplexity), true

	case "FHIREpisodeOfCareRelayConnection.pageInfo":
		if e.complexity.FHIREpisodeOfCareRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCareRelayConnection.PageInfo(childComplexity), true

	case "FHIREpisodeOfCareRelayEdge.cursor":
		if e.complexity.FHIREpisodeOfCareRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCareRelayEdge.Cursor(childComplexity), true

	case "FHIREpisodeOfCareRelayEdge.node":
		if e.complexity.FHIREpisodeOfCareRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCareRelayEdge.Node(childComplexity), true

	case "FHIREpisodeOfCareRelayPayload.resource":
		if e.complexity.FHIREpisodeOfCareRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIREpisodeOfCareRelayPayload.Resource(childComplexity), true

	case "FHIREpisodeofcareDiagnosis.Condition":
		if e.complexity.FHIREpisodeofcareDiagnosis.Condition == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareDiagnosis.Condition(childComplexity), true

	case "FHIREpisodeofcareDiagnosis.ID":
		if e.complexity.FHIREpisodeofcareDiagnosis.ID == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareDiagnosis.ID(childComplexity), true

	case "FHIREpisodeofcareDiagnosis.Rank":
		if e.complexity.FHIREpisodeofcareDiagnosis.Rank == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareDiagnosis.Rank(childComplexity), true

	case "FHIREpisodeofcareDiagnosis.Role":
		if e.complexity.FHIREpisodeofcareDiagnosis.Role == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareDiagnosis.Role(childComplexity), true

	case "FHIREpisodeofcareStatushistory.ID":
		if e.complexity.FHIREpisodeofcareStatushistory.ID == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareStatushistory.ID(childComplexity), true

	case "FHIREpisodeofcareStatushistory.Period":
		if e.complexity.FHIREpisodeofcareStatushistory.Period == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareStatushistory.Period(childComplexity), true

	case "FHIREpisodeofcareStatushistory.Status":
		if e.complexity.FHIREpisodeofcareStatushistory.Status == nil {
			break
		}

		return e.complexity.FHIREpisodeofcareStatushistory.Status(childComplexity), true

	case "FHIRHumanName.Family":
		if e.complexity.FHIRHumanName.Family == nil {
			break
		}

		return e.complexity.FHIRHumanName.Family(childComplexity), true

	case "FHIRHumanName.Given":
		if e.complexity.FHIRHumanName.Given == nil {
			break
		}

		return e.complexity.FHIRHumanName.Given(childComplexity), true

	case "FHIRHumanName.ID":
		if e.complexity.FHIRHumanName.ID == nil {
			break
		}

		return e.complexity.FHIRHumanName.ID(childComplexity), true

	case "FHIRHumanName.Period":
		if e.complexity.FHIRHumanName.Period == nil {
			break
		}

		return e.complexity.FHIRHumanName.Period(childComplexity), true

	case "FHIRHumanName.Prefix":
		if e.complexity.FHIRHumanName.Prefix == nil {
			break
		}

		return e.complexity.FHIRHumanName.Prefix(childComplexity), true

	case "FHIRHumanName.Suffix":
		if e.complexity.FHIRHumanName.Suffix == nil {
			break
		}

		return e.complexity.FHIRHumanName.Suffix(childComplexity), true

	case "FHIRHumanName.Text":
		if e.complexity.FHIRHumanName.Text == nil {
			break
		}

		return e.complexity.FHIRHumanName.Text(childComplexity), true

	case "FHIRHumanName.Use":
		if e.complexity.FHIRHumanName.Use == nil {
			break
		}

		return e.complexity.FHIRHumanName.Use(childComplexity), true

	case "FHIRIdentifier.Assigner":
		if e.complexity.FHIRIdentifier.Assigner == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Assigner(childComplexity), true

	case "FHIRIdentifier.ID":
		if e.complexity.FHIRIdentifier.ID == nil {
			break
		}

		return e.complexity.FHIRIdentifier.ID(childComplexity), true

	case "FHIRIdentifier.Period":
		if e.complexity.FHIRIdentifier.Period == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Period(childComplexity), true

	case "FHIRIdentifier.System":
		if e.complexity.FHIRIdentifier.System == nil {
			break
		}

		return e.complexity.FHIRIdentifier.System(childComplexity), true

	case "FHIRIdentifier.Type":
		if e.complexity.FHIRIdentifier.Type == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Type(childComplexity), true

	case "FHIRIdentifier.Use":
		if e.complexity.FHIRIdentifier.Use == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Use(childComplexity), true

	case "FHIRIdentifier.Value":
		if e.complexity.FHIRIdentifier.Value == nil {
			break
		}

		return e.complexity.FHIRIdentifier.Value(childComplexity), true

	case "FHIRMedication.Amount":
		if e.complexity.FHIRMedication.Amount == nil {
			break
		}

		return e.complexity.FHIRMedication.Amount(childComplexity), true

	case "FHIRMedication.Batch":
		if e.complexity.FHIRMedication.Batch == nil {
			break
		}

		return e.complexity.FHIRMedication.Batch(childComplexity), true

	case "FHIRMedication.Code":
		if e.complexity.FHIRMedication.Code == nil {
			break
		}

		return e.complexity.FHIRMedication.Code(childComplexity), true

	case "FHIRMedication.Form":
		if e.complexity.FHIRMedication.Form == nil {
			break
		}

		return e.complexity.FHIRMedication.Form(childComplexity), true

	case "FHIRMedication.ID":
		if e.complexity.FHIRMedication.ID == nil {
			break
		}

		return e.complexity.FHIRMedication.ID(childComplexity), true

	case "FHIRMedication.Identifier":
		if e.complexity.FHIRMedication.Identifier == nil {
			break
		}

		return e.complexity.FHIRMedication.Identifier(childComplexity), true

	case "FHIRMedication.Ingredient":
		if e.complexity.FHIRMedication.Ingredient == nil {
			break
		}

		return e.complexity.FHIRMedication.Ingredient(childComplexity), true

	case "FHIRMedication.Manufacturer":
		if e.complexity.FHIRMedication.Manufacturer == nil {
			break
		}

		return e.complexity.FHIRMedication.Manufacturer(childComplexity), true

	case "FHIRMedication.Status":
		if e.complexity.FHIRMedication.Status == nil {
			break
		}

		return e.complexity.FHIRMedication.Status(childComplexity), true

	case "FHIRMedication.Text":
		if e.complexity.FHIRMedication.Text == nil {
			break
		}

		return e.complexity.FHIRMedication.Text(childComplexity), true

	case "FHIRMedicationRelayConnection.edges":
		if e.complexity.FHIRMedicationRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRMedicationRelayConnection.Edges(childComplexity), true

	case "FHIRMedicationRelayConnection.pageInfo":
		if e.complexity.FHIRMedicationRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRMedicationRelayConnection.PageInfo(childComplexity), true

	case "FHIRMedicationRelayEdge.cursor":
		if e.complexity.FHIRMedicationRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRMedicationRelayEdge.Cursor(childComplexity), true

	case "FHIRMedicationRelayEdge.node":
		if e.complexity.FHIRMedicationRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRMedicationRelayEdge.Node(childComplexity), true

	case "FHIRMedicationRelayPayload.resource":
		if e.complexity.FHIRMedicationRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRMedicationRelayPayload.Resource(childComplexity), true

	case "FHIRMedicationRequest.AuthoredOn":
		if e.complexity.FHIRMedicationRequest.AuthoredOn == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.AuthoredOn(childComplexity), true

	case "FHIRMedicationRequest.BasedOn":
		if e.complexity.FHIRMedicationRequest.BasedOn == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.BasedOn(childComplexity), true

	case "FHIRMedicationRequest.Category":
		if e.complexity.FHIRMedicationRequest.Category == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Category(childComplexity), true

	case "FHIRMedicationRequest.CourseOfTherapyType":
		if e.complexity.FHIRMedicationRequest.CourseOfTherapyType == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.CourseOfTherapyType(childComplexity), true

	case "FHIRMedicationRequest.DetectedIssue":
		if e.complexity.FHIRMedicationRequest.DetectedIssue == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.DetectedIssue(childComplexity), true

	case "FHIRMedicationRequest.DispenseRequest":
		if e.complexity.FHIRMedicationRequest.DispenseRequest == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.DispenseRequest(childComplexity), true

	case "FHIRMedicationRequest.DoNotPerform":
		if e.complexity.FHIRMedicationRequest.DoNotPerform == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.DoNotPerform(childComplexity), true

	case "FHIRMedicationRequest.DosageInstruction":
		if e.complexity.FHIRMedicationRequest.DosageInstruction == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.DosageInstruction(childComplexity), true

	case "FHIRMedicationRequest.Encounter":
		if e.complexity.FHIRMedicationRequest.Encounter == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Encounter(childComplexity), true

	case "FHIRMedicationRequest.EventHistory":
		if e.complexity.FHIRMedicationRequest.EventHistory == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.EventHistory(childComplexity), true

	case "FHIRMedicationRequest.GroupIdentifier":
		if e.complexity.FHIRMedicationRequest.GroupIdentifier == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.GroupIdentifier(childComplexity), true

	case "FHIRMedicationRequest.ID":
		if e.complexity.FHIRMedicationRequest.ID == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.ID(childComplexity), true

	case "FHIRMedicationRequest.Identifier":
		if e.complexity.FHIRMedicationRequest.Identifier == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Identifier(childComplexity), true

	case "FHIRMedicationRequest.InstantiatesCanonical":
		if e.complexity.FHIRMedicationRequest.InstantiatesCanonical == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.InstantiatesCanonical(childComplexity), true

	case "FHIRMedicationRequest.InstantiatesURI":
		if e.complexity.FHIRMedicationRequest.InstantiatesURI == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.InstantiatesURI(childComplexity), true

	case "FHIRMedicationRequest.Insurance":
		if e.complexity.FHIRMedicationRequest.Insurance == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Insurance(childComplexity), true

	case "FHIRMedicationRequest.Intent":
		if e.complexity.FHIRMedicationRequest.Intent == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Intent(childComplexity), true

	case "FHIRMedicationRequest.MedicationCodeableConcept":
		if e.complexity.FHIRMedicationRequest.MedicationCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.MedicationCodeableConcept(childComplexity), true

	case "FHIRMedicationRequest.MedicationReference":
		if e.complexity.FHIRMedicationRequest.MedicationReference == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.MedicationReference(childComplexity), true

	case "FHIRMedicationRequest.Note":
		if e.complexity.FHIRMedicationRequest.Note == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Note(childComplexity), true

	case "FHIRMedicationRequest.Performer":
		if e.complexity.FHIRMedicationRequest.Performer == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Performer(childComplexity), true

	case "FHIRMedicationRequest.PerformerType":
		if e.complexity.FHIRMedicationRequest.PerformerType == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.PerformerType(childComplexity), true

	case "FHIRMedicationRequest.PriorPrescription":
		if e.complexity.FHIRMedicationRequest.PriorPrescription == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.PriorPrescription(childComplexity), true

	case "FHIRMedicationRequest.Priority":
		if e.complexity.FHIRMedicationRequest.Priority == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Priority(childComplexity), true

	case "FHIRMedicationRequest.ReasonCode":
		if e.complexity.FHIRMedicationRequest.ReasonCode == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.ReasonCode(childComplexity), true

	case "FHIRMedicationRequest.ReasonReference":
		if e.complexity.FHIRMedicationRequest.ReasonReference == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.ReasonReference(childComplexity), true

	case "FHIRMedicationRequest.Recorder":
		if e.complexity.FHIRMedicationRequest.Recorder == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Recorder(childComplexity), true

	case "FHIRMedicationRequest.ReportedBoolean":
		if e.complexity.FHIRMedicationRequest.ReportedBoolean == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.ReportedBoolean(childComplexity), true

	case "FHIRMedicationRequest.ReportedReference":
		if e.complexity.FHIRMedicationRequest.ReportedReference == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.ReportedReference(childComplexity), true

	case "FHIRMedicationRequest.Requester":
		if e.complexity.FHIRMedicationRequest.Requester == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Requester(childComplexity), true

	case "FHIRMedicationRequest.Status":
		if e.complexity.FHIRMedicationRequest.Status == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Status(childComplexity), true

	case "FHIRMedicationRequest.StatusReason":
		if e.complexity.FHIRMedicationRequest.StatusReason == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.StatusReason(childComplexity), true

	case "FHIRMedicationRequest.Subject":
		if e.complexity.FHIRMedicationRequest.Subject == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Subject(childComplexity), true

	case "FHIRMedicationRequest.Substitution":
		if e.complexity.FHIRMedicationRequest.Substitution == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Substitution(childComplexity), true

	case "FHIRMedicationRequest.SupportingInformation":
		if e.complexity.FHIRMedicationRequest.SupportingInformation == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.SupportingInformation(childComplexity), true

	case "FHIRMedicationRequest.Text":
		if e.complexity.FHIRMedicationRequest.Text == nil {
			break
		}

		return e.complexity.FHIRMedicationRequest.Text(childComplexity), true

	case "FHIRMedicationRequestRelayConnection.edges":
		if e.complexity.FHIRMedicationRequestRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRMedicationRequestRelayConnection.Edges(childComplexity), true

	case "FHIRMedicationRequestRelayConnection.pageInfo":
		if e.complexity.FHIRMedicationRequestRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRMedicationRequestRelayConnection.PageInfo(childComplexity), true

	case "FHIRMedicationRequestRelayEdge.cursor":
		if e.complexity.FHIRMedicationRequestRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRMedicationRequestRelayEdge.Cursor(childComplexity), true

	case "FHIRMedicationRequestRelayEdge.node":
		if e.complexity.FHIRMedicationRequestRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRMedicationRequestRelayEdge.Node(childComplexity), true

	case "FHIRMedicationRequestRelayPayload.resource":
		if e.complexity.FHIRMedicationRequestRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRMedicationRequestRelayPayload.Resource(childComplexity), true

	case "FHIRMedicationStatement.BasedOn":
		if e.complexity.FHIRMedicationStatement.BasedOn == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.BasedOn(childComplexity), true

	case "FHIRMedicationStatement.Category":
		if e.complexity.FHIRMedicationStatement.Category == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Category(childComplexity), true

	case "FHIRMedicationStatement.Context":
		if e.complexity.FHIRMedicationStatement.Context == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Context(childComplexity), true

	case "FHIRMedicationStatement.DateAsserted":
		if e.complexity.FHIRMedicationStatement.DateAsserted == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.DateAsserted(childComplexity), true

	case "FHIRMedicationStatement.DerivedFrom":
		if e.complexity.FHIRMedicationStatement.DerivedFrom == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.DerivedFrom(childComplexity), true

	case "FHIRMedicationStatement.Dosage":
		if e.complexity.FHIRMedicationStatement.Dosage == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Dosage(childComplexity), true

	case "FHIRMedicationStatement.EffectiveDateTime":
		if e.complexity.FHIRMedicationStatement.EffectiveDateTime == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.EffectiveDateTime(childComplexity), true

	case "FHIRMedicationStatement.EffectivePeriod":
		if e.complexity.FHIRMedicationStatement.EffectivePeriod == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.EffectivePeriod(childComplexity), true

	case "FHIRMedicationStatement.ID":
		if e.complexity.FHIRMedicationStatement.ID == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.ID(childComplexity), true

	case "FHIRMedicationStatement.Identifier":
		if e.complexity.FHIRMedicationStatement.Identifier == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Identifier(childComplexity), true

	case "FHIRMedicationStatement.InformationSource":
		if e.complexity.FHIRMedicationStatement.InformationSource == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.InformationSource(childComplexity), true

	case "FHIRMedicationStatement.MedicationCodeableConcept":
		if e.complexity.FHIRMedicationStatement.MedicationCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.MedicationCodeableConcept(childComplexity), true

	case "FHIRMedicationStatement.MedicationReference":
		if e.complexity.FHIRMedicationStatement.MedicationReference == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.MedicationReference(childComplexity), true

	case "FHIRMedicationStatement.Note":
		if e.complexity.FHIRMedicationStatement.Note == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Note(childComplexity), true

	case "FHIRMedicationStatement.PartOf":
		if e.complexity.FHIRMedicationStatement.PartOf == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.PartOf(childComplexity), true

	case "FHIRMedicationStatement.ReasonCode":
		if e.complexity.FHIRMedicationStatement.ReasonCode == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.ReasonCode(childComplexity), true

	case "FHIRMedicationStatement.ReasonReference":
		if e.complexity.FHIRMedicationStatement.ReasonReference == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.ReasonReference(childComplexity), true

	case "FHIRMedicationStatement.Status":
		if e.complexity.FHIRMedicationStatement.Status == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Status(childComplexity), true

	case "FHIRMedicationStatement.StatusReason":
		if e.complexity.FHIRMedicationStatement.StatusReason == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.StatusReason(childComplexity), true

	case "FHIRMedicationStatement.Subject":
		if e.complexity.FHIRMedicationStatement.Subject == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Subject(childComplexity), true

	case "FHIRMedicationStatement.Text":
		if e.complexity.FHIRMedicationStatement.Text == nil {
			break
		}

		return e.complexity.FHIRMedicationStatement.Text(childComplexity), true

	case "FHIRMedicationStatementRelayConnection.edges":
		if e.complexity.FHIRMedicationStatementRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRMedicationStatementRelayConnection.Edges(childComplexity), true

	case "FHIRMedicationStatementRelayConnection.pageInfo":
		if e.complexity.FHIRMedicationStatementRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRMedicationStatementRelayConnection.PageInfo(childComplexity), true

	case "FHIRMedicationStatementRelayEdge.cursor":
		if e.complexity.FHIRMedicationStatementRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRMedicationStatementRelayEdge.Cursor(childComplexity), true

	case "FHIRMedicationStatementRelayEdge.node":
		if e.complexity.FHIRMedicationStatementRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRMedicationStatementRelayEdge.Node(childComplexity), true

	case "FHIRMedicationStatementRelayPayload.resource":
		if e.complexity.FHIRMedicationStatementRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRMedicationStatementRelayPayload.Resource(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.DispenseInterval":
		if e.complexity.FHIRMedicationrequestDispenserequest.DispenseInterval == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.DispenseInterval(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.ExpectedSupplyDuration":
		if e.complexity.FHIRMedicationrequestDispenserequest.ExpectedSupplyDuration == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.ExpectedSupplyDuration(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.ID":
		if e.complexity.FHIRMedicationrequestDispenserequest.ID == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.ID(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.InitialFill":
		if e.complexity.FHIRMedicationrequestDispenserequest.InitialFill == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.InitialFill(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.NumberOfRepeatsAllowed":
		if e.complexity.FHIRMedicationrequestDispenserequest.NumberOfRepeatsAllowed == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.NumberOfRepeatsAllowed(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.Performer":
		if e.complexity.FHIRMedicationrequestDispenserequest.Performer == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.Performer(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.Quantity":
		if e.complexity.FHIRMedicationrequestDispenserequest.Quantity == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.Quantity(childComplexity), true

	case "FHIRMedicationrequestDispenserequest.ValidityPeriod":
		if e.complexity.FHIRMedicationrequestDispenserequest.ValidityPeriod == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestDispenserequest.ValidityPeriod(childComplexity), true

	case "FHIRMedicationrequestInitialfill.Duration":
		if e.complexity.FHIRMedicationrequestInitialfill.Duration == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestInitialfill.Duration(childComplexity), true

	case "FHIRMedicationrequestInitialfill.ID":
		if e.complexity.FHIRMedicationrequestInitialfill.ID == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestInitialfill.ID(childComplexity), true

	case "FHIRMedicationrequestInitialfill.Quantity":
		if e.complexity.FHIRMedicationrequestInitialfill.Quantity == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestInitialfill.Quantity(childComplexity), true

	case "FHIRMedicationrequestSubstitution.AllowedBoolean":
		if e.complexity.FHIRMedicationrequestSubstitution.AllowedBoolean == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestSubstitution.AllowedBoolean(childComplexity), true

	case "FHIRMedicationrequestSubstitution.AllowedCodeableConcept":
		if e.complexity.FHIRMedicationrequestSubstitution.AllowedCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestSubstitution.AllowedCodeableConcept(childComplexity), true

	case "FHIRMedicationrequestSubstitution.ID":
		if e.complexity.FHIRMedicationrequestSubstitution.ID == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestSubstitution.ID(childComplexity), true

	case "FHIRMedicationrequestSubstitution.Reason":
		if e.complexity.FHIRMedicationrequestSubstitution.Reason == nil {
			break
		}

		return e.complexity.FHIRMedicationrequestSubstitution.Reason(childComplexity), true

	case "FHIRNarrative.Div":
		if e.complexity.FHIRNarrative.Div == nil {
			break
		}

		return e.complexity.FHIRNarrative.Div(childComplexity), true

	case "FHIRNarrative.ID":
		if e.complexity.FHIRNarrative.ID == nil {
			break
		}

		return e.complexity.FHIRNarrative.ID(childComplexity), true

	case "FHIRNarrative.Status":
		if e.complexity.FHIRNarrative.Status == nil {
			break
		}

		return e.complexity.FHIRNarrative.Status(childComplexity), true

	case "FHIRObservation.BasedOn":
		if e.complexity.FHIRObservation.BasedOn == nil {
			break
		}

		return e.complexity.FHIRObservation.BasedOn(childComplexity), true

	case "FHIRObservation.BodySite":
		if e.complexity.FHIRObservation.BodySite == nil {
			break
		}

		return e.complexity.FHIRObservation.BodySite(childComplexity), true

	case "FHIRObservation.Category":
		if e.complexity.FHIRObservation.Category == nil {
			break
		}

		return e.complexity.FHIRObservation.Category(childComplexity), true

	case "FHIRObservation.Code":
		if e.complexity.FHIRObservation.Code == nil {
			break
		}

		return e.complexity.FHIRObservation.Code(childComplexity), true

	case "FHIRObservation.Component":
		if e.complexity.FHIRObservation.Component == nil {
			break
		}

		return e.complexity.FHIRObservation.Component(childComplexity), true

	case "FHIRObservation.DataAbsentReason":
		if e.complexity.FHIRObservation.DataAbsentReason == nil {
			break
		}

		return e.complexity.FHIRObservation.DataAbsentReason(childComplexity), true

	case "FHIRObservation.DerivedFrom":
		if e.complexity.FHIRObservation.DerivedFrom == nil {
			break
		}

		return e.complexity.FHIRObservation.DerivedFrom(childComplexity), true

	case "FHIRObservation.Device":
		if e.complexity.FHIRObservation.Device == nil {
			break
		}

		return e.complexity.FHIRObservation.Device(childComplexity), true

	case "FHIRObservation.EffectiveDateTime":
		if e.complexity.FHIRObservation.EffectiveDateTime == nil {
			break
		}

		return e.complexity.FHIRObservation.EffectiveDateTime(childComplexity), true

	case "FHIRObservation.EffectiveInstant":
		if e.complexity.FHIRObservation.EffectiveInstant == nil {
			break
		}

		return e.complexity.FHIRObservation.EffectiveInstant(childComplexity), true

	case "FHIRObservation.EffectivePeriod":
		if e.complexity.FHIRObservation.EffectivePeriod == nil {
			break
		}

		return e.complexity.FHIRObservation.EffectivePeriod(childComplexity), true

	case "FHIRObservation.EffectiveTiming":
		if e.complexity.FHIRObservation.EffectiveTiming == nil {
			break
		}

		return e.complexity.FHIRObservation.EffectiveTiming(childComplexity), true

	case "FHIRObservation.Encounter":
		if e.complexity.FHIRObservation.Encounter == nil {
			break
		}

		return e.complexity.FHIRObservation.Encounter(childComplexity), true

	case "FHIRObservation.Focus":
		if e.complexity.FHIRObservation.Focus == nil {
			break
		}

		return e.complexity.FHIRObservation.Focus(childComplexity), true

	case "FHIRObservation.HasMember":
		if e.complexity.FHIRObservation.HasMember == nil {
			break
		}

		return e.complexity.FHIRObservation.HasMember(childComplexity), true

	case "FHIRObservation.ID":
		if e.complexity.FHIRObservation.ID == nil {
			break
		}

		return e.complexity.FHIRObservation.ID(childComplexity), true

	case "FHIRObservation.Identifier":
		if e.complexity.FHIRObservation.Identifier == nil {
			break
		}

		return e.complexity.FHIRObservation.Identifier(childComplexity), true

	case "FHIRObservation.Interpretation":
		if e.complexity.FHIRObservation.Interpretation == nil {
			break
		}

		return e.complexity.FHIRObservation.Interpretation(childComplexity), true

	case "FHIRObservation.Issued":
		if e.complexity.FHIRObservation.Issued == nil {
			break
		}

		return e.complexity.FHIRObservation.Issued(childComplexity), true

	case "FHIRObservation.Method":
		if e.complexity.FHIRObservation.Method == nil {
			break
		}

		return e.complexity.FHIRObservation.Method(childComplexity), true

	case "FHIRObservation.Note":
		if e.complexity.FHIRObservation.Note == nil {
			break
		}

		return e.complexity.FHIRObservation.Note(childComplexity), true

	case "FHIRObservation.PartOf":
		if e.complexity.FHIRObservation.PartOf == nil {
			break
		}

		return e.complexity.FHIRObservation.PartOf(childComplexity), true

	case "FHIRObservation.Performer":
		if e.complexity.FHIRObservation.Performer == nil {
			break
		}

		return e.complexity.FHIRObservation.Performer(childComplexity), true

	case "FHIRObservation.ReferenceRange":
		if e.complexity.FHIRObservation.ReferenceRange == nil {
			break
		}

		return e.complexity.FHIRObservation.ReferenceRange(childComplexity), true

	case "FHIRObservation.Specimen":
		if e.complexity.FHIRObservation.Specimen == nil {
			break
		}

		return e.complexity.FHIRObservation.Specimen(childComplexity), true

	case "FHIRObservation.Status":
		if e.complexity.FHIRObservation.Status == nil {
			break
		}

		return e.complexity.FHIRObservation.Status(childComplexity), true

	case "FHIRObservation.Subject":
		if e.complexity.FHIRObservation.Subject == nil {
			break
		}

		return e.complexity.FHIRObservation.Subject(childComplexity), true

	case "FHIRObservation.Text":
		if e.complexity.FHIRObservation.Text == nil {
			break
		}

		return e.complexity.FHIRObservation.Text(childComplexity), true

	case "FHIRObservation.ValueBoolean":
		if e.complexity.FHIRObservation.ValueBoolean == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueBoolean(childComplexity), true

	case "FHIRObservation.ValueCodeableConcept":
		if e.complexity.FHIRObservation.ValueCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueCodeableConcept(childComplexity), true

	case "FHIRObservation.ValueDateTime":
		if e.complexity.FHIRObservation.ValueDateTime == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueDateTime(childComplexity), true

	case "FHIRObservation.ValueInteger":
		if e.complexity.FHIRObservation.ValueInteger == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueInteger(childComplexity), true

	case "FHIRObservation.ValuePeriod":
		if e.complexity.FHIRObservation.ValuePeriod == nil {
			break
		}

		return e.complexity.FHIRObservation.ValuePeriod(childComplexity), true

	case "FHIRObservation.ValueQuantity":
		if e.complexity.FHIRObservation.ValueQuantity == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueQuantity(childComplexity), true

	case "FHIRObservation.ValueRange":
		if e.complexity.FHIRObservation.ValueRange == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueRange(childComplexity), true

	case "FHIRObservation.ValueRatio":
		if e.complexity.FHIRObservation.ValueRatio == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueRatio(childComplexity), true

	case "FHIRObservation.ValueSampledData":
		if e.complexity.FHIRObservation.ValueSampledData == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueSampledData(childComplexity), true

	case "FHIRObservation.ValueString":
		if e.complexity.FHIRObservation.ValueString == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueString(childComplexity), true

	case "FHIRObservation.ValueTime":
		if e.complexity.FHIRObservation.ValueTime == nil {
			break
		}

		return e.complexity.FHIRObservation.ValueTime(childComplexity), true

	case "FHIRObservationComponent.Code":
		if e.complexity.FHIRObservationComponent.Code == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.Code(childComplexity), true

	case "FHIRObservationComponent.DataAbsentReason":
		if e.complexity.FHIRObservationComponent.DataAbsentReason == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.DataAbsentReason(childComplexity), true

	case "FHIRObservationComponent.ID":
		if e.complexity.FHIRObservationComponent.ID == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ID(childComplexity), true

	case "FHIRObservationComponent.Interpretation":
		if e.complexity.FHIRObservationComponent.Interpretation == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.Interpretation(childComplexity), true

	case "FHIRObservationComponent.ReferenceRange":
		if e.complexity.FHIRObservationComponent.ReferenceRange == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ReferenceRange(childComplexity), true

	case "FHIRObservationComponent.ValueBoolean":
		if e.complexity.FHIRObservationComponent.ValueBoolean == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueBoolean(childComplexity), true

	case "FHIRObservationComponent.ValueCodeableConcept":
		if e.complexity.FHIRObservationComponent.ValueCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueCodeableConcept(childComplexity), true

	case "FHIRObservationComponent.ValueDateTime":
		if e.complexity.FHIRObservationComponent.ValueDateTime == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueDateTime(childComplexity), true

	case "FHIRObservationComponent.ValueInteger":
		if e.complexity.FHIRObservationComponent.ValueInteger == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueInteger(childComplexity), true

	case "FHIRObservationComponent.ValuePeriod":
		if e.complexity.FHIRObservationComponent.ValuePeriod == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValuePeriod(childComplexity), true

	case "FHIRObservationComponent.ValueQuantity":
		if e.complexity.FHIRObservationComponent.ValueQuantity == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueQuantity(childComplexity), true

	case "FHIRObservationComponent.ValueRange":
		if e.complexity.FHIRObservationComponent.ValueRange == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueRange(childComplexity), true

	case "FHIRObservationComponent.ValueRatio":
		if e.complexity.FHIRObservationComponent.ValueRatio == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueRatio(childComplexity), true

	case "FHIRObservationComponent.ValueSampledData":
		if e.complexity.FHIRObservationComponent.ValueSampledData == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueSampledData(childComplexity), true

	case "FHIRObservationComponent.ValueString":
		if e.complexity.FHIRObservationComponent.ValueString == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueString(childComplexity), true

	case "FHIRObservationComponent.ValueTime":
		if e.complexity.FHIRObservationComponent.ValueTime == nil {
			break
		}

		return e.complexity.FHIRObservationComponent.ValueTime(childComplexity), true

	case "FHIRObservationReferencerange.Age":
		if e.complexity.FHIRObservationReferencerange.Age == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.Age(childComplexity), true

	case "FHIRObservationReferencerange.AppliesTo":
		if e.complexity.FHIRObservationReferencerange.AppliesTo == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.AppliesTo(childComplexity), true

	case "FHIRObservationReferencerange.High":
		if e.complexity.FHIRObservationReferencerange.High == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.High(childComplexity), true

	case "FHIRObservationReferencerange.ID":
		if e.complexity.FHIRObservationReferencerange.ID == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.ID(childComplexity), true

	case "FHIRObservationReferencerange.Low":
		if e.complexity.FHIRObservationReferencerange.Low == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.Low(childComplexity), true

	case "FHIRObservationReferencerange.Text":
		if e.complexity.FHIRObservationReferencerange.Text == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.Text(childComplexity), true

	case "FHIRObservationReferencerange.Type":
		if e.complexity.FHIRObservationReferencerange.Type == nil {
			break
		}

		return e.complexity.FHIRObservationReferencerange.Type(childComplexity), true

	case "FHIRObservationRelayConnection.edges":
		if e.complexity.FHIRObservationRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRObservationRelayConnection.Edges(childComplexity), true

	case "FHIRObservationRelayConnection.pageInfo":
		if e.complexity.FHIRObservationRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRObservationRelayConnection.PageInfo(childComplexity), true

	case "FHIRObservationRelayEdge.cursor":
		if e.complexity.FHIRObservationRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRObservationRelayEdge.Cursor(childComplexity), true

	case "FHIRObservationRelayEdge.node":
		if e.complexity.FHIRObservationRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRObservationRelayEdge.Node(childComplexity), true

	case "FHIRObservationRelayPayload.resource":
		if e.complexity.FHIRObservationRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRObservationRelayPayload.Resource(childComplexity), true

	case "FHIROrganization.Active":
		if e.complexity.FHIROrganization.Active == nil {
			break
		}

		return e.complexity.FHIROrganization.Active(childComplexity), true

	case "FHIROrganization.Address":
		if e.complexity.FHIROrganization.Address == nil {
			break
		}

		return e.complexity.FHIROrganization.Address(childComplexity), true

	case "FHIROrganization.Alias":
		if e.complexity.FHIROrganization.Alias == nil {
			break
		}

		return e.complexity.FHIROrganization.Alias(childComplexity), true

	case "FHIROrganization.ID":
		if e.complexity.FHIROrganization.ID == nil {
			break
		}

		return e.complexity.FHIROrganization.ID(childComplexity), true

	case "FHIROrganization.Identifier":
		if e.complexity.FHIROrganization.Identifier == nil {
			break
		}

		return e.complexity.FHIROrganization.Identifier(childComplexity), true

	case "FHIROrganization.Name":
		if e.complexity.FHIROrganization.Name == nil {
			break
		}

		return e.complexity.FHIROrganization.Name(childComplexity), true

	case "FHIROrganization.Telecom":
		if e.complexity.FHIROrganization.Telecom == nil {
			break
		}

		return e.complexity.FHIROrganization.Telecom(childComplexity), true

	case "FHIROrganization.Type":
		if e.complexity.FHIROrganization.Type == nil {
			break
		}

		return e.complexity.FHIROrganization.Type(childComplexity), true

	case "FHIROrganizationRelayConnection.edges":
		if e.complexity.FHIROrganizationRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayConnection.Edges(childComplexity), true

	case "FHIROrganizationRelayConnection.pageInfo":
		if e.complexity.FHIROrganizationRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayConnection.PageInfo(childComplexity), true

	case "FHIROrganizationRelayEdge.cursor":
		if e.complexity.FHIROrganizationRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayEdge.Cursor(childComplexity), true

	case "FHIROrganizationRelayEdge.node":
		if e.complexity.FHIROrganizationRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayEdge.Node(childComplexity), true

	case "FHIROrganizationRelayPayload.resource":
		if e.complexity.FHIROrganizationRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIROrganizationRelayPayload.Resource(childComplexity), true

	case "FHIRPatient.Active":
		if e.complexity.FHIRPatient.Active == nil {
			break
		}

		return e.complexity.FHIRPatient.Active(childComplexity), true

	case "FHIRPatient.Address":
		if e.complexity.FHIRPatient.Address == nil {
			break
		}

		return e.complexity.FHIRPatient.Address(childComplexity), true

	case "FHIRPatient.BirthDate":
		if e.complexity.FHIRPatient.BirthDate == nil {
			break
		}

		return e.complexity.FHIRPatient.BirthDate(childComplexity), true

	case "FHIRPatient.Communication":
		if e.complexity.FHIRPatient.Communication == nil {
			break
		}

		return e.complexity.FHIRPatient.Communication(childComplexity), true

	case "FHIRPatient.Contact":
		if e.complexity.FHIRPatient.Contact == nil {
			break
		}

		return e.complexity.FHIRPatient.Contact(childComplexity), true

	case "FHIRPatient.DeceasedBoolean":
		if e.complexity.FHIRPatient.DeceasedBoolean == nil {
			break
		}

		return e.complexity.FHIRPatient.DeceasedBoolean(childComplexity), true

	case "FHIRPatient.DeceasedDateTime":
		if e.complexity.FHIRPatient.DeceasedDateTime == nil {
			break
		}

		return e.complexity.FHIRPatient.DeceasedDateTime(childComplexity), true

	case "FHIRPatient.Gender":
		if e.complexity.FHIRPatient.Gender == nil {
			break
		}

		return e.complexity.FHIRPatient.Gender(childComplexity), true

	case "FHIRPatient.GeneralPractitioner":
		if e.complexity.FHIRPatient.GeneralPractitioner == nil {
			break
		}

		return e.complexity.FHIRPatient.GeneralPractitioner(childComplexity), true

	case "FHIRPatient.ID":
		if e.complexity.FHIRPatient.ID == nil {
			break
		}

		return e.complexity.FHIRPatient.ID(childComplexity), true

	case "FHIRPatient.Identifier":
		if e.complexity.FHIRPatient.Identifier == nil {
			break
		}

		return e.complexity.FHIRPatient.Identifier(childComplexity), true

	case "FHIRPatient.Link":
		if e.complexity.FHIRPatient.Link == nil {
			break
		}

		return e.complexity.FHIRPatient.Link(childComplexity), true

	case "FHIRPatient.ManagingOrganization":
		if e.complexity.FHIRPatient.ManagingOrganization == nil {
			break
		}

		return e.complexity.FHIRPatient.ManagingOrganization(childComplexity), true

	case "FHIRPatient.MaritalStatus":
		if e.complexity.FHIRPatient.MaritalStatus == nil {
			break
		}

		return e.complexity.FHIRPatient.MaritalStatus(childComplexity), true

	case "FHIRPatient.MultipleBirthBoolean":
		if e.complexity.FHIRPatient.MultipleBirthBoolean == nil {
			break
		}

		return e.complexity.FHIRPatient.MultipleBirthBoolean(childComplexity), true

	case "FHIRPatient.MultipleBirthInteger":
		if e.complexity.FHIRPatient.MultipleBirthInteger == nil {
			break
		}

		return e.complexity.FHIRPatient.MultipleBirthInteger(childComplexity), true

	case "FHIRPatient.Name":
		if e.complexity.FHIRPatient.Name == nil {
			break
		}

		return e.complexity.FHIRPatient.Name(childComplexity), true

	case "FHIRPatient.Photo":
		if e.complexity.FHIRPatient.Photo == nil {
			break
		}

		return e.complexity.FHIRPatient.Photo(childComplexity), true

	case "FHIRPatient.Telecom":
		if e.complexity.FHIRPatient.Telecom == nil {
			break
		}

		return e.complexity.FHIRPatient.Telecom(childComplexity), true

	case "FHIRPatient.Text":
		if e.complexity.FHIRPatient.Text == nil {
			break
		}

		return e.complexity.FHIRPatient.Text(childComplexity), true

	case "FHIRPatientCommunication.ID":
		if e.complexity.FHIRPatientCommunication.ID == nil {
			break
		}

		return e.complexity.FHIRPatientCommunication.ID(childComplexity), true

	case "FHIRPatientCommunication.Language":
		if e.complexity.FHIRPatientCommunication.Language == nil {
			break
		}

		return e.complexity.FHIRPatientCommunication.Language(childComplexity), true

	case "FHIRPatientCommunication.Preferred":
		if e.complexity.FHIRPatientCommunication.Preferred == nil {
			break
		}

		return e.complexity.FHIRPatientCommunication.Preferred(childComplexity), true

	case "FHIRPatientContact.Address":
		if e.complexity.FHIRPatientContact.Address == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Address(childComplexity), true

	case "FHIRPatientContact.Gender":
		if e.complexity.FHIRPatientContact.Gender == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Gender(childComplexity), true

	case "FHIRPatientContact.ID":
		if e.complexity.FHIRPatientContact.ID == nil {
			break
		}

		return e.complexity.FHIRPatientContact.ID(childComplexity), true

	case "FHIRPatientContact.Name":
		if e.complexity.FHIRPatientContact.Name == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Name(childComplexity), true

	case "FHIRPatientContact.Organization":
		if e.complexity.FHIRPatientContact.Organization == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Organization(childComplexity), true

	case "FHIRPatientContact.Period":
		if e.complexity.FHIRPatientContact.Period == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Period(childComplexity), true

	case "FHIRPatientContact.Relationship":
		if e.complexity.FHIRPatientContact.Relationship == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Relationship(childComplexity), true

	case "FHIRPatientContact.Telecom":
		if e.complexity.FHIRPatientContact.Telecom == nil {
			break
		}

		return e.complexity.FHIRPatientContact.Telecom(childComplexity), true

	case "FHIRPatientLink.ID":
		if e.complexity.FHIRPatientLink.ID == nil {
			break
		}

		return e.complexity.FHIRPatientLink.ID(childComplexity), true

	case "FHIRPatientLink.Other":
		if e.complexity.FHIRPatientLink.Other == nil {
			break
		}

		return e.complexity.FHIRPatientLink.Other(childComplexity), true

	case "FHIRPatientLink.Type":
		if e.complexity.FHIRPatientLink.Type == nil {
			break
		}

		return e.complexity.FHIRPatientLink.Type(childComplexity), true

	case "FHIRPatientRelayConnection.edges":
		if e.complexity.FHIRPatientRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRPatientRelayConnection.Edges(childComplexity), true

	case "FHIRPatientRelayConnection.hasOpenEpisodes":
		if e.complexity.FHIRPatientRelayConnection.HasOpenEpisodes == nil {
			break
		}

		return e.complexity.FHIRPatientRelayConnection.HasOpenEpisodes(childComplexity), true

	case "FHIRPatientRelayConnection.pageInfo":
		if e.complexity.FHIRPatientRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRPatientRelayConnection.PageInfo(childComplexity), true

	case "FHIRPatientRelayEdge.cursor":
		if e.complexity.FHIRPatientRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRPatientRelayEdge.Cursor(childComplexity), true

	case "FHIRPatientRelayEdge.hasOpenEpisodes":
		if e.complexity.FHIRPatientRelayEdge.HasOpenEpisodes == nil {
			break
		}

		return e.complexity.FHIRPatientRelayEdge.HasOpenEpisodes(childComplexity), true

	case "FHIRPatientRelayEdge.node":
		if e.complexity.FHIRPatientRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRPatientRelayEdge.Node(childComplexity), true

	case "FHIRPatientRelayPayload.hasOpenEpisodes":
		if e.complexity.FHIRPatientRelayPayload.HasOpenEpisodes == nil {
			break
		}

		return e.complexity.FHIRPatientRelayPayload.HasOpenEpisodes(childComplexity), true

	case "FHIRPatientRelayPayload.resource":
		if e.complexity.FHIRPatientRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRPatientRelayPayload.Resource(childComplexity), true

	case "FHIRPeriod.End":
		if e.complexity.FHIRPeriod.End == nil {
			break
		}

		return e.complexity.FHIRPeriod.End(childComplexity), true

	case "FHIRPeriod.ID":
		if e.complexity.FHIRPeriod.ID == nil {
			break
		}

		return e.complexity.FHIRPeriod.ID(childComplexity), true

	case "FHIRPeriod.Start":
		if e.complexity.FHIRPeriod.Start == nil {
			break
		}

		return e.complexity.FHIRPeriod.Start(childComplexity), true

	case "FHIRQuantity.Code":
		if e.complexity.FHIRQuantity.Code == nil {
			break
		}

		return e.complexity.FHIRQuantity.Code(childComplexity), true

	case "FHIRQuantity.Comparator":
		if e.complexity.FHIRQuantity.Comparator == nil {
			break
		}

		return e.complexity.FHIRQuantity.Comparator(childComplexity), true

	case "FHIRQuantity.ID":
		if e.complexity.FHIRQuantity.ID == nil {
			break
		}

		return e.complexity.FHIRQuantity.ID(childComplexity), true

	case "FHIRQuantity.System":
		if e.complexity.FHIRQuantity.System == nil {
			break
		}

		return e.complexity.FHIRQuantity.System(childComplexity), true

	case "FHIRQuantity.Unit":
		if e.complexity.FHIRQuantity.Unit == nil {
			break
		}

		return e.complexity.FHIRQuantity.Unit(childComplexity), true

	case "FHIRQuantity.Value":
		if e.complexity.FHIRQuantity.Value == nil {
			break
		}

		return e.complexity.FHIRQuantity.Value(childComplexity), true

	case "FHIRRange.High":
		if e.complexity.FHIRRange.High == nil {
			break
		}

		return e.complexity.FHIRRange.High(childComplexity), true

	case "FHIRRange.ID":
		if e.complexity.FHIRRange.ID == nil {
			break
		}

		return e.complexity.FHIRRange.ID(childComplexity), true

	case "FHIRRange.Low":
		if e.complexity.FHIRRange.Low == nil {
			break
		}

		return e.complexity.FHIRRange.Low(childComplexity), true

	case "FHIRRatio.Denominator":
		if e.complexity.FHIRRatio.Denominator == nil {
			break
		}

		return e.complexity.FHIRRatio.Denominator(childComplexity), true

	case "FHIRRatio.ID":
		if e.complexity.FHIRRatio.ID == nil {
			break
		}

		return e.complexity.FHIRRatio.ID(childComplexity), true

	case "FHIRRatio.Numerator":
		if e.complexity.FHIRRatio.Numerator == nil {
			break
		}

		return e.complexity.FHIRRatio.Numerator(childComplexity), true

	case "FHIRReference.Display":
		if e.complexity.FHIRReference.Display == nil {
			break
		}

		return e.complexity.FHIRReference.Display(childComplexity), true

	case "FHIRReference.ID":
		if e.complexity.FHIRReference.ID == nil {
			break
		}

		return e.complexity.FHIRReference.ID(childComplexity), true

	case "FHIRReference.Identifier":
		if e.complexity.FHIRReference.Identifier == nil {
			break
		}

		return e.complexity.FHIRReference.Identifier(childComplexity), true

	case "FHIRReference.Reference":
		if e.complexity.FHIRReference.Reference == nil {
			break
		}

		return e.complexity.FHIRReference.Reference(childComplexity), true

	case "FHIRReference.Type":
		if e.complexity.FHIRReference.Type == nil {
			break
		}

		return e.complexity.FHIRReference.Type(childComplexity), true

	case "FHIRSampledData.Data":
		if e.complexity.FHIRSampledData.Data == nil {
			break
		}

		return e.complexity.FHIRSampledData.Data(childComplexity), true

	case "FHIRSampledData.Dimensions":
		if e.complexity.FHIRSampledData.Dimensions == nil {
			break
		}

		return e.complexity.FHIRSampledData.Dimensions(childComplexity), true

	case "FHIRSampledData.Factor":
		if e.complexity.FHIRSampledData.Factor == nil {
			break
		}

		return e.complexity.FHIRSampledData.Factor(childComplexity), true

	case "FHIRSampledData.ID":
		if e.complexity.FHIRSampledData.ID == nil {
			break
		}

		return e.complexity.FHIRSampledData.ID(childComplexity), true

	case "FHIRSampledData.LowerLimit":
		if e.complexity.FHIRSampledData.LowerLimit == nil {
			break
		}

		return e.complexity.FHIRSampledData.LowerLimit(childComplexity), true

	case "FHIRSampledData.Origin":
		if e.complexity.FHIRSampledData.Origin == nil {
			break
		}

		return e.complexity.FHIRSampledData.Origin(childComplexity), true

	case "FHIRSampledData.Period":
		if e.complexity.FHIRSampledData.Period == nil {
			break
		}

		return e.complexity.FHIRSampledData.Period(childComplexity), true

	case "FHIRSampledData.UpperLimit":
		if e.complexity.FHIRSampledData.UpperLimit == nil {
			break
		}

		return e.complexity.FHIRSampledData.UpperLimit(childComplexity), true

	case "FHIRServiceRequest.AsNeededBoolean":
		if e.complexity.FHIRServiceRequest.AsNeededBoolean == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.AsNeededBoolean(childComplexity), true

	case "FHIRServiceRequest.AsNeededCodeableConcept":
		if e.complexity.FHIRServiceRequest.AsNeededCodeableConcept == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.AsNeededCodeableConcept(childComplexity), true

	case "FHIRServiceRequest.AuthoredOn":
		if e.complexity.FHIRServiceRequest.AuthoredOn == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.AuthoredOn(childComplexity), true

	case "FHIRServiceRequest.BasedOn":
		if e.complexity.FHIRServiceRequest.BasedOn == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.BasedOn(childComplexity), true

	case "FHIRServiceRequest.BodySite":
		if e.complexity.FHIRServiceRequest.BodySite == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.BodySite(childComplexity), true

	case "FHIRServiceRequest.Category":
		if e.complexity.FHIRServiceRequest.Category == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Category(childComplexity), true

	case "FHIRServiceRequest.Code":
		if e.complexity.FHIRServiceRequest.Code == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Code(childComplexity), true

	case "FHIRServiceRequest.DoNotPerform":
		if e.complexity.FHIRServiceRequest.DoNotPerform == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.DoNotPerform(childComplexity), true

	case "FHIRServiceRequest.Encounter":
		if e.complexity.FHIRServiceRequest.Encounter == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Encounter(childComplexity), true

	case "FHIRServiceRequest.ID":
		if e.complexity.FHIRServiceRequest.ID == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.ID(childComplexity), true

	case "FHIRServiceRequest.Identifier":
		if e.complexity.FHIRServiceRequest.Identifier == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Identifier(childComplexity), true

	case "FHIRServiceRequest.InstantiatesCanonical":
		if e.complexity.FHIRServiceRequest.InstantiatesCanonical == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.InstantiatesCanonical(childComplexity), true

	case "FHIRServiceRequest.InstantiatesURI":
		if e.complexity.FHIRServiceRequest.InstantiatesURI == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.InstantiatesURI(childComplexity), true

	case "FHIRServiceRequest.Insurance":
		if e.complexity.FHIRServiceRequest.Insurance == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Insurance(childComplexity), true

	case "FHIRServiceRequest.Intent":
		if e.complexity.FHIRServiceRequest.Intent == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Intent(childComplexity), true

	case "FHIRServiceRequest.LocationCode":
		if e.complexity.FHIRServiceRequest.LocationCode == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.LocationCode(childComplexity), true

	case "FHIRServiceRequest.LocationReference":
		if e.complexity.FHIRServiceRequest.LocationReference == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.LocationReference(childComplexity), true

	case "FHIRServiceRequest.Note":
		if e.complexity.FHIRServiceRequest.Note == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Note(childComplexity), true

	case "FHIRServiceRequest.OccurrenceDateTime":
		if e.complexity.FHIRServiceRequest.OccurrenceDateTime == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.OccurrenceDateTime(childComplexity), true

	case "FHIRServiceRequest.OccurrencePeriod":
		if e.complexity.FHIRServiceRequest.OccurrencePeriod == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.OccurrencePeriod(childComplexity), true

	case "FHIRServiceRequest.OccurrenceTiming":
		if e.complexity.FHIRServiceRequest.OccurrenceTiming == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.OccurrenceTiming(childComplexity), true

	case "FHIRServiceRequest.OrderDetail":
		if e.complexity.FHIRServiceRequest.OrderDetail == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.OrderDetail(childComplexity), true

	case "FHIRServiceRequest.PatientInstruction":
		if e.complexity.FHIRServiceRequest.PatientInstruction == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.PatientInstruction(childComplexity), true

	case "FHIRServiceRequest.Performer":
		if e.complexity.FHIRServiceRequest.Performer == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Performer(childComplexity), true

	case "FHIRServiceRequest.PerformerType":
		if e.complexity.FHIRServiceRequest.PerformerType == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.PerformerType(childComplexity), true

	case "FHIRServiceRequest.Priority":
		if e.complexity.FHIRServiceRequest.Priority == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Priority(childComplexity), true

	case "FHIRServiceRequest.QuantityQuantity":
		if e.complexity.FHIRServiceRequest.QuantityQuantity == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.QuantityQuantity(childComplexity), true

	case "FHIRServiceRequest.QuantityRange":
		if e.complexity.FHIRServiceRequest.QuantityRange == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.QuantityRange(childComplexity), true

	case "FHIRServiceRequest.QuantityRatio":
		if e.complexity.FHIRServiceRequest.QuantityRatio == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.QuantityRatio(childComplexity), true

	case "FHIRServiceRequest.ReasonCode":
		if e.complexity.FHIRServiceRequest.ReasonCode == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.ReasonCode(childComplexity), true

	case "FHIRServiceRequest.ReasonReference":
		if e.complexity.FHIRServiceRequest.ReasonReference == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.ReasonReference(childComplexity), true

	case "FHIRServiceRequest.RelevantHistory":
		if e.complexity.FHIRServiceRequest.RelevantHistory == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.RelevantHistory(childComplexity), true

	case "FHIRServiceRequest.Replaces":
		if e.complexity.FHIRServiceRequest.Replaces == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Replaces(childComplexity), true

	case "FHIRServiceRequest.Requester":
		if e.complexity.FHIRServiceRequest.Requester == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Requester(childComplexity), true

	case "FHIRServiceRequest.Requisition":
		if e.complexity.FHIRServiceRequest.Requisition == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Requisition(childComplexity), true

	case "FHIRServiceRequest.Specimen":
		if e.complexity.FHIRServiceRequest.Specimen == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Specimen(childComplexity), true

	case "FHIRServiceRequest.Status":
		if e.complexity.FHIRServiceRequest.Status == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Status(childComplexity), true

	case "FHIRServiceRequest.Subject":
		if e.complexity.FHIRServiceRequest.Subject == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Subject(childComplexity), true

	case "FHIRServiceRequest.SupportingInfo":
		if e.complexity.FHIRServiceRequest.SupportingInfo == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.SupportingInfo(childComplexity), true

	case "FHIRServiceRequest.Text":
		if e.complexity.FHIRServiceRequest.Text == nil {
			break
		}

		return e.complexity.FHIRServiceRequest.Text(childComplexity), true

	case "FHIRServiceRequestRelayConnection.edges":
		if e.complexity.FHIRServiceRequestRelayConnection.Edges == nil {
			break
		}

		return e.complexity.FHIRServiceRequestRelayConnection.Edges(childComplexity), true

	case "FHIRServiceRequestRelayConnection.pageInfo":
		if e.complexity.FHIRServiceRequestRelayConnection.PageInfo == nil {
			break
		}

		return e.complexity.FHIRServiceRequestRelayConnection.PageInfo(childComplexity), true

	case "FHIRServiceRequestRelayEdge.cursor":
		if e.complexity.FHIRServiceRequestRelayEdge.Cursor == nil {
			break
		}

		return e.complexity.FHIRServiceRequestRelayEdge.Cursor(childComplexity), true

	case "FHIRServiceRequestRelayEdge.node":
		if e.complexity.FHIRServiceRequestRelayEdge.Node == nil {
			break
		}

		return e.complexity.FHIRServiceRequestRelayEdge.Node(childComplexity), true

	case "FHIRServiceRequestRelayPayload.resource":
		if e.complexity.FHIRServiceRequestRelayPayload.Resource == nil {
			break
		}

		return e.complexity.FHIRServiceRequestRelayPayload.Resource(childComplexity), true

	case "FHIRTiming.Code":
		if e.complexity.FHIRTiming.Code == nil {
			break
		}

		return e.complexity.FHIRTiming.Code(childComplexity), true

	case "FHIRTiming.Event":
		if e.complexity.FHIRTiming.Event == nil {
			break
		}

		return e.complexity.FHIRTiming.Event(childComplexity), true

	case "FHIRTiming.ID":
		if e.complexity.FHIRTiming.ID == nil {
			break
		}

		return e.complexity.FHIRTiming.ID(childComplexity), true

	case "FHIRTiming.Repeat":
		if e.complexity.FHIRTiming.Repeat == nil {
			break
		}

		return e.complexity.FHIRTiming.Repeat(childComplexity), true

	case "FHIRTimingRepeat.BoundsDuration":
		if e.complexity.FHIRTimingRepeat.BoundsDuration == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.BoundsDuration(childComplexity), true

	case "FHIRTimingRepeat.BoundsPeriod":
		if e.complexity.FHIRTimingRepeat.BoundsPeriod == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.BoundsPeriod(childComplexity), true

	case "FHIRTimingRepeat.BoundsRange":
		if e.complexity.FHIRTimingRepeat.BoundsRange == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.BoundsRange(childComplexity), true

	case "FHIRTimingRepeat.Count":
		if e.complexity.FHIRTimingRepeat.Count == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Count(childComplexity), true

	case "FHIRTimingRepeat.CountMax":
		if e.complexity.FHIRTimingRepeat.CountMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.CountMax(childComplexity), true

	case "FHIRTimingRepeat.DayOfWeek":
		if e.complexity.FHIRTimingRepeat.DayOfWeek == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.DayOfWeek(childComplexity), true

	case "FHIRTimingRepeat.Duration":
		if e.complexity.FHIRTimingRepeat.Duration == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Duration(childComplexity), true

	case "FHIRTimingRepeat.DurationMax":
		if e.complexity.FHIRTimingRepeat.DurationMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.DurationMax(childComplexity), true

	case "FHIRTimingRepeat.DurationUnit":
		if e.complexity.FHIRTimingRepeat.DurationUnit == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.DurationUnit(childComplexity), true

	case "FHIRTimingRepeat.Frequency":
		if e.complexity.FHIRTimingRepeat.Frequency == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Frequency(childComplexity), true

	case "FHIRTimingRepeat.FrequencyMax":
		if e.complexity.FHIRTimingRepeat.FrequencyMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.FrequencyMax(childComplexity), true

	case "FHIRTimingRepeat.ID":
		if e.complexity.FHIRTimingRepeat.ID == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.ID(childComplexity), true

	case "FHIRTimingRepeat.Offset":
		if e.complexity.FHIRTimingRepeat.Offset == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Offset(childComplexity), true

	case "FHIRTimingRepeat.Period":
		if e.complexity.FHIRTimingRepeat.Period == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.Period(childComplexity), true

	case "FHIRTimingRepeat.PeriodMax":
		if e.complexity.FHIRTimingRepeat.PeriodMax == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.PeriodMax(childComplexity), true

	case "FHIRTimingRepeat.PeriodUnit":
		if e.complexity.FHIRTimingRepeat.PeriodUnit == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.PeriodUnit(childComplexity), true

	case "FHIRTimingRepeat.TimeOfDay":
		if e.complexity.FHIRTimingRepeat.TimeOfDay == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.TimeOfDay(childComplexity), true

	case "FHIRTimingRepeat.When":
		if e.complexity.FHIRTimingRepeat.When == nil {
			break
		}

		return e.complexity.FHIRTimingRepeat.When(childComplexity), true

	case "MedicalData.allergies":
		if e.complexity.MedicalData.Allergies == nil {
			break
		}

		return e.complexity.MedicalData.Allergies(childComplexity), true

	case "MedicalData.bmi":
		if e.complexity.MedicalData.BMI == nil {
			break
		}

		return e.complexity.MedicalData.BMI(childComplexity), true

	case "MedicalData.cd4Count":
		if e.complexity.MedicalData.CD4Count == nil {
			break
		}

		return e.complexity.MedicalData.CD4Count(childComplexity), true

	case "MedicalData.regimen":
		if e.complexity.MedicalData.Regimen == nil {
			break
		}

		return e.complexity.MedicalData.Regimen(childComplexity), true

	case "MedicalData.viralLoad":
		if e.complexity.MedicalData.ViralLoad == nil {
			break
		}

		return e.complexity.MedicalData.ViralLoad(childComplexity), true

	case "MedicalData.weight":
		if e.complexity.MedicalData.Weight == nil {
			break
		}

		return e.complexity.MedicalData.Weight(childComplexity), true

	case "MedicationBatch.ExpirationDate":
		if e.complexity.MedicationBatch.ExpirationDate == nil {
			break
		}

		return e.complexity.MedicationBatch.ExpirationDate(childComplexity), true

	case "MedicationBatch.LotNumber":
		if e.complexity.MedicationBatch.LotNumber == nil {
			break
		}

		return e.complexity.MedicationBatch.LotNumber(childComplexity), true

	case "MedicationIngredient.IsActive":
		if e.complexity.MedicationIngredient.IsActive == nil {
			break
		}

		return e.complexity.MedicationIngredient.IsActive(childComplexity), true

	case "MedicationIngredient.ItemCodelabConcept":
		if e.complexity.MedicationIngredient.ItemCodelabConcept == nil {
			break
		}

		return e.complexity.MedicationIngredient.ItemCodelabConcept(childComplexity), true

	case "MedicationIngredient.ItemReference":
		if e.complexity.MedicationIngredient.ItemReference == nil {
			break
		}

		return e.complexity.MedicationIngredient.ItemReference(childComplexity), true

	case "MedicationIngredient.Strength":
		if e.complexity.MedicationIngredient.Strength == nil {
			break
		}

		return e.complexity.MedicationIngredient.Strength(childComplexity), true

	case "Mutation.addNextOfKin":
		if e.complexity.Mutation.AddNextOfKin == nil {
			break
		}

		args, err := ec.field_Mutation_addNextOfKin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNextOfKin(childComplexity, args["input"].(domain.SimpleNextOfKinInput)), true

	case "Mutation.addNHIF":
		if e.complexity.Mutation.AddNhif == nil {
			break
		}

		args, err := ec.field_Mutation_addNHIF_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddNhif(childComplexity, args["input"].(*domain.SimpleNHIFInput)), true

	case "Mutation.createFHIRAllergyIntolerance":
		if e.complexity.Mutation.CreateFHIRAllergyIntolerance == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIRAllergyIntolerance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIRAllergyIntolerance(childComplexity, args["input"].(domain.FHIRAllergyIntoleranceInput)), true

	case "Mutation.createFHIRComposition":
		if e.complexity.Mutation.CreateFHIRComposition == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIRComposition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIRComposition(childComplexity, args["input"].(domain.FHIRCompositionInput)), true

	case "Mutation.createFHIRCondition":
		if e.complexity.Mutation.CreateFHIRCondition == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIRCondition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIRCondition(childComplexity, args["input"].(domain.FHIRConditionInput)), true

	case "Mutation.createFHIRMedicationRequest":
		if e.complexity.Mutation.CreateFHIRMedicationRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIRMedicationRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIRMedicationRequest(childComplexity, args["input"].(domain.FHIRMedicationRequestInput)), true

	case "Mutation.createFHIRObservation":
		if e.complexity.Mutation.CreateFHIRObservation == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIRObservation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIRObservation(childComplexity, args["input"].(domain.FHIRObservationInput)), true

	case "Mutation.createFHIRServiceRequest":
		if e.complexity.Mutation.CreateFHIRServiceRequest == nil {
			break
		}

		args, err := ec.field_Mutation_createFHIRServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFHIRServiceRequest(childComplexity, args["input"].(domain.FHIRServiceRequestInput)), true

	case "Mutation.createUpdatePatientExtraInformation":
		if e.complexity.Mutation.CreateUpdatePatientExtraInformation == nil {
			break
		}

		args, err := ec.field_Mutation_createUpdatePatientExtraInformation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUpdatePatientExtraInformation(childComplexity, args["input"].(domain.PatientExtraInformationInput)), true

	case "Mutation.deleteFHIRComposition":
		if e.complexity.Mutation.DeleteFHIRComposition == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFHIRComposition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFHIRComposition(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFHIRMedicationRequest":
		if e.complexity.Mutation.DeleteFHIRMedicationRequest == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFHIRMedicationRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFHIRMedicationRequest(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFHIRObservation":
		if e.complexity.Mutation.DeleteFHIRObservation == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFHIRObservation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFHIRObservation(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFHIRPatient":
		if e.complexity.Mutation.DeleteFHIRPatient == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFHIRPatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFHIRPatient(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFHIRServiceRequest":
		if e.complexity.Mutation.DeleteFHIRServiceRequest == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFHIRServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFHIRServiceRequest(childComplexity, args["id"].(string)), true

	case "Mutation.endEncounter":
		if e.complexity.Mutation.EndEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_endEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndEncounter(childComplexity, args["encounterID"].(string)), true

	case "Mutation.endEpisode":
		if e.complexity.Mutation.EndEpisode == nil {
			break
		}

		args, err := ec.field_Mutation_endEpisode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndEpisode(childComplexity, args["episodeID"].(string)), true

	case "Mutation.registerPatient":
		if e.complexity.Mutation.RegisterPatient == nil {
			break
		}

		args, err := ec.field_Mutation_registerPatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterPatient(childComplexity, args["input"].(domain.SimplePatientRegistrationInput)), true

	case "Mutation.registerUser":
		if e.complexity.Mutation.RegisterUser == nil {
			break
		}

		args, err := ec.field_Mutation_registerUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegisterUser(childComplexity, args["input"].(domain.SimplePatientRegistrationInput)), true

	case "Mutation.startEncounter":
		if e.complexity.Mutation.StartEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_startEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartEncounter(childComplexity, args["episodeID"].(string)), true

	case "Mutation.startEpisodeByBreakGlass":
		if e.complexity.Mutation.StartEpisodeByBreakGlass == nil {
			break
		}

		args, err := ec.field_Mutation_startEpisodeByBreakGlass_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartEpisodeByBreakGlass(childComplexity, args["input"].(domain.BreakGlassEpisodeCreationInput)), true

	case "Mutation.startEpisodeByOTP":
		if e.complexity.Mutation.StartEpisodeByOtp == nil {
			break
		}

		args, err := ec.field_Mutation_startEpisodeByOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartEpisodeByOtp(childComplexity, args["input"].(domain.OTPEpisodeCreationInput)), true

	case "Mutation.updateFHIRAllergyIntolerance":
		if e.complexity.Mutation.UpdateFHIRAllergyIntolerance == nil {
			break
		}

		args, err := ec.field_Mutation_updateFHIRAllergyIntolerance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFHIRAllergyIntolerance(childComplexity, args["input"].(domain.FHIRAllergyIntoleranceInput)), true

	case "Mutation.updateFHIRComposition":
		if e.complexity.Mutation.UpdateFHIRComposition == nil {
			break
		}

		args, err := ec.field_Mutation_updateFHIRComposition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFHIRComposition(childComplexity, args["input"].(domain.FHIRCompositionInput)), true

	case "Mutation.updateFHIRCondition":
		if e.complexity.Mutation.UpdateFHIRCondition == nil {
			break
		}

		args, err := ec.field_Mutation_updateFHIRCondition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFHIRCondition(childComplexity, args["input"].(domain.FHIRConditionInput)), true

	case "Mutation.updateFHIRMedicationRequest":
		if e.complexity.Mutation.UpdateFHIRMedicationRequest == nil {
			break
		}

		args, err := ec.field_Mutation_updateFHIRMedicationRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFHIRMedicationRequest(childComplexity, args["input"].(domain.FHIRMedicationRequestInput)), true

	case "Mutation.updatePatient":
		if e.complexity.Mutation.UpdatePatient == nil {
			break
		}

		args, err := ec.field_Mutation_updatePatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePatient(childComplexity, args["input"].(domain.SimplePatientRegistrationInput)), true

	case "Mutation.upgradeEpisode":
		if e.complexity.Mutation.UpgradeEpisode == nil {
			break
		}

		args, err := ec.field_Mutation_upgradeEpisode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpgradeEpisode(childComplexity, args["input"].(domain.OTPEpisodeUpgradeInput)), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PatientConnection.edges":
		if e.complexity.PatientConnection.Edges == nil {
			break
		}

		return e.complexity.PatientConnection.Edges(childComplexity), true

	case "PatientConnection.pageInfo":
		if e.complexity.PatientConnection.PageInfo == nil {
			break
		}

		return e.complexity.PatientConnection.PageInfo(childComplexity), true

	case "PatientEdge.cursor":
		if e.complexity.PatientEdge.Cursor == nil {
			break
		}

		return e.complexity.PatientEdge.Cursor(childComplexity), true

	case "PatientEdge.hasOpenEpisodes":
		if e.complexity.PatientEdge.HasOpenEpisodes == nil {
			break
		}

		return e.complexity.PatientEdge.HasOpenEpisodes(childComplexity), true

	case "PatientEdge.node":
		if e.complexity.PatientEdge.Node == nil {
			break
		}

		return e.complexity.PatientEdge.Node(childComplexity), true

	case "PatientPayload.hasOpenEpisodes":
		if e.complexity.PatientPayload.HasOpenEpisodes == nil {
			break
		}

		return e.complexity.PatientPayload.HasOpenEpisodes(childComplexity), true

	case "PatientPayload.openEpisodes":
		if e.complexity.PatientPayload.OpenEpisodes == nil {
			break
		}

		return e.complexity.PatientPayload.OpenEpisodes(childComplexity), true

	case "PatientPayload.patientRecord":
		if e.complexity.PatientPayload.PatientRecord == nil {
			break
		}

		return e.complexity.PatientPayload.PatientRecord(childComplexity), true

	case "Query.allergySummary":
		if e.complexity.Query.AllergySummary == nil {
			break
		}

		args, err := ec.field_Query_allergySummary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllergySummary(childComplexity, args["patientID"].(string)), true

	case "Query.findPatients":
		if e.complexity.Query.FindPatients == nil {
			break
		}

		args, err := ec.field_Query_findPatients_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindPatients(childComplexity, args["search"].(string)), true

	case "Query.findPatientsByMSISDN":
		if e.complexity.Query.FindPatientsByMsisdn == nil {
			break
		}

		args, err := ec.field_Query_findPatientsByMSISDN_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindPatientsByMsisdn(childComplexity, args["msisdn"].(string)), true

	case "Query.getMedicalData":
		if e.complexity.Query.GetMedicalData == nil {
			break
		}

		args, err := ec.field_Query_getMedicalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMedicalData(childComplexity, args["patientID"].(string)), true

	case "Query.getPatient":
		if e.complexity.Query.GetPatient == nil {
			break
		}

		args, err := ec.field_Query_getPatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatient(childComplexity, args["id"].(string)), true

	case "Query.listConcepts":
		if e.complexity.Query.ListConcepts == nil {
			break
		}

		args, err := ec.field_Query_listConcepts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListConcepts(childComplexity, args["org"].(string), args["source"].(string), args["verbose"].(bool), args["q"].(*string), args["sortAsc"].(*string), args["sortDesc"].(*string), args["conceptClass"].(*string), args["dataType"].(*string), args["locale"].(*string), args["includeRetired"].(*bool), args["includeMappings"].(*bool), args["includeInverseMappings"].(*bool)), true

	case "Query.openEpisodes":
		if e.complexity.Query.OpenEpisodes == nil {
			break
		}

		args, err := ec.field_Query_openEpisodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OpenEpisodes(childComplexity, args["patientReference"].(string)), true

	case "Query.openOrganizationEpisodes":
		if e.complexity.Query.OpenOrganizationEpisodes == nil {
			break
		}

		args, err := ec.field_Query_openOrganizationEpisodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OpenOrganizationEpisodes(childComplexity, args["providerSladeCode"].(string)), true

	case "Query.patientTimeline":
		if e.complexity.Query.PatientTimeline == nil {
			break
		}

		args, err := ec.field_Query_patientTimeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientTimeline(childComplexity, args["patientID"].(string), args["count"].(int)), true

	case "Query.patientTimelineWithCount":
		if e.complexity.Query.PatientTimelineWithCount == nil {
			break
		}

		args, err := ec.field_Query_patientTimelineWithCount_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientTimelineWithCount(childComplexity, args["episodeID"].(string), args["count"].(int)), true

	case "Query.problemSummary":
		if e.complexity.Query.ProblemSummary == nil {
			break
		}

		args, err := ec.field_Query_problemSummary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProblemSummary(childComplexity, args["patientID"].(string)), true

	case "Query.searchFHIRAllergyIntolerance":
		if e.complexity.Query.SearchFHIRAllergyIntolerance == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRAllergyIntolerance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRAllergyIntolerance(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIRComposition":
		if e.complexity.Query.SearchFHIRComposition == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRComposition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRComposition(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIRCondition":
		if e.complexity.Query.SearchFHIRCondition == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRCondition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRCondition(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIREncounter":
		if e.complexity.Query.SearchFHIREncounter == nil {
			break
		}

		args, err := ec.field_Query_searchFHIREncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIREncounter(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIRMedicationRequest":
		if e.complexity.Query.SearchFHIRMedicationRequest == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRMedicationRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRMedicationRequest(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIRMedicationStatement":
		if e.complexity.Query.SearchFHIRMedicationStatement == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRMedicationStatement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRMedicationStatement(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIRObservation":
		if e.complexity.Query.SearchFHIRObservation == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRObservation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRObservation(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.searchFHIRServiceRequest":
		if e.complexity.Query.SearchFHIRServiceRequest == nil {
			break
		}

		args, err := ec.field_Query_searchFHIRServiceRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchFHIRServiceRequest(childComplexity, args["params"].(map[string]interface{})), true

	case "Query.visitSummary":
		if e.complexity.Query.VisitSummary == nil {
			break
		}

		args, err := ec.field_Query_visitSummary_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.VisitSummary(childComplexity, args["encounterID"].(string)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "pkg/clinical/presentation/graph/external.graphql", Input: `scalar Map
scalar Any
scalar Time
scalar Date
scalar Markdown
scalar Decimal
scalar URL
scalar ResourceList
scalar Base64Binary
scalar Canonical
scalar Code
scalar DateTime
scalar Instant
scalar Integer
scalar OID
scalar PositiveInt
scalar UnsignedInt
scalar URI
scalar UUID
scalar XHTML

type Dummy @key(fields: "id") {
  id: ID!
}

extend type PageInfo {
  hasNextPage: Boolean! @external
  hasPreviousPage: Boolean! @external
}

# supported content types
enum ContentType {
  PNG
  JPG
  PDF
}

enum Language {
  en
  sw
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/healthpassport.graphql", Input: `enum MaritalStatus {
  A
  D
  I
  L
  M
  P
  S
  T
  U
  W
  UNK
}

enum RelationshipType {
  C
  E
  F
  I
  N
  O
  S
  U
}

enum IDDocumentType {
  national_id
  passport
  alien_id
}

type PatientEdge {
  cursor: String!
  node: FHIRPatient!
  hasOpenEpisodes: Boolean!
}

type PatientConnection {
  edges: [PatientEdge]
  pageInfo: PageInfo!
}

type PatientPayload {
  patientRecord: FHIRPatient!
  hasOpenEpisodes: Boolean!
  openEpisodes: [FHIREpisodeOfCare]
}

type MedicalData {
  regimen: [FHIRMedicationStatement]
  allergies: [FHIRAllergyIntolerance]
  weight: [FHIRObservation]
  bmi: [FHIRObservation]
  viralLoad: [FHIRObservation]
  cd4Count: [FHIRObservation]
}

type EpisodeOfCarePayload {
  episodeOfCare: FHIREpisodeOfCare!
  totalVisits: Int!
}

input OTPEpisodeCreationInput {
  patientID: String!
  providerCode: String!
  msisdn: String!
  otp: String!
  fullAccess: Boolean!
}

input OTPEpisodeUpgradeInput {
  episodeID: String!
  msisdn: String!
  otp: String!
}

input BreakGlassEpisodeCreationInput {
  patientID: String!
  providerCode: String!
  practitionerUID: String!
  providerPhone: String!
  otp: String!
  fullAccess: Boolean!
  patientPhone: String!
}

input PhysicalAddress {
  mapsCode: String! # can be a Plus Code or Google Maps co-ordinates
  physicalAddress: String!
}

input PostalAddress {
  postalAddress: String!
  postalCode: String!
}

input SimplePatientRegistrationInput {
  id: ID
  names: [NameInput!]!
  gender: String!
  identificationDocuments: [IdentificationDocument!]
  birthDate: Date!
  phoneNumbers: [PhoneNumberInput!]!
  photos: [PhotoInput]
  emails: [EmailInput]
  physicalAddresses: [PhysicalAddress]
  postalAddresses: [PostalAddress]
  maritalStatus: MaritalStatus
  languages: [Language]
  active: Boolean!
  replicateUSSD: Boolean
}

input SimpleNextOfKinInput {
  patientID: String!
  names: [NameInput!]!
  phoneNumbers: [PhoneNumberInput!]!
  emails: [EmailInput]
  physicalAddresses: [PhysicalAddress]
  postalAddresses: [PostalAddress]
  gender: String!
  birthDate: Date!
  relationship: RelationshipType!
  active: Boolean!
}

input SimpleNHIFInput {
  patientID: String!
  membershipNumber: String!
  frontImageBase64: String
  frontImageContentType: ContentType
  rearImageBase64: String
  rearImageContentType: ContentType
}

input PatientExtraInformationInput {
  patientID: String!
  maritalStatus: MaritalStatus
  languages: [Language]
  emails: [EmailInput]
}

input RetirePatientInput {
  id: ID! # ID of patient to be retired
}

input EmailInput {
  email: String!
  communicationOptIn: Boolean!
}

input NameInput {
  firstName: String!
  lastName: String!
  otherNames: String
}

input IdentificationDocument {
  documentType: IDDocumentType!
  documentNumber: String!
  title: String
  imageContentType: ContentType
  imageBase64: String
}

input PhoneNumberInput {
  msisdn: String!
  verificationCode: String
  isUSSD: Boolean
  communicationOptIn: Boolean!
}

input PhotoInput {
  photoContentType: ContentType!
  photoBase64data: String!
  photoFilename: String!
}

extend type Query {
  findPatientsByMSISDN(msisdn: String!): PatientConnection!

  findPatients(search: String!): PatientConnection!

  getPatient(id: ID!): PatientPayload!

  openEpisodes(patientReference: String!): [FHIREpisodeOfCare!]!

  openOrganizationEpisodes(providerSladeCode: String!): [FHIREpisodeOfCare!]!

  problemSummary(patientID: String!): [String!]!

  visitSummary(encounterID: String!): Map!

  patientTimelineWithCount(episodeID: String!, count: Int!): [Map!]!

  patientTimeline(patientID: String!, count: Int!): [Map!]!

  searchFHIREncounter(params: Map!): FHIREncounterRelayConnection!

  searchFHIRCondition(params: Map!): FHIRConditionRelayConnection!

  searchFHIRAllergyIntolerance(
    params: Map!
  ): FHIRAllergyIntoleranceRelayConnection!

  searchFHIRObservation(params: Map!): FHIRObservationRelayConnection!

  searchFHIRMedicationStatement(
    params: Map!
  ): FHIRMedicationStatementRelayConnection!

  searchFHIRMedicationRequest(
    params: Map!
  ): FHIRMedicationRequestRelayConnection!

  searchFHIRServiceRequest(params: Map!): FHIRServiceRequestRelayConnection!

  searchFHIRComposition(params: Map!): FHIRCompositionRelayConnection!

  allergySummary(patientID: String!): [String!]!

  getMedicalData(patientID: String!): MedicalData
}

extend type Mutation {
  startEpisodeByOTP(input: OTPEpisodeCreationInput!): EpisodeOfCarePayload!

  startEpisodeByBreakGlass(
    input: BreakGlassEpisodeCreationInput!
  ): EpisodeOfCarePayload!

  upgradeEpisode(input: OTPEpisodeUpgradeInput!): EpisodeOfCarePayload!

  endEpisode(episodeID: String!): Boolean!

  startEncounter(episodeID: String!): String!

  endEncounter(encounterID: String!): Boolean!

  registerPatient(input: SimplePatientRegistrationInput!): PatientPayload!

  registerUser(input: SimplePatientRegistrationInput!): PatientPayload!

  updatePatient(input: SimplePatientRegistrationInput!): PatientPayload!

  addNextOfKin(input: SimpleNextOfKinInput!): PatientPayload!

  addNHIF(input: SimpleNHIFInput): PatientPayload!

  createUpdatePatientExtraInformation(
    input: PatientExtraInformationInput!
  ): Boolean!

  createFHIRMedicationRequest(
    input: FHIRMedicationRequestInput!
  ): FHIRMedicationRequestRelayPayload!

  updateFHIRMedicationRequest(
    input: FHIRMedicationRequestInput!
  ): FHIRMedicationRequestRelayPayload!

  deleteFHIRMedicationRequest(id: ID!): Boolean!

  createFHIRAllergyIntolerance(
    input: FHIRAllergyIntoleranceInput!
  ): FHIRAllergyIntoleranceRelayPayload!

  updateFHIRAllergyIntolerance(
    input: FHIRAllergyIntoleranceInput!
  ): FHIRAllergyIntoleranceRelayPayload!

  createFHIRCondition(input: FHIRConditionInput!): FHIRConditionRelayPayload!

  updateFHIRCondition(input: FHIRConditionInput!): FHIRConditionRelayPayload!

  createFHIRServiceRequest(
    input: FHIRServiceRequestInput!
  ): FHIRServiceRequestRelayPayload!

  deleteFHIRServiceRequest(id: ID!): Boolean!

  createFHIRObservation(
    input: FHIRObservationInput!
  ): FHIRObservationRelayPayload!

  createFHIRComposition(
    input: FHIRCompositionInput!
  ): FHIRCompositionRelayPayload!

  updateFHIRComposition(
    input: FHIRCompositionInput!
  ): FHIRCompositionRelayPayload!

  deleteFHIRComposition(id: ID!): Boolean!

  deleteFHIRPatient(id: ID!): Boolean!

  deleteFHIRObservation(id: ID!): Boolean!
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/ocl.graphql", Input: `extend type Query {
  listConcepts(
    org: String!
    source: String!
    verbose: Boolean!

    # optional params
    q: String
    sortAsc: String
    sortDesc: String
    conceptClass: String
    dataType: String
    locale: String
    includeRetired: Boolean
    includeMappings: Boolean
    includeInverseMappings: Boolean
  ): [Map!]!
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/AllergyIntolerance.graphql", Input: `"""
AllergyIntoleranceTypeEnum is a FHIR enum
"""
enum AllergyIntoleranceTypeEnum {
  allergy
  intolerance
}

"""
AllergyIntoleranceCategoryEnum is a FHIR enum
"""
enum AllergyIntoleranceCategoryEnum {
  food
  medication
  environment
  biologic
}

"""
AllergyIntoleranceCriticalityEnum is a FHIR enum
"""
enum AllergyIntoleranceCriticalityEnum {
  low
  high
  unable_to_assess # ` + "`" + `original: unable-to-assess` + "`" + `
}

"""
AllergyIntoleranceReactionSeverityEnum is a FHIR enum
"""
enum AllergyIntoleranceReactionSeverityEnum {
  mild
  moderate
  severe
}

"""
FHIRAllergyIntoleranceInput: input for AllergyIntolerance
"""
input FHIRAllergyIntoleranceInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
  """
  Identifier: [FHIRIdentifierInput]

  """
  The clinical status of the allergy or intolerance.
  """
  ClinicalStatus: FHIRCodeableConceptInput!

  """
  Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
  """
  VerificationStatus: FHIRCodeableConceptInput!

  """
  Identification of the underlying physiological mechanism for the reaction risk.
  """
  Type: AllergyIntoleranceTypeEnum

  """
  Category of the identified substance.
  """
  Category: [AllergyIntoleranceCategoryEnum]

  """
  Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
  """
  Criticality: AllergyIntoleranceCriticalityEnum!

  """
  Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
  """
  Code: FHIRCodeableConceptInput!

  """
  The patient who has the allergy or intolerance.
  """
  Patient: FHIRReferenceInput!

  """
  The encounter when the allergy or intolerance was asserted.
  """
  Encounter: FHIRReferenceInput

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetDateTime: Date

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetAge: FHIRAgeInput

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetPeriod: FHIRPeriodInput

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetRange: FHIRRangeInput

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetString: String

  """
  The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
  """
  RecordedDate: Date

  """
  Individual who recorded the record and takes responsibility for its content.
  """
  Recorder: FHIRReferenceInput

  """
  The source of the information about the allergy that is recorded.
  """
  Asserter: FHIRReferenceInput

  """
  Represents the date and/or time of the last known occurrence of a reaction event.
  """
  LastOccurrence: DateTime

  """
  Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
  """
  Note: [FHIRAnnotationInput]

  """
  Details about each adverse reaction event linked to exposure to the identified substance.
  """
  Reaction: [FHIRAllergyintoleranceReactionInput]
}

"""
FHIRAllergyintoleranceReactionInput: input for AllergyintoleranceReaction
"""
input FHIRAllergyintoleranceReactionInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
  """
  Substance: FHIRCodeableConceptInput

  """
  Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
  """
  Manifestation: [FHIRCodeableConceptInput!]!

  """
  Text description about the reaction as a whole, including details of the manifestation if required.
  """
  Description: String

  """
  Record of the date and/or time of the onset of the Reaction.
  """
  Onset: DateTime

  """
  Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
  """
  Severity: AllergyIntoleranceReactionSeverityEnum

  """
  Identification of the route by which the subject was exposed to the substance.
  """
  ExposureRoute: FHIRCodeableConceptInput

  """
  Additional text about the adverse reaction event not captured in other fields.
  """
  Note: [FHIRAnnotationInput]
}

"""
FHIRAllergyintoleranceReaction definition: risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
"""
type FHIRAllergyintoleranceReaction {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
  """
  Substance: FHIRCodeableConcept

  """
  Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
  """
  Manifestation: [FHIRCodeableConcept!]!

  """
  Text description about the reaction as a whole, including details of the manifestation if required.
  """
  Description: String

  """
  Record of the date and/or time of the onset of the Reaction.
  """
  Onset: DateTime

  """
  Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
  """
  Severity: AllergyIntoleranceReactionSeverityEnum

  """
  Identification of the route by which the subject was exposed to the substance.
  """
  ExposureRoute: FHIRCodeableConcept

  """
  Additional text about the adverse reaction event not captured in other fields.
  """
  Note: [FHIRAnnotation]
}

"""
FHIRAllergyIntolerance definition: risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
"""
type FHIRAllergyIntolerance {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
  """
  Identifier: [FHIRIdentifier]

  """
  The clinical status of the allergy or intolerance.
  """
  ClinicalStatus: FHIRCodeableConcept!

  """
  Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
  """
  VerificationStatus: FHIRCodeableConcept!

  """
  Identification of the underlying physiological mechanism for the reaction risk.
  """
  Type: AllergyIntoleranceTypeEnum

  """
  Category of the identified substance.
  """
  Category: [AllergyIntoleranceCategoryEnum]

  """
  Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
  """
  Criticality: AllergyIntoleranceCriticalityEnum!

  """
  Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
  """
  Code: FHIRCodeableConcept

  """
  The patient who has the allergy or intolerance.
  """
  Patient: FHIRReference!

  """
  The encounter when the allergy or intolerance was asserted.
  """
  Encounter: FHIRReference

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetDateTime: Date

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetAge: FHIRAge

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetPeriod: FHIRPeriod

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetRange: FHIRRange

  """
  Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  """
  OnsetString: String

  """
  The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
  """
  RecordedDate: Date

  """
  Individual who recorded the record and takes responsibility for its content.
  """
  Recorder: FHIRReference

  """
  The source of the information about the allergy that is recorded.
  """
  Asserter: FHIRReference

  """
  Represents the date and/or time of the last known occurrence of a reaction event.
  """
  LastOccurrence: DateTime

  """
  Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
  """
  Note: [FHIRAnnotation]

  """
  Details about each adverse reaction event linked to exposure to the identified substance.
  """
  Reaction: [FHIRAllergyintoleranceReaction]
}

"""
FHIRAllergyIntoleranceRelayPayload is used to return single instances of AllergyIntolerance
"""
type FHIRAllergyIntoleranceRelayPayload {
  resource: FHIRAllergyIntolerance!
}

"""
FHIRAllergyIntoleranceRelayEdge is a Relay edge for AllergyIntolerance
"""
type FHIRAllergyIntoleranceRelayEdge {
  cursor: String
  node: FHIRAllergyIntolerance
}

"""
FHIRAllergyIntoleranceRelayConnection is a Relay connection for AllergyIntolerance
"""
type FHIRAllergyIntoleranceRelayConnection {
  edges: [FHIRAllergyIntoleranceRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Composition.graphql", Input: `"""
CompositionStatusEnum is a FHIR enum
"""
enum CompositionStatusEnum {
  preliminary
  final
  amended
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
}

"""
CompositionAttesterModeEnum is a FHIR enum
"""
enum CompositionAttesterModeEnum {
  personal
  professional
  legal
  official
}

"""
FHIRCompositionInput: input for Composition
"""
input FHIRCompositionInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
  """
  Identifier: FHIRIdentifierInput
  """
  The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
  """
  Status: CompositionStatusEnum
  """
  Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
  """
  Type: FHIRCodeableConceptInput!
  """
  A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
  """
  Category: [FHIRCodeableConceptInput]
  """
  Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
  """
  Subject: FHIRReferenceInput
  """
  Describes the clinical encounter or type of care this documentation is associated with.
  """
  Encounter: FHIRReferenceInput
  """
  The composition editing time, when the composition was last logically changed by the author.
  """
  Date: Date
  """
  Identifies who is responsible for the information in the composition, not necessarily who typed it in.
  """
  Author: [FHIRReferenceInput!]!
  """
  Official human-readable label for the composition.
  """
  Title: String
  """
  The code specifying the level of confidentiality of the Composition.
  """
  Confidentiality: Code
  """
  A participant who has attested to the accuracy of the composition/document.
  """
  Attester: [FHIRCompositionAttesterInput]
  """
  Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
  """
  Custodian: FHIRReferenceInput
  """
  Relationships that this composition has with other compositions or documents that already exist.
  """
  RelatesTo: [FHIRCompositionRelatestoInput]
  """
  The clinical service, such as a colonoscopy or an appendectomy, being documented.
  """
  Event: [FHIRCompositionEventInput]
  """
  The root of the sections that make up the composition.
  """
  Section: [FHIRCompositionSectionInput]
}
"""
FHIRCompositionSectionInput: input for CompositionSection
"""
input FHIRCompositionSectionInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
  """
  Title: String
  """
  A code identifying the kind of content contained within the section. This must be consistent with the section title.
  """
  Code: Code
  """
  Identifies who is responsible for the information in this section, not necessarily who typed it in.
  """
  Author: [FHIRReferenceInput]
  """
  The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
  """
  Focus: FHIRReferenceInput
  """
  A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
  """
  Text: FHIRNarrativeInput
  """
  How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
  """
  Mode: Code
  """
  Specifies the order applied to the items in the section entries.
  """
  OrderedBy: FHIRCodeableConceptInput
  """
  A reference to the actual resource from which the narrative in the section is derived.
  """
  Entry: [FHIRReferenceInput]
  """
  If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
  """
  EmptyReason: FHIRCodeableConceptInput
  """
  A nested sub-section within this section.
  """
  Section: [FHIRCompositionSectionInput]
}
"""
FHIRCompositionRelatestoInput: input for CompositionRelatesto
"""
input FHIRCompositionRelatestoInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The type of relationship that this composition has with anther composition or document.
  """
  Code: Code
  """
  The target composition/document of this relationship.
  """
  TargetIdentifier: FHIRIdentifierInput
  """
  The target composition/document of this relationship.
  """
  TargetReference: FHIRReferenceInput
}
"""
FHIRCompositionEventInput: input for CompositionEvent
"""
input FHIRCompositionEventInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
  """
  Code: Code
  """
  The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
  """
  Period: FHIRPeriodInput
  """
  The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
  """
  Detail: [FHIRReferenceInput]
}
"""
FHIRCompositionAttesterInput: input for CompositionAttester
"""
input FHIRCompositionAttesterInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The type of attestation the authenticator offers.
  """
  Mode: CompositionAttesterModeEnum
  """
  When the composition was attested by the party.
  """
  Time: DateTime
  """
  Who attested the composition in the specified way.
  """
  Party: FHIRReferenceInput
}

"""
FHIRCompositionSection definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
"""
type FHIRCompositionSection {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
  """
  Title: String

  """
  A code identifying the kind of content contained within the section. This must be consistent with the section title.
  """
  Code: Code

  """
  Identifies who is responsible for the information in this section, not necessarily who typed it in.
  """
  Author: [FHIRReference]

  """
  The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
  """
  Focus: FHIRReference

  """
  A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
  """
  Text: FHIRNarrative

  """
  How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
  """
  Mode: Code

  """
  Specifies the order applied to the items in the section entries.
  """
  OrderedBy: FHIRCodeableConcept

  """
  A reference to the actual resource from which the narrative in the section is derived.
  """
  Entry: [FHIRReference]

  """
  If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
  """
  EmptyReason: FHIRCodeableConcept

  """
  A nested sub-section within this section.
  """
  Section: [FHIRCompositionSection]
}

"""
FHIRCompositionRelatesto definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
"""
type FHIRCompositionRelatesto {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The type of relationship that this composition has with anther composition or document.
  """
  Code: Code

  """
  The target composition/document of this relationship.
  """
  TargetIdentifier: FHIRIdentifier

  """
  The target composition/document of this relationship.
  """
  TargetReference: FHIRReference
}

"""
FHIRCompositionEvent definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
"""
type FHIRCompositionEvent {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
  """
  Code: Code

  """
  The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
  """
  Period: FHIRPeriod

  """
  The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
  """
  Detail: [FHIRReference]
}

"""
FHIRCompositionAttester definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
"""
type FHIRCompositionAttester {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The type of attestation the authenticator offers.
  """
  Mode: CompositionAttesterModeEnum

  """
  When the composition was attested by the party.
  """
  Time: Time

  """
  Who attested the composition in the specified way.
  """
  Party: FHIRReference
}

"""
FHIRComposition definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
"""
type FHIRComposition {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
  """
  Identifier: FHIRIdentifier

  """
  The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
  """
  Status: CompositionStatusEnum

  """
  Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
  """
  Type: FHIRCodeableConcept!

  """
  A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
  """
  Category: [FHIRCodeableConcept]

  """
  Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
  """
  Subject: FHIRReference

  """
  Describes the clinical encounter or type of care this documentation is associated with.
  """
  Encounter: FHIRReference

  """
  The composition editing time, when the composition was last logically changed by the author.
  """
  Date: Date

  """
  Identifies who is responsible for the information in the composition, not necessarily who typed it in.
  """
  Author: [FHIRReference!]!

  """
  Official human-readable label for the composition.
  """
  Title: String

  """
  The code specifying the level of confidentiality of the Composition.
  """
  Confidentiality: Code

  """
  A participant who has attested to the accuracy of the composition/document.
  """
  Attester: [FHIRCompositionAttester]

  """
  Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
  """
  Custodian: FHIRReference

  """
  Relationships that this composition has with other compositions or documents that already exist.
  """
  RelatesTo: [FHIRCompositionRelatesto]

  """
  The clinical service, such as a colonoscopy or an appendectomy, being documented.
  """
  Event: [FHIRCompositionEvent]

  """
  The root of the sections that make up the composition.
  """
  Section: [FHIRCompositionSection]
}

"""
FHIRCompositionRelayPayload is used to return single instances of Composition
"""
type FHIRCompositionRelayPayload {
  resource: FHIRComposition!
}

"""
FHIRCompositionRelayEdge is a Relay edge for Composition
"""
type FHIRCompositionRelayEdge {
  cursor: String
  node: FHIRComposition
}

"""
FHIRCompositionRelayConnection is a Relay connection for Composition
"""
type FHIRCompositionRelayConnection {
  edges: [FHIRCompositionRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Condition.graphql", Input: `"""
FHIRConditionInput: input for Condition
"""
input FHIRConditionInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
  """
  Identifier: [FHIRIdentifierInput]

  """
  The clinical status of the condition.
  """
  ClinicalStatus: FHIRCodeableConceptInput

  """
  The verification status to support the clinical status of the condition.
  """
  VerificationStatus: FHIRCodeableConceptInput

  """
  A category assigned to the condition.
  """
  Category: [FHIRCodeableConceptInput]

  """
  A subjective assessment of the severity of the condition as evaluated by the clinician.
  """
  Severity: FHIRCodeableConceptInput

  """
  Identification of the condition, problem or diagnosis.
  """
  Code: FHIRCodeableConceptInput

  """
  The anatomical location where this condition manifests itself.
  """
  BodySite: [FHIRCodeableConceptInput]

  """
  Indicates the patient or group who the condition record is associated with.
  """
  Subject: FHIRReferenceInput!

  """
  The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
  """
  Encounter: FHIRReferenceInput

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetDateTime: Date

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetAge: FHIRAgeInput

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetPeriod: FHIRPeriodInput

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetRange: FHIRRangeInput

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetString: String

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementDateTime: Date

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementAge: FHIRAgeInput

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementPeriod: FHIRPeriodInput

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementRange: FHIRRangeInput

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementString: String

  """
  The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
  """
  RecordedDate: Date

  """
  Individual who recorded the record and takes responsibility for its content.
  """
  Recorder: FHIRReferenceInput

  """
  Individual who is making the condition statement.
  """
  Asserter: FHIRReferenceInput

  """
  Clinical stage or grade of a condition. May include formal severity assessments.
  """
  Stage: [FHIRConditionStageInput]

  """
  Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
  """
  Evidence: [FHIRConditionEvidenceInput]

  """
  Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
  """
  Note: [FHIRAnnotationInput]
}

"""
FHIRConditionStageInput: input for ConditionStage
"""
input FHIRConditionStageInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
  """
  Summary: FHIRCodeableConceptInput

  """
  Reference to a formal record of the evidence on which the staging assessment is based.
  """
  Assessment: [FHIRReferenceInput]

  """
  The kind of staging, such as pathological or clinical staging.
  """
  Type: FHIRCodeableConceptInput
}

"""
FHIRConditionEvidenceInput: input for ConditionEvidence
"""
input FHIRConditionEvidenceInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A manifestation or symptom that led to the recording of this condition.
  """
  Code: FHIRCodeableConceptInput

  """
  Links to other relevant information, including pathology reports.
  """
  Detail: [FHIRReferenceInput]
}

"""
FHIRConditionStage definition: a clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
"""
type FHIRConditionStage {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
  """
  Summary: FHIRCodeableConcept

  """
  Reference to a formal record of the evidence on which the staging assessment is based.
  """
  Assessment: [FHIRReference]

  """
  The kind of staging, such as pathological or clinical staging.
  """
  Type: FHIRCodeableConcept
}

"""
FHIRConditionEvidence definition: a clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
"""
type FHIRConditionEvidence {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A manifestation or symptom that led to the recording of this condition.
  """
  Code: FHIRCodeableConcept

  """
  Links to other relevant information, including pathology reports.
  """
  Detail: [FHIRReference]
}

"""
FHIRCondition definition: a clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
"""
type FHIRCondition {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
  """
  Identifier: [FHIRIdentifier]

  """
  The clinical status of the condition.
  """
  ClinicalStatus: FHIRCodeableConcept

  """
  The verification status to support the clinical status of the condition.
  """
  VerificationStatus: FHIRCodeableConcept

  """
  A category assigned to the condition.
  """
  Category: [FHIRCodeableConcept]

  """
  A subjective assessment of the severity of the condition as evaluated by the clinician.
  """
  Severity: FHIRCodeableConcept

  """
  Identification of the condition, problem or diagnosis.
  """
  Code: FHIRCodeableConcept

  """
  The anatomical location where this condition manifests itself.
  """
  BodySite: [FHIRCodeableConcept]

  """
  Indicates the patient or group who the condition record is associated with.
  """
  Subject: FHIRReference!

  """
  The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
  """
  Encounter: FHIRReference

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetDateTime: Date

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetAge: FHIRAge

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetPeriod: FHIRPeriod

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetRange: FHIRRange

  """
  Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
  """
  OnsetString: String

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementDateTime: Date

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementAge: FHIRAge

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementPeriod: FHIRPeriod

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementRange: FHIRRange

  """
  The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
  """
  AbatementString: String

  """
  The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
  """
  RecordedDate: Date

  """
  Individual who recorded the record and takes responsibility for its content.
  """
  Recorder: FHIRReference

  """
  Individual who is making the condition statement.
  """
  Asserter: FHIRReference

  """
  Clinical stage or grade of a condition. May include formal severity assessments.
  """
  Stage: [FHIRConditionStage]

  """
  Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
  """
  Evidence: [FHIRConditionEvidence]

  """
  Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
  """
  Note: [FHIRAnnotation]
}

"""
FHIRConditionRelayPayload is used to return single instances of Condition
"""
type FHIRConditionRelayPayload {
  resource: FHIRCondition!
}

"""
FHIRConditionRelayEdge is a Relay edge for Condition
"""
type FHIRConditionRelayEdge {
  cursor: String
  node: FHIRCondition
}

"""
FHIRConditionRelayConnection is a Relay connection for Condition
"""
type FHIRConditionRelayConnection {
  edges: [FHIRConditionRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Encounter.graphql", Input: `"""
EncounterStatusEnum is a FHIR enum
"""
enum EncounterStatusEnum {
  planned
  arrived
  triaged
  in_progress # ` + "`" + `original: in-progress` + "`" + `
  onleave
  finished
  cancelled
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
  unknown
}

"""
EncounterStatusHistoryStatusEnum is a FHIR enum
"""
enum EncounterStatusHistoryStatusEnum {
  planned
  arrived
  triaged
  in_progress # ` + "`" + `original: in-progress` + "`" + `
  onleave
  finished
  cancelled
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
  unknown
}

"""
EncounterLocationStatusEnum is a FHIR enum
"""
enum EncounterLocationStatusEnum {
  planned
  active
  reserved
  completed
}

"""
FHIREncounterInput: input for Encounter
"""
input FHIREncounterInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  Identifier(s) by which this encounter is known.
  """
  Identifier: [FHIRIdentifierInput!]!
  """
  planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
  """
  Status: EncounterStatusEnum!
  """
  The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
  """
  StatusHistory: [FHIREncounterStatushistoryInput]
  """
  Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
  """
  Class: FHIRCodingInput!
  """
  The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
  """
  ClassHistory: [FHIREncounterClasshistoryInput]
  """
  Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
  """
  Type: [FHIRCodeableConceptInput]
  """
  Broad categorization of the service that is to be provided (e.g. cardiology).
  """
  ServiceType: FHIRCodeableConceptInput
  """
  Indicates the urgency of the encounter.
  """
  Priority: FHIRCodeableConceptInput
  """
  The patient or group present at the encounter.
  """
  Subject: FHIRReferenceInput
  """
  Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
  """
  EpisodeOfCare: [FHIRReferenceInput]
  """
  The request this encounter satisfies (e.g. incoming referral or procedure request).
  """
  BasedOn: [FHIRReferenceInput]
  """
  The list of people responsible for providing the service.
  """
  Participant: [FHIREncounterParticipantInput]
  """
  The appointment that scheduled this encounter.
  """
  Appointment: [FHIRReferenceInput]
  """
  The start and end time of the encounter.
  """
  Period: FHIRPeriodInput
  """
  Quantity of time the encounter lasted. This excludes the time during leaves of absence.
  """
  Length: FHIRDurationInput
  """
  Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
  """
  ReasonCode: Code
  """
  Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
  """
  ReasonReference: [FHIRReferenceInput]
  """
  The list of diagnosis relevant to this encounter.
  """
  Diagnosis: [FHIREncounterDiagnosisInput]
  """
  The set of accounts that may be used for billing for this Encounter.
  """
  Account: [FHIRReferenceInput]
  """
  Details about the admission to a healthcare service.
  """
  Hospitalization: FHIREncounterHospitalizationInput
  """
  List of locations where  the patient has been during this encounter.
  """
  Location: [FHIREncounterLocationInput]
  """
  The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed separately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
  """
  ServiceProvider: FHIRReferenceInput
  """
  Another Encounter of which this encounter is a part of (administratively or in time).
  """
  PartOf: FHIRReferenceInput
}
"""
FHIREncounterStatushistoryInput: input for EncounterStatushistory
"""
input FHIREncounterStatushistoryInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
  """
  Status: EncounterStatusHistoryStatusEnum
  """
  The time that the episode was in the specified status.
  """
  Period: FHIRPeriodInput!
}
"""
FHIREncounterParticipantInput: input for EncounterParticipant
"""
input FHIREncounterParticipantInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Role of participant in encounter.
  """
  Type: [FHIRCodeableConceptInput]
  """
  The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
  """
  Period: FHIRPeriodInput
  """
  Persons involved in the encounter other than the patient.
  """
  Individual: FHIRReferenceInput
}
"""
FHIREncounterLocationInput: input for EncounterLocation
"""
input FHIREncounterLocationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The location where the encounter takes place.
  """
  Location: FHIRReferenceInput!
  """
  The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
  """
  Status: EncounterLocationStatusEnum
  """
  This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
  """
  PhysicalType: FHIRCodeableConceptInput
  """
  Time period during which the patient was present at the location.
  """
  Period: FHIRPeriodInput
}
"""
FHIREncounterHospitalizationInput: input for EncounterHospitalization
"""
input FHIREncounterHospitalizationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Pre-admission identifier.
  """
  PreAdmissionIdentifier: FHIRIdentifierInput
  """
  The location/organization from which the patient came before admission.
  """
  Origin: FHIRReferenceInput
  """
  From where patient was admitted (physician referral, transfer).
  """
  AdmitSource: FHIRCodeableConceptInput
  """
  Whether this hospitalization is a readmission and why if known.
  """
  ReAdmission: FHIRCodeableConceptInput
  """
  Diet preferences reported by the patient.
  """
  DietPreference: [FHIRCodeableConceptInput]
  """
  Special courtesies (VIP, board member).
  """
  SpecialCourtesy: [FHIRCodeableConceptInput]
  """
  Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
  """
  SpecialArrangement: [FHIRCodeableConceptInput]
  """
  Location/organization to which the patient is discharged.
  """
  Destination: FHIRReferenceInput
  """
  Category or kind of location after discharge.
  """
  DischargeDisposition: FHIRCodeableConceptInput
}
"""
FHIREncounterDiagnosisInput: input for EncounterDiagnosis
"""
input FHIREncounterDiagnosisInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
  """
  Condition: FHIRReferenceInput!
  """
  Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
  """
  Use: FHIRCodeableConceptInput
  """
  Ranking of the diagnosis (for each role type).
  """
  Rank: PositiveInt
}
"""
FHIREncounterClasshistoryInput: input for EncounterClasshistory
"""
input FHIREncounterClasshistoryInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  inpatient | outpatient | ambulatory | emergency +.
  """
  Class: FHIRCodingInput!
  """
  The time that the episode was in the specified class.
  """
  Period: FHIRPeriodInput!
}

"""
FHIREncounterStatushistory definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounterStatushistory {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
  """
  Status: EncounterStatusHistoryStatusEnum

  """
  The time that the episode was in the specified status.
  """
  Period: FHIRPeriod!
}

"""
FHIREncounterParticipant definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounterParticipant {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Role of participant in encounter.
  """
  Type: [FHIRCodeableConcept]

  """
  The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
  """
  Period: FHIRPeriod

  """
  Persons involved in the encounter other than the patient.
  """
  Individual: FHIRReference
}

"""
FHIREncounterLocation definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounterLocation {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The location where the encounter takes place.
  """
  Location: FHIRReference!

  """
  The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
  """
  Status: EncounterLocationStatusEnum

  """
  This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
  """
  PhysicalType: FHIRCodeableConcept

  """
  Time period during which the patient was present at the location.
  """
  Period: FHIRPeriod
}

"""
FHIREncounterHospitalization definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounterHospitalization {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Pre-admission identifier.
  """
  PreAdmissionIdentifier: FHIRIdentifier

  """
  The location/organization from which the patient came before admission.
  """
  Origin: FHIRReference

  """
  From where patient was admitted (physician referral, transfer).
  """
  AdmitSource: FHIRCodeableConcept

  """
  Whether this hospitalization is a readmission and why if known.
  """
  ReAdmission: FHIRCodeableConcept

  """
  Diet preferences reported by the patient.
  """
  DietPreference: [FHIRCodeableConcept]

  """
  Special courtesies (VIP, board member).
  """
  SpecialCourtesy: [FHIRCodeableConcept]

  """
  Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
  """
  SpecialArrangement: [FHIRCodeableConcept]

  """
  Location/organization to which the patient is discharged.
  """
  Destination: FHIRReference

  """
  Category or kind of location after discharge.
  """
  DischargeDisposition: FHIRCodeableConcept
}

"""
FHIREncounterDiagnosis definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounterDiagnosis {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
  """
  Condition: FHIRReference!

  """
  Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
  """
  Use: FHIRCodeableConcept

  """
  Ranking of the diagnosis (for each role type).
  """
  Rank: PositiveInt
}

"""
FHIREncounterClasshistory definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounterClasshistory {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  inpatient | outpatient | ambulatory | emergency +.
  """
  Class: FHIRCoding!

  """
  The time that the episode was in the specified class.
  """
  Period: FHIRPeriod!
}

"""
FHIREncounter definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
"""
type FHIREncounter {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  Identifier(s) by which this encounter is known.
  """
  Identifier: [FHIRIdentifier!]!

  """
  planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
  """
  Status: EncounterStatusEnum!

  """
  The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
  """
  StatusHistory: [FHIREncounterStatushistory]

  """
  Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
  """
  Class: FHIRCoding!

  """
  The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
  """
  ClassHistory: [FHIREncounterClasshistory]

  """
  Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
  """
  Type: [FHIRCodeableConcept]

  """
  Broad categorization of the service that is to be provided (e.g. cardiology).
  """
  ServiceType: FHIRCodeableConcept

  """
  Indicates the urgency of the encounter.
  """
  Priority: FHIRCodeableConcept

  """
  The patient or group present at the encounter.
  """
  Subject: FHIRReference

  """
  Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
  """
  EpisodeOfCare: [FHIRReference]

  """
  The request this encounter satisfies (e.g. incoming referral or procedure request).
  """
  BasedOn: [FHIRReference]

  """
  The list of people responsible for providing the service.
  """
  Participant: [FHIREncounterParticipant]

  """
  The appointment that scheduled this encounter.
  """
  Appointment: [FHIRReference]

  """
  The start and end time of the encounter.
  """
  Period: FHIRPeriod

  """
  Quantity of time the encounter lasted. This excludes the time during leaves of absence.
  """
  Length: FHIRDuration

  """
  Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
  """
  ReasonCode: Code

  """
  Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
  """
  ReasonReference: [FHIRReference]

  """
  The list of diagnosis relevant to this encounter.
  """
  Diagnosis: [FHIREncounterDiagnosis]

  """
  The set of accounts that may be used for billing for this Encounter.
  """
  Account: [FHIRReference]

  """
  Details about the admission to a healthcare service.
  """
  Hospitalization: FHIREncounterHospitalization

  """
  List of locations where  the patient has been during this encounter.
  """
  Location: [FHIREncounterLocation]

  """
  The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed separately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
  """
  ServiceProvider: FHIRReference

  """
  Another Encounter of which this encounter is a part of (administratively or in time).
  """
  PartOf: FHIRReference
}

"""
FHIREncounterRelayPayload is used to return single instances of Encounter
"""
type FHIREncounterRelayPayload {
  resource: FHIREncounter!
}

"""
FHIREncounterRelayEdge is a Relay edge for Encounter
"""
type FHIREncounterRelayEdge {
  cursor: String
  node: FHIREncounter
}

"""
FHIREncounterRelayConnection is a Relay connection for Encounter
"""
type FHIREncounterRelayConnection {
  edges: [FHIREncounterRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/EpisodeOfCare.graphql", Input: `"""
EpisodeOfCareStatusEnum is a FHIR enum
"""
enum EpisodeOfCareStatusEnum {
  planned
  waitlist
  active
  onhold
  finished
  cancelled
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
}

"""
EpisodeOfCareStatusHistoryStatusEnum is a FHIR enum
"""
enum EpisodeOfCareStatusHistoryStatusEnum {
  planned
  waitlist
  active
  onhold
  finished
  cancelled
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
}

"""
FHIREpisodeOfCareInput: input for EpisodeOfCare
"""
input FHIREpisodeOfCareInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
  """
  Identifier: [FHIRIdentifierInput]
  """
  planned | waitlist | active | onhold | finished | cancelled.
  """
  Status: EpisodeOfCareStatusEnum
  """
  The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
  """
  StatusHistory: [FHIREpisodeofcareStatushistoryInput]
  """
  A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
  """
  Type: [FHIRCodeableConceptInput]
  """
  The list of diagnosis relevant to this episode of care.
  """
  Diagnosis: [FHIREpisodeofcareDiagnosisInput]
  """
  The patient who is the focus of this episode of care.
  """
  Patient: FHIRReferenceInput!
  """
  The organization that has assumed the specific responsibilities for the specified duration.
  """
  ManagingOrganization: FHIRReferenceInput
  """
  The interval during which the managing organization assumes the defined responsibility.
  """
  Period: FHIRPeriodInput
  """
  Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
  """
  ReferralRequest: [FHIRReferenceInput]
  """
  The practitioner that is the care manager/care coordinator for this patient.
  """
  CareManager: FHIRReferenceInput
  """
  The list of practitioners that may be facilitating this episode of care for specific purposes.
  """
  Team: [FHIRReferenceInput]
  """
  The set of accounts that may be used for billing for this EpisodeOfCare.
  """
  Account: [FHIRReferenceInput]
}
"""
FHIREpisodeofcareStatushistoryInput: input for EpisodeofcareStatushistory
"""
input FHIREpisodeofcareStatushistoryInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  planned | waitlist | active | onhold | finished | cancelled.
  """
  Status: EpisodeOfCareStatusHistoryStatusEnum
  """
  The period during this EpisodeOfCare that the specific status applied.
  """
  Period: FHIRPeriodInput!
}
"""
FHIREpisodeofcareDiagnosisInput: input for EpisodeofcareDiagnosis
"""
input FHIREpisodeofcareDiagnosisInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
  """
  Condition: FHIRReferenceInput!
  """
  Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
  """
  Role: FHIRCodeableConceptInput
  """
  Ranking of the diagnosis (for each role type).
  """
  Rank: PositiveInt
}

"""
FHIREpisodeofcareStatushistory definition: an association between a patient and an organization / healthcare provider(s) during which time encounters may occur. the managing organization assumes a level of responsibility for the patient during this time.
"""
type FHIREpisodeofcareStatushistory {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  planned | waitlist | active | onhold | finished | cancelled.
  """
  Status: EpisodeOfCareStatusHistoryStatusEnum

  """
  The period during this EpisodeOfCare that the specific status applied.
  """
  Period: FHIRPeriod!
}

"""
FHIREpisodeofcareDiagnosis definition: an association between a patient and an organization / healthcare provider(s) during which time encounters may occur. the managing organization assumes a level of responsibility for the patient during this time.
"""
type FHIREpisodeofcareDiagnosis {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
  """
  Condition: FHIRReference!

  """
  Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
  """
  Role: FHIRCodeableConcept

  """
  Ranking of the diagnosis (for each role type).
  """
  Rank: PositiveInt
}

"""
FHIREpisodeOfCare definition: an association between a patient and an organization / healthcare provider(s) during which time encounters may occur. the managing organization assumes a level of responsibility for the patient during this time.
"""
type FHIREpisodeOfCare {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
  """
  Identifier: [FHIRIdentifier]

  """
  planned | waitlist | active | onhold | finished | cancelled.
  """
  Status: EpisodeOfCareStatusEnum

  """
  The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
  """
  StatusHistory: [FHIREpisodeofcareStatushistory]

  """
  A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
  """
  Type: [FHIRCodeableConcept]

  """
  The list of diagnosis relevant to this episode of care.
  """
  Diagnosis: [FHIREpisodeofcareDiagnosis]

  """
  The patient who is the focus of this episode of care.
  """
  Patient: FHIRReference!

  """
  The organization that has assumed the specific responsibilities for the specified duration.
  """
  ManagingOrganization: FHIRReference

  """
  The interval during which the managing organization assumes the defined responsibility.
  """
  Period: FHIRPeriod

  """
  Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
  """
  ReferralRequest: [FHIRReference]

  """
  The practitioner that is the care manager/care coordinator for this patient.
  """
  CareManager: FHIRReference

  """
  The list of practitioners that may be facilitating this episode of care for specific purposes.
  """
  Team: [FHIRReference]

  """
  The set of accounts that may be used for billing for this EpisodeOfCare.
  """
  Account: [FHIRReference]
}

"""
FHIREpisodeOfCareRelayPayload is used to return single instances of EpisodeOfCare
"""
type FHIREpisodeOfCareRelayPayload {
  resource: FHIREpisodeOfCare!
}

"""
FHIREpisodeOfCareRelayEdge is a Relay edge for EpisodeOfCare
"""
type FHIREpisodeOfCareRelayEdge {
  cursor: String
  node: FHIREpisodeOfCare
}

"""
FHIREpisodeOfCareRelayConnection is a Relay connection for EpisodeOfCare
"""
type FHIREpisodeOfCareRelayConnection {
  edges: [FHIREpisodeOfCareRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Medication.graphql", Input: `"""
MedicationStatusEnum
"""
enum MedicationStatusEnum {
  active
  inactive
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
}

"""
FHIRMedicationInput
"""
input FHIRMedicationInput {
  ID: ID

  Text: FHIRNarrativeInput

  Identifier: [FHIRIdentifierInput]

  Code: FHIRCodeableConceptInput

  Status: MedicationStatusEnum

  Manufacturer: FHIROrganizationInput

  Form: FHIRCodeableConceptInput

  Amount: FHIRRatioInput

  Ingredient: [MedicationIngredientInput]

  Batch: MedicationBatchInput
}

"""
MedicationBatchInput
"""
input MedicationBatchInput {
  LotNumber: String

  ExpirationDate: Date
}

"""
MedicationIngredientInput
"""
input MedicationIngredientInput {
  ItemCodelabConcept: FHIRCodeableConceptInput

  ItemReference: FHIRReferenceInput

  IsActive: Boolean

  Strength: FHIRRatioInput
}

"""
FHIRMedication
"""
type FHIRMedication {
  ID: ID

  Text: FHIRNarrative

  Identifier: [FHIRIdentifier]

  Code: FHIRCodeableConcept

  Status: MedicationStatusEnum

  Manufacturer: FHIROrganization

  Form: FHIRCodeableConcept

  Amount: FHIRRatio

  Ingredient: [MedicationIngredient]

  Batch: MedicationBatch
}

"""
MedicationBatch
"""
type MedicationBatch {
  LotNumber: String

  ExpirationDate: Date
}

"""
MedicationIngredient
"""
type MedicationIngredient {
  ItemCodelabConcept: FHIRCodeableConcept

  ItemReference: FHIRReference

  IsActive: Boolean

  Strength: FHIRRatio
}

"""
FHIRMedicationRelayConnection is a Relay connection for MedicationStatement
"""
type FHIRMedicationRelayConnection {
  edges: [FHIRMedicationRelayEdge]
  pageInfo: PageInfo
}

"""
FHIRMedicationRelayEdge is a Relay edge for Medication
"""
type FHIRMedicationRelayEdge {
  cursor: String
  node: FHIRMedication
}

"""
FHIRMedicationRelayPayload is used to return single instances of Medication
"""
type FHIRMedicationRelayPayload {
  resource: FHIRMedication
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/MedicationRequest.graphql", Input: `"""
FHIRMedicationRequestInput: input for MedicationRequest
"""
input FHIRMedicationRequestInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
  """
  Identifier: [FHIRIdentifierInput]
  """
  A code specifying the current state of the order.  Generally, this will be active or completed state.
  """
  Status: Code
  """
  Captures the reason for the current state of the MedicationRequest.
  """
  StatusReason: FHIRCodeableConceptInput
  """
  Whether the request is a proposal, plan, or an original order.
  """
  Intent: Code
  """
  Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
  """
  Category: [FHIRCodeableConceptInput]
  """
  Indicates how quickly the Medication Request should be addressed with respect to other requests.
  """
  Priority: Code
  """
  If true indicates that the provider is asking for the medication request not to occur.
  """
  DoNotPerform: Boolean
  """
  Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  """
  ReportedBoolean: Boolean
  """
  Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  """
  ReportedReference: FHIRReferenceInput
  """
  Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
  """
  MedicationCodeableConcept: FHIRCodeableConceptInput
  """
  Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
  """
  MedicationReference: FHIRReferenceInput
  """
  A link to a resource representing the person or set of individuals to whom the medication will be given.
  """
  Subject: FHIRReferenceInput!
  """
  The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
  """
  Encounter: FHIRReferenceInput
  """
  Include additional information (for example, patient height and weight) that supports the ordering of the medication.
  """
  SupportingInformation: [FHIRReferenceInput]
  """
  The date (and perhaps time) when the prescription was initially written or authored on.
  """
  AuthoredOn: DateTime
  """
  The individual, organization, or device that initiated the request and has responsibility for its activation.
  """
  Requester: FHIRReferenceInput
  """
  The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
  """
  Performer: FHIRReferenceInput
  """
  Indicates the type of performer of the administration of the medication.
  """
  PerformerType: FHIRCodeableConceptInput
  """
  The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
  """
  Recorder: FHIRReferenceInput
  """
  The reason or the indication for ordering or not ordering the medication.
  """
  ReasonCode: Code
  """
  Condition or observation that supports why the medication was ordered.
  """
  ReasonReference: [FHIRReferenceInput]
  """
  The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
  """
  InstantiatesCanonical: Canonical
  """
  The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
  """
  InstantiatesURI: Instant
  """
  A plan or request that is fulfilled in whole or in part by this medication request.
  """
  BasedOn: [FHIRReferenceInput]
  """
  A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
  """
  GroupIdentifier: FHIRIdentifierInput
  """
  The description of the overall patte3rn of the administration of the medication to the patient.
  """
  CourseOfTherapyType: FHIRCodeableConceptInput
  """
  Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
  """
  Insurance: [FHIRReferenceInput]
  """
  Extra information about the prescription that could not be conveyed by the other attributes.
  """
  Note: [FHIRAnnotationInput]
  """
  Indicates how the medication is to be used by the patient.
  """
  DosageInstruction: [FHIRDosageInput]
  """
  Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  """
  DispenseRequest: FHIRMedicationrequestDispenserequestInput
  """
  Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  """
  Substitution: FHIRMedicationrequestSubstitutionInput
  """
  A link to a resource representing an earlier order related order or prescription.
  """
  PriorPrescription: FHIRReferenceInput
  """
  Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
  """
  DetectedIssue: [FHIRReferenceInput]
  """
  Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
  """
  EventHistory: [FHIRReferenceInput]
}
"""
FHIRMedicationrequestSubstitutionInput: input for MedicationrequestSubstitution
"""
input FHIRMedicationrequestSubstitutionInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  True if the prescriber allows a different drug to be dispensed from what was prescribed.
  """
  AllowedBoolean: Boolean
  """
  True if the prescriber allows a different drug to be dispensed from what was prescribed.
  """
  AllowedCodeableConcept: Code
  """
  Indicates the reason for the substitution, or why substitution must or must not be performed.
  """
  Reason: FHIRCodeableConceptInput
}
"""
FHIRMedicationrequestInitialfillInput: input for MedicationrequestInitialfill
"""
input FHIRMedicationrequestInitialfillInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The amount or quantity to provide as part of the first dispense.
  """
  Quantity: FHIRQuantityInput
  """
  The length of time that the first dispense is expected to last.
  """
  Duration: FHIRDurationInput
}
"""
FHIRMedicationrequestDispenserequestInput: input for MedicationrequestDispenserequest
"""
input FHIRMedicationrequestDispenserequestInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Indicates the quantity or duration for the first dispense of the medication.
  """
  InitialFill: FHIRMedicationrequestInitialfillInput
  """
  The minimum period of time that must occur between dispenses of the medication.
  """
  DispenseInterval: FHIRDurationInput
  """
  This indicates the validity period of a prescription (stale dating the Prescription).
  """
  ValidityPeriod: FHIRPeriodInput
  """
  An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
  """
  NumberOfRepeatsAllowed: UnsignedInt
  """
  The amount that is to be dispensed for one fill.
  """
  Quantity: FHIRQuantityInput
  """
  Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
  """
  ExpectedSupplyDuration: FHIRDurationInput
  """
  Indicates the intended dispensing Organization specified by the prescriber.
  """
  Performer: FHIRReferenceInput
}

"""
FHIRMedicationrequestSubstitution definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
"""
type FHIRMedicationrequestSubstitution {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  True if the prescriber allows a different drug to be dispensed from what was prescribed.
  """
  AllowedBoolean: Boolean

  """
  True if the prescriber allows a different drug to be dispensed from what was prescribed.
  """
  AllowedCodeableConcept: Code

  """
  Indicates the reason for the substitution, or why substitution must or must not be performed.
  """
  Reason: FHIRCodeableConcept
}

"""
FHIRMedicationrequestInitialfill definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
"""
type FHIRMedicationrequestInitialfill {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The amount or quantity to provide as part of the first dispense.
  """
  Quantity: FHIRQuantity

  """
  The length of time that the first dispense is expected to last.
  """
  Duration: FHIRDuration
}

"""
FHIRMedicationrequestDispenserequest definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
"""
type FHIRMedicationrequestDispenserequest {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Indicates the quantity or duration for the first dispense of the medication.
  """
  InitialFill: FHIRMedicationrequestInitialfill

  """
  The minimum period of time that must occur between dispenses of the medication.
  """
  DispenseInterval: FHIRDuration

  """
  This indicates the validity period of a prescription (stale dating the Prescription).
  """
  ValidityPeriod: FHIRPeriod

  """
  An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
  """
  NumberOfRepeatsAllowed: UnsignedInt

  """
  The amount that is to be dispensed for one fill.
  """
  Quantity: FHIRQuantity

  """
  Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
  """
  ExpectedSupplyDuration: FHIRDuration

  """
  Indicates the intended dispensing Organization specified by the prescriber.
  """
  Performer: FHIRReference
}

"""
FHIRMedicationRequest definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
"""
type FHIRMedicationRequest {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
  """
  Identifier: [FHIRIdentifier]

  """
  A code specifying the current state of the order.  Generally, this will be active or completed state.
  """
  Status: Code

  """
  Captures the reason for the current state of the MedicationRequest.
  """
  StatusReason: FHIRCodeableConcept

  """
  Whether the request is a proposal, plan, or an original order.
  """
  Intent: Code

  """
  Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
  """
  Category: [FHIRCodeableConcept]

  """
  Indicates how quickly the Medication Request should be addressed with respect to other requests.
  """
  Priority: Code

  """
  If true indicates that the provider is asking for the medication request not to occur.
  """
  DoNotPerform: Boolean

  """
  Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  """
  ReportedBoolean: Boolean

  """
  Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
  """
  ReportedReference: FHIRReference

  """
  Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
  """
  MedicationCodeableConcept: FHIRCodeableConcept

  """
  Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
  """
  MedicationReference: FHIRReference

  """
  A link to a resource representing the person or set of individuals to whom the medication will be given.
  """
  Subject: FHIRReference!

  """
  The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
  """
  Encounter: FHIRReference

  """
  Include additional information (for example, patient height and weight) that supports the ordering of the medication.
  """
  SupportingInformation: [FHIRReference]

  """
  The date (and perhaps time) when the prescription was initially written or authored on.
  """
  AuthoredOn: DateTime

  """
  The individual, organization, or device that initiated the request and has responsibility for its activation.
  """
  Requester: FHIRReference

  """
  The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
  """
  Performer: FHIRReference

  """
  Indicates the type of performer of the administration of the medication.
  """
  PerformerType: FHIRCodeableConcept

  """
  The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
  """
  Recorder: FHIRReference

  """
  The reason or the indication for ordering or not ordering the medication.
  """
  ReasonCode: Code

  """
  Condition or observation that supports why the medication was ordered.
  """
  ReasonReference: [FHIRReference]

  """
  The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
  """
  InstantiatesCanonical: Canonical

  """
  The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
  """
  InstantiatesURI: Instant

  """
  A plan or request that is fulfilled in whole or in part by this medication request.
  """
  BasedOn: [FHIRReference]

  """
  A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
  """
  GroupIdentifier: FHIRIdentifier

  """
  The description of the overall patte3rn of the administration of the medication to the patient.
  """
  CourseOfTherapyType: FHIRCodeableConcept

  """
  Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
  """
  Insurance: [FHIRReference]

  """
  Extra information about the prescription that could not be conveyed by the other attributes.
  """
  Note: [FHIRAnnotation]

  """
  Indicates how the medication is to be used by the patient.
  """
  DosageInstruction: [FHIRDosage]

  """
  Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
  """
  DispenseRequest: FHIRMedicationrequestDispenserequest

  """
  Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
  """
  Substitution: FHIRMedicationrequestSubstitution

  """
  A link to a resource representing an earlier order related order or prescription.
  """
  PriorPrescription: FHIRReference

  """
  Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
  """
  DetectedIssue: [FHIRReference]

  """
  Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
  """
  EventHistory: [FHIRReference]
}

"""
FHIRMedicationRequestRelayPayload is used to return single instances of MedicationRequest
"""
type FHIRMedicationRequestRelayPayload {
  resource: FHIRMedicationRequest!
}

"""
FHIRMedicationRequestRelayEdge is a Relay edge for MedicationRequest
"""
type FHIRMedicationRequestRelayEdge {
  cursor: String
  node: FHIRMedicationRequest
}

"""
FHIRMedicationRequestRelayConnection is a Relay connection for MedicationRequest
"""
type FHIRMedicationRequestRelayConnection {
  edges: [FHIRMedicationRequestRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/MedicationStatement.graphql", Input: `"""
MedicationStatementStatusEnum is a FHIR enum
"""
enum MedicationStatementStatusEnum {
  active
  inactive
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
  intended
  stopped
  on_hold # ` + "`" + `original: on-hold` + "`" + `
  unknown
  not_taken # ` + "`" + `original: not-taken` + "`" + `
}

"""
FHIRMedicationStatementInput: input for medication statement
"""
input FHIRMedicationStatementInput {
  ID: ID

  Text: FHIRNarrativeInput

  Identifier: [FHIRIdentifierInput]

  BasedOn: [FHIRReferenceInput]

  PartOf: [FHIRReferenceInput]

  Status: MedicationStatementStatusEnum

  StatusReason: [FHIRCodeableConceptInput]

  Category: FHIRCodeableConceptInput

  MedicationCodeableConcept: FHIRCodeableConceptInput

  MedicationReference: FHIRMedicationInput

  Subject: FHIRReferenceInput

  Context: FHIRReferenceInput

  EffectiveDateTime: Date

  EffectivePeriod: FHIRPeriodInput

  DateAsserted: Date

  InformationSource: FHIRReferenceInput

  DerivedFrom: [FHIRReferenceInput]

  ReasonCode: [FHIRCodeableConceptInput]

  ReasonReference: [FHIRReferenceInput]

  Note: [FHIRAnnotationInput]

  Dosage: [FHIRDosageInput]
}

"""
FHIRMedicationStatement definition: A record of a medication that is being consumed by a patient. A MedicationStatement may indicate that the patient may be taking the medication now or in the past or in the future.
"""
type FHIRMedicationStatement {
  ID: ID

  Text: FHIRNarrative

  Identifier: [FHIRIdentifier]

  BasedOn: [FHIRReference]

  PartOf: [FHIRReference]

  Status: MedicationStatementStatusEnum

  StatusReason: [FHIRCodeableConcept]

  Category: FHIRCodeableConcept

  MedicationCodeableConcept: FHIRCodeableConcept

  MedicationReference: FHIRMedication

  Subject: FHIRReference

  Context: FHIRReference

  EffectiveDateTime: Date

  EffectivePeriod: FHIRPeriod

  DateAsserted: Date

  InformationSource: FHIRReference

  DerivedFrom: [FHIRReference]

  ReasonCode: [FHIRCodeableConcept]

  ReasonReference: [FHIRReference]

  Note: [FHIRAnnotation]

  Dosage: [FHIRDosage]
}
"""
FHIRMedicationStatementRelayConnection is a Relay connection for MedicationStatement
"""
type FHIRMedicationStatementRelayConnection {
  edges: [FHIRMedicationStatementRelayEdge]
  pageInfo: PageInfo!
}

"""
FHIRMedicationStatementRelayEdge is a Relay edge for MedicationStatement
"""
type FHIRMedicationStatementRelayEdge {
  cursor: String
  node: FHIRMedicationStatement
}

"""
FHIRMedicationStatementRelayPayload is used to return single instances of MedicationStatement
"""
type FHIRMedicationStatementRelayPayload {
  resource: FHIRMedicationStatement
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Observation.graphql", Input: `"""
ObservationStatusEnum is a FHIR enum
"""
enum ObservationStatusEnum {
  registered
  preliminary
  final
  amended
  corrected
  cancelled
  entered_in_error # ` + "`" + `original: entered-in-error` + "`" + `
  unknown
}

"""
FHIRObservationInput: input for Observation
"""
input FHIRObservationInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A unique identifier assigned to this observation.
  """
  Identifier: [FHIRIdentifierInput]
  """
  A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
  """
  BasedOn: [FHIRReferenceInput]
  """
  A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
  """
  PartOf: [FHIRReferenceInput]
  """
  The status of the result value.
  """
  Status: ObservationStatusEnum
  """
  A code that classifies the general type of observation being made.
  """
  Category: [FHIRCodeableConceptInput]
  """
  Describes what was observed. Sometimes this is called the observation "name".
  """
  Code: FHIRCodeableConceptInput!
  """
  The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the ` + "`" + `focus` + "`" + ` element or the ` + "`" + `code` + "`" + ` itself specifies the actual focus of the observation.
  """
  Subject: FHIRReferenceInput
  """
  The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
  """
  Focus: [FHIRReferenceInput]
  """
  The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
  """
  Encounter: FHIRReferenceInput
  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectiveDateTime: Date
  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectivePeriod: FHIRPeriodInput
  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectiveTiming: FHIRTimingInput
  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectiveInstant: Instant
  """
  The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
  """
  Issued: Instant
  """
  Who was responsible for asserting the observed value as "true".
  """
  Performer: [FHIRReferenceInput]
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueQuantity: FHIRQuantityInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueCodeableConcept: Code
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueString: String
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueBoolean: Boolean
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueInteger: Integer
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRange: FHIRRangeInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRatio: FHIRRatioInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueSampledData: FHIRSampledDataInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueTime: Time
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueDateTime: Date
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValuePeriod: FHIRPeriodInput
  """
  Provides a reason why the expected value in the element Observation.value[x] is missing.
  """
  DataAbsentReason: FHIRCodeableConceptInput
  """
  A categorical assessment of an observation value.  For example, high, low, normal.
  """
  Interpretation: [FHIRCodeableConceptInput]
  """
  Comments about the observation or the results.
  """
  Note: [FHIRAnnotationInput]
  """
  Indicates the site on the subject's body where the observation was made (i.e. the target site).
  """
  BodySite: FHIRCodeableConceptInput
  """
  Indicates the mechanism used to perform the observation.
  """
  Method: FHIRCodeableConceptInput
  """
  The specimen that was used when this observation was made.
  """
  Specimen: FHIRReferenceInput
  """
  The device used to generate the observation data.
  """
  Device: FHIRReferenceInput
  """
  Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two ` + "`" + `referenceRange` + "`" + ` elements would be used.
  """
  ReferenceRange: [FHIRObservationReferencerangeInput]
  """
  This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
  """
  HasMember: [FHIRReferenceInput]
  """
  The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
  """
  DerivedFrom: [FHIRReferenceInput]
  """
  Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
  """
  Component: [FHIRObservationComponentInput]
}
"""
FHIRObservationReferencerangeInput: input for ObservationReferencerange
"""
input FHIRObservationReferencerangeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
  """
  Low: FHIRQuantityInput
  """
  The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
  """
  High: FHIRQuantityInput
  """
  Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
  """
  Type: FHIRCodeableConceptInput
  """
  Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple ` + "`" + `appliesTo` + "`" + `  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
  """
  AppliesTo: [FHIRCodeableConceptInput]
  """
  The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
  """
  Age: FHIRRangeInput
  """
  Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
  """
  Text: String
}
"""
FHIRObservationComponentInput: input for ObservationComponent
"""
input FHIRObservationComponentInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Describes what was observed. Sometimes this is called the observation "code".
  """
  Code: FHIRCodeableConceptInput!
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueQuantity: FHIRQuantityInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueCodeableConcept: Code
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueString: String
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueBoolean: Boolean
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueInteger: Integer
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRange: FHIRRangeInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRatio: FHIRRatioInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueSampledData: FHIRSampledDataInput
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueTime: Time
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueDateTime: Date
  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValuePeriod: FHIRPeriodInput
  """
  Provides a reason why the expected value in the element Observation.component.value[x] is missing.
  """
  DataAbsentReason: FHIRCodeableConceptInput
  """
  A categorical assessment of an observation value.  For example, high, low, normal.
  """
  Interpretation: [FHIRCodeableConceptInput]
  """
  Guidance on how to interpret the value by comparison to a normal or recommended range.
  """
  ReferenceRange: [FHIRObservationReferencerangeInput]
}

"""
FHIRObservationReferencerange definition: measurements and simple assertions made about a patient, device or other subject.
"""
type FHIRObservationReferencerange {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
  """
  Low: FHIRQuantity

  """
  The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
  """
  High: FHIRQuantity

  """
  Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
  """
  Type: FHIRCodeableConcept

  """
  Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple ` + "`" + `appliesTo` + "`" + `  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
  """
  AppliesTo: [FHIRCodeableConcept]

  """
  The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
  """
  Age: FHIRRange

  """
  Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
  """
  Text: String
}

"""
FHIRObservationComponent definition: measurements and simple assertions made about a patient, device or other subject.
"""
type FHIRObservationComponent {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Describes what was observed. Sometimes this is called the observation "code".
  """
  Code: FHIRCodeableConcept!

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueQuantity: FHIRQuantity

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueCodeableConcept: Code

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueString: String

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueBoolean: Boolean

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueInteger: Integer

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRange: FHIRRange

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRatio: FHIRRatio

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueSampledData: FHIRSampledData

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueTime: Time

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueDateTime: Date

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValuePeriod: FHIRPeriod

  """
  Provides a reason why the expected value in the element Observation.component.value[x] is missing.
  """
  DataAbsentReason: FHIRCodeableConcept

  """
  A categorical assessment of an observation value.  For example, high, low, normal.
  """
  Interpretation: [FHIRCodeableConcept]

  """
  Guidance on how to interpret the value by comparison to a normal or recommended range.
  """
  ReferenceRange: [FHIRObservationReferencerange]
}

"""
FHIRObservation definition: measurements and simple assertions made about a patient, device or other subject.
"""
type FHIRObservation {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  A unique identifier assigned to this observation.
  """
  Identifier: [FHIRIdentifier]

  """
  A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
  """
  BasedOn: [FHIRReference]

  """
  A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
  """
  PartOf: [FHIRReference]

  """
  The status of the result value.
  """
  Status: ObservationStatusEnum

  """
  A code that classifies the general type of observation being made.
  """
  Category: [FHIRCodeableConcept]

  """
  Describes what was observed. Sometimes this is called the observation "name".
  """
  Code: FHIRCodeableConcept!

  """
  The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the ` + "`" + `focus` + "`" + ` element or the ` + "`" + `code` + "`" + ` itself specifies the actual focus of the observation.
  """
  Subject: FHIRReference

  """
  The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
  """
  Focus: [FHIRReference]

  """
  The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
  """
  Encounter: FHIRReference

  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectiveDateTime: Date

  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectivePeriod: FHIRPeriod

  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectiveTiming: FHIRTiming

  """
  The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
  """
  EffectiveInstant: Instant

  """
  The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
  """
  Issued: Instant

  """
  Who was responsible for asserting the observed value as "true".
  """
  Performer: [FHIRReference]

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueQuantity: FHIRQuantity

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueCodeableConcept: Code

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueString: String

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueBoolean: Boolean

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueInteger: Integer

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRange: FHIRRange

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueRatio: FHIRRatio

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueSampledData: FHIRSampledData

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueTime: Time

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValueDateTime: Date

  """
  The information determined as a result of making the observation, if the information has a simple value.
  """
  ValuePeriod: FHIRPeriod

  """
  Provides a reason why the expected value in the element Observation.value[x] is missing.
  """
  DataAbsentReason: FHIRCodeableConcept

  """
  A categorical assessment of an observation value.  For example, high, low, normal.
  """
  Interpretation: [FHIRCodeableConcept]

  """
  Comments about the observation or the results.
  """
  Note: [FHIRAnnotation]

  """
  Indicates the site on the subject's body where the observation was made (i.e. the target site).
  """
  BodySite: FHIRCodeableConcept

  """
  Indicates the mechanism used to perform the observation.
  """
  Method: FHIRCodeableConcept

  """
  The specimen that was used when this observation was made.
  """
  Specimen: FHIRReference

  """
  The device used to generate the observation data.
  """
  Device: FHIRReference

  """
  Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two ` + "`" + `referenceRange` + "`" + ` elements would be used.
  """
  ReferenceRange: [FHIRObservationReferencerange]

  """
  This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
  """
  HasMember: [FHIRReference]

  """
  The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
  """
  DerivedFrom: [FHIRReference]

  """
  Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
  """
  Component: [FHIRObservationComponent]
}

"""
FHIRObservationRelayPayload is used to return single instances of Observation
"""
type FHIRObservationRelayPayload {
  resource: FHIRObservation!
}

"""
FHIRObservationRelayEdge is a Relay edge for Observation
"""
type FHIRObservationRelayEdge {
  cursor: String
  node: FHIRObservation
}

"""
FHIRObservationRelayConnection is a Relay connection for Observation
"""
type FHIRObservationRelayConnection {
  edges: [FHIRObservationRelayEdge]
  pageInfo: PageInfo!
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Organization.graphql", Input: `"""
FHIROrganizationInput: input for Organization
"""
input FHIROrganizationInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  An identifier for this organization
  """
  Identifier: [FHIRIdentifierInput]
  """
  Whether this organization record is in active use.
  """

  Active: Boolean
  
  """
  Specific type of organization (e.g. Healthcare Provider, Hospital Department, Insurance Company).
  """
  Type: [FHIRCodeableConceptInput]

  """
  A name associated with the organization.
  """

  Name: String
  """
  An alternate name for the organization.
  """
  Alias: [String]
  
  """
  A contact detail (e.g. a telephone number or an email address) by which the organization may be contacted.
  """
  Telecom: [FHIRContactPointInput]
  
  """
  An address for the organization.
  """
  Address: [FHIRAddressInput]

}

type FHIROrganization {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  An identifier for this organization.
  """
  Identifier: [FHIRIdentifier]

  """
  Whether this organization record is in active use.
  """
  Active: Boolean

  """
  Specific type of organization (e.g. Healthcare Provider, Hospital Department, Insurance Company).
  """
  Type: [FHIRCodeableConcept]

  """
  A name associated with the organization.
  """
  Name: String

  """
  An alternate name for the organization.
  """
  Alias: [String]

  """
  A contact detail (e.g. a telephone number or an email address) by which the organization may be contacted.
  """
  Telecom: [FHIRContactPoint]

  """
  An address for the organization.
  """
  Address: [FHIRAddress]

}

"""
FHIROrganizationRelayPayload is used to return single instances of Organization
"""
type FHIROrganizationRelayPayload  {
  resource: FHIROrganization!
}

"""
FHIROrganizationRelayEdge is a Relay edge for Organization
"""
type FHIROrganizationRelayEdge {
  cursor: String
  node: FHIROrganization
}

"""
FHIROrganizationRelayConnection is a Relay connection for Organization
"""
type FHIROrganizationRelayConnection {
  edges: [FHIROrganizationRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/Patient.graphql", Input: `"""
PatientGenderEnum is a FHIR enum
"""
enum PatientGenderEnum {
  male
  female
  other
  unknown
}

"""
PatientLinkTypeEnum is a FHIR enum
"""
enum PatientLinkTypeEnum {
  replaced_by # ` + "`" + `original: replaced-by` + "`" + `
  replaces
  refer
  seealso
}

"""
PatientContactGenderEnum is a FHIR enum
"""
enum PatientContactGenderEnum {
  male
  female
  other
  unknown
}

"""
FHIRPatientInput: input for Patient
"""
input FHIRPatientInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  An identifier for this patient.
  """
  Identifier: [FHIRIdentifierInput]
  """
      Whether this patient record is in active use.
  Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.

  It is often used to filter patient lists to exclude inactive patients

  Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
  """
  Active: Boolean
  """
  A name associated with the individual.
  """
  Name: [FHIRHumanNameInput]
  """
  A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
  """
  Telecom: [FHIRContactPointInput]
  """
  Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
  """
  Gender: PatientGenderEnum
  """
  The date of birth for the individual.
  """
  BirthDate: Date
  """
  Indicates if the individual is deceased or not.
  """
  DeceasedBoolean: Boolean
  """
  Indicates if the individual is deceased or not.
  """
  DeceasedDateTime: Date
  """
  An address for the individual.
  """
  Address: [FHIRAddressInput]
  """
  This field contains a patient's most recent marital (civil) status.
  """
  MaritalStatus: FHIRCodeableConceptInput
  """
  Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
  """
  MultipleBirthBoolean: Boolean
  """
  Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
  """
  MultipleBirthInteger: Integer
  """
  Image of the patient.
  """
  Photo: [FHIRAttachmentInput]
  """
  A contact party (e.g. guardian, partner, friend) for the patient.
  """
  Contact: [FHIRPatientContactInput]
  """
  A language which may be used to communicate with the patient about his or her health.
  """
  Communication: [FHIRPatientCommunicationInput]
  """
  Patient's nominated care provider.
  """
  GeneralPractitioner: [FHIRReferenceInput]
  """
  Organization that is the custodian of the patient record.
  """
  ManagingOrganization: FHIRReferenceInput
  """
  Link to another patient resource that concerns the same actual patient.
  """
  Link: [FHIRPatientLinkInput]
}
"""
FHIRPatientLinkInput: input for PatientLink
"""
input FHIRPatientLinkInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The other patient resource that the link refers to.
  """
  Other: FHIRReferenceInput!
  """
  The type of link between this patient resource and another patient resource.
  """
  Type: PatientLinkTypeEnum
}
"""
FHIRPatientContactInput: input for PatientContact
"""
input FHIRPatientContactInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The nature of the relationship between the patient and the contact person.
  """
  Relationship: [FHIRCodeableConceptInput]
  """
  A name associated with the contact person.
  """
  Name: FHIRHumanNameInput
  """
  A contact detail for the person, e.g. a telephone number or an email address.
  """
  Telecom: [FHIRContactPointInput]
  """
  Address for the contact person.
  """
  Address: FHIRAddressInput
  """
  Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
  """
  Gender: PatientContactGenderEnum
  """
  Organization on behalf of which the contact is acting or for which the contact is working.
  """
  Organization: FHIRReferenceInput
  """
  The period during which this contact person or organization is valid to be contacted relating to this patient.
  """
  Period: FHIRPeriodInput
}
"""
FHIRPatientCommunicationInput: input for PatientCommunication
"""
input FHIRPatientCommunicationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
  """
  Language: FHIRCodeableConceptInput!
  """
  Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
  """
  Preferred: Boolean
}

"""
FHIRPatientLink definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
"""
type FHIRPatientLink {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The other patient resource that the link refers to.
  """
  Other: FHIRReference!

  """
  The type of link between this patient resource and another patient resource.
  """
  Type: PatientLinkTypeEnum
}

"""
FHIRPatientContact definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
"""
type FHIRPatientContact {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The nature of the relationship between the patient and the contact person.
  """
  Relationship: [FHIRCodeableConcept]

  """
  A name associated with the contact person.
  """
  Name: FHIRHumanName

  """
  A contact detail for the person, e.g. a telephone number or an email address.
  """
  Telecom: [FHIRContactPoint]

  """
  Address for the contact person.
  """
  Address: FHIRAddress

  """
  Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
  """
  Gender: PatientContactGenderEnum

  """
  Organization on behalf of which the contact is acting or for which the contact is working.
  """
  Organization: FHIRReference

  """
  The period during which this contact person or organization is valid to be contacted relating to this patient.
  """
  Period: FHIRPeriod
}

"""
FHIRPatientCommunication definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
"""
type FHIRPatientCommunication {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
  """
  Language: FHIRCodeableConcept!

  """
  Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
  """
  Preferred: Boolean
}

"""
FHIRPatient definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
"""
type FHIRPatient {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  An identifier for this patient.
  """
  Identifier: [FHIRIdentifier]

  """
      Whether this patient record is in active use.
  Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.

  It is often used to filter patient lists to exclude inactive patients

  Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
  """
  Active: Boolean

  """
  A name associated with the individual.
  """
  Name: [FHIRHumanName]

  """
  A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
  """
  Telecom: [FHIRContactPoint]

  """
  Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
  """
  Gender: PatientGenderEnum

  """
  The date of birth for the individual.
  """
  BirthDate: Date

  """
  Indicates if the individual is deceased or not.
  """
  DeceasedBoolean: Boolean

  """
  Indicates if the individual is deceased or not.
  """
  DeceasedDateTime: Date

  """
  An address for the individual.
  """
  Address: [FHIRAddress]

  """
  This field contains a patient's most recent marital (civil) status.
  """
  MaritalStatus: FHIRCodeableConcept

  """
  Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
  """
  MultipleBirthBoolean: Boolean

  """
  Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
  """
  MultipleBirthInteger: Integer

  """
  Image of the patient.
  """
  Photo: [FHIRAttachment]

  """
  A contact party (e.g. guardian, partner, friend) for the patient.
  """
  Contact: [FHIRPatientContact]

  """
  A language which may be used to communicate with the patient about his or her health.
  """
  Communication: [FHIRPatientCommunication]

  """
  Patient's nominated care provider.
  """
  GeneralPractitioner: [FHIRReference]

  """
  Organization that is the custodian of the patient record.
  """
  ManagingOrganization: FHIRReference

  """
  Link to another patient resource that concerns the same actual patient.
  """
  Link: [FHIRPatientLink]
}

"""
FHIRPatientRelayPayload is used to return single instances of Patient
"""
type FHIRPatientRelayPayload {
  resource: FHIRPatient!
  hasOpenEpisodes: Boolean!
}

"""
FHIRPatientRelayEdge is a Relay edge for Patient
"""
type FHIRPatientRelayEdge {
  cursor: String
  hasOpenEpisodes: Boolean!
  node: FHIRPatient
}

"""
FHIRPatientRelayConnection is a Relay connection for Patient
"""
type FHIRPatientRelayConnection {
  edges: [FHIRPatientRelayEdge]
  hasOpenEpisodes: Boolean!
  pageInfo: PageInfo!
}
`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/ServiceRequest.graphql", Input: `"""
FHIRServiceRequestInput: input for ServiceRequest
"""
input FHIRServiceRequestInput {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
  """
  Identifier: [FHIRIdentifierInput]
  """
  The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
  """
  InstantiatesCanonical: Canonical
  """
  The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
  """
  InstantiatesURI: Instant
  """
  Plan/proposal/order fulfilled by this request.
  """
  BasedOn: [FHIRReferenceInput]
  """
  The request takes the place of the referenced completed or terminated request(s).
  """
  Replaces: [FHIRReferenceInput]
  """
  A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
  """
  Requisition: FHIRIdentifierInput
  """
  The status of the order.
  """
  Status: Code
  """
  Whether the request is a proposal, plan, an original order or a reflex order.
  """
  Intent: Code
  """
  A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
  """
  Category: [FHIRCodeableConceptInput]
  """
  Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
  """
  Priority: Code
  """
  Set this to true if the record is saying that the service/procedure should NOT be performed.
  """
  DoNotPerform: Boolean
  """
  A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
  """
  Code: FHIRCodeableConceptInput
  """
  Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
  """
  OrderDetail: [FHIRCodeableConceptInput]
  """
  An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  """
  QuantityQuantity: FHIRQuantityInput
  """
  An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  """
  QuantityRatio: FHIRRatioInput
  """
  An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  """
  QuantityRange: FHIRRangeInput
  """
  On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
  """
  Subject: FHIRReferenceInput!
  """
  An encounter that provides additional information about the healthcare context in which this request is made.
  """
  Encounter: FHIRReferenceInput
  """
  The date/time at which the requested service should occur.
  """
  OccurrenceDateTime: Date
  """
  The date/time at which the requested service should occur.
  """
  OccurrencePeriod: FHIRPeriodInput
  """
  The date/time at which the requested service should occur.
  """
  OccurrenceTiming: FHIRTimingInput
  """
  If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
  """
  AsNeededBoolean: Boolean
  """
  If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
  """
  AsNeededCodeableConcept: Code
  """
  When the request transitioned to being actionable.
  """
  AuthoredOn: DateTime
  """
  The individual who initiated the request and has responsibility for its activation.
  """
  Requester: FHIRReferenceInput
  """
  Desired type of performer for doing the requested service.
  """
  PerformerType: FHIRCodeableConceptInput
  """
  The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
  """
  Performer: [FHIRReferenceInput]
  """
  The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
  """
  LocationCode: Code
  """
  A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
  """
  LocationReference: [FHIRReferenceInput]
  """
  An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in ` + "`" + `supportingInfo` + "`" + `.
  """
  ReasonCode: Code
  """
  Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in ` + "`" + `supportingInfo` + "`" + `.
  """
  ReasonReference: [FHIRReferenceInput]
  """
  Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
  """
  Insurance: [FHIRReferenceInput]
  """
  Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
  """
  SupportingInfo: [FHIRReferenceInput]
  """
  One or more specimens that the laboratory procedure will use.
  """
  Specimen: [FHIRReferenceInput]
  """
  Anatomic location where the procedure should be performed. This is the target site.
  """
  BodySite: [FHIRCodeableConceptInput]
  """
  Any other notes and comments made about the service request. For example, internal billing notes.
  """
  Note: [FHIRAnnotationInput]
  """
  Instructions in terms that are understood by the patient or consumer.
  """
  PatientInstruction: String
  """
  Key events in the history of the request.
  """
  RelevantHistory: [FHIRReferenceInput]
}

"""
FHIRServiceRequest definition: a record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
"""
type FHIRServiceRequest {
  """
  The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  """
  ID: ID

  """
  A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  """
  Text: FHIRNarrative

  """
  Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
  """
  Identifier: [FHIRIdentifier]

  """
  The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
  """
  InstantiatesCanonical: Canonical

  """
  The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
  """
  InstantiatesURI: Instant

  """
  Plan/proposal/order fulfilled by this request.
  """
  BasedOn: [FHIRReference]

  """
  The request takes the place of the referenced completed or terminated request(s).
  """
  Replaces: [FHIRReference]

  """
  A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
  """
  Requisition: FHIRIdentifier

  """
  The status of the order.
  """
  Status: Code

  """
  Whether the request is a proposal, plan, an original order or a reflex order.
  """
  Intent: Code

  """
  A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
  """
  Category: [FHIRCodeableConcept]

  """
  Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
  """
  Priority: Code

  """
  Set this to true if the record is saying that the service/procedure should NOT be performed.
  """
  DoNotPerform: Boolean

  """
  A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
  """
  Code: FHIRCodeableConcept

  """
  Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
  """
  OrderDetail: [FHIRCodeableConcept]

  """
  An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  """
  QuantityQuantity: FHIRQuantity

  """
  An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  """
  QuantityRatio: FHIRRatio

  """
  An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
  """
  QuantityRange: FHIRRange

  """
  On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
  """
  Subject: FHIRReference!

  """
  An encounter that provides additional information about the healthcare context in which this request is made.
  """
  Encounter: FHIRReference

  """
  The date/time at which the requested service should occur.
  """
  OccurrenceDateTime: Date

  """
  The date/time at which the requested service should occur.
  """
  OccurrencePeriod: FHIRPeriod

  """
  The date/time at which the requested service should occur.
  """
  OccurrenceTiming: FHIRTiming

  """
  If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
  """
  AsNeededBoolean: Boolean

  """
  If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
  """
  AsNeededCodeableConcept: Code

  """
  When the request transitioned to being actionable.
  """
  AuthoredOn: DateTime

  """
  The individual who initiated the request and has responsibility for its activation.
  """
  Requester: FHIRReference

  """
  Desired type of performer for doing the requested service.
  """
  PerformerType: FHIRCodeableConcept

  """
  The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
  """
  Performer: [FHIRReference]

  """
  The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
  """
  LocationCode: Code

  """
  A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
  """
  LocationReference: [FHIRReference]

  """
  An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in ` + "`" + `supportingInfo` + "`" + `.
  """
  ReasonCode: Code

  """
  Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in ` + "`" + `supportingInfo` + "`" + `.
  """
  ReasonReference: [FHIRReference]

  """
  Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
  """
  Insurance: [FHIRReference]

  """
  Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
  """
  SupportingInfo: [FHIRReference]

  """
  One or more specimens that the laboratory procedure will use.
  """
  Specimen: [FHIRReference]

  """
  Anatomic location where the procedure should be performed. This is the target site.
  """
  BodySite: [FHIRCodeableConcept]

  """
  Any other notes and comments made about the service request. For example, internal billing notes.
  """
  Note: [FHIRAnnotation]

  """
  Instructions in terms that are understood by the patient or consumer.
  """
  PatientInstruction: String

  """
  Key events in the history of the request.
  """
  RelevantHistory: [FHIRReference]
}

"""
FHIRServiceRequestRelayPayload is used to return single instances of ServiceRequest
"""
type FHIRServiceRequestRelayPayload {
  resource: FHIRServiceRequest!
}

"""
FHIRServiceRequestRelayEdge is a Relay edge for ServiceRequest
"""
type FHIRServiceRequestRelayEdge {
  cursor: String
  node: FHIRServiceRequest
}

"""
FHIRServiceRequestRelayConnection is a Relay connection for ServiceRequest
"""
type FHIRServiceRequestRelayConnection {
  edges: [FHIRServiceRequestRelayEdge]
  pageInfo: PageInfo!
}

`, BuiltIn: false},
	{Name: "pkg/clinical/presentation/graph/fhir/complex_types.graphql", Input: `
"""
FHIRTimingRepeatInput: input for TimingRepeat
"""
input FHIRTimingRepeatInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsDuration: FHIRDurationInput
  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsRange: FHIRRangeInput
  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsPeriod: FHIRPeriodInput
  """
  A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
  """
  Count: PositiveInt
  """
  If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
  """
  CountMax: PositiveInt
  """
  How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
  """
  Duration: Decimal
  """
  If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
  """
  DurationMax: Decimal
  """
  The units of time for the duration, in UCUM units.
  """
  DurationUnit: TimingRepeatDurationUnitEnum
  """
  The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
  """
  Frequency: PositiveInt
  """
  If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
  """
  FrequencyMax: PositiveInt
  """
  Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
  """
  Period: Decimal
  """
  If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
  """
  PeriodMax: Decimal
  """
  The units of time for the period in UCUM units.
  """
  PeriodUnit: TimingRepeatPeriodUnitEnum
  """
  If one or more days of week is provided, then the action happens only on the specified day(s).
  """
  DayOfWeek: Code
  """
  Specified time of day for action to take place.
  """
  TimeOfDay: Time
  """
  An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
  """
  When: TimingRepeatWhenEnum
  """
  The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
  """
  Offset: Int
}
"""
FHIRTimingInput: input for Timing
"""
input FHIRTimingInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identifies specific times when the event occurs.
  """
  Event: DateTime
  """
  A set of rules that describe when the event is scheduled.
  """
  Repeat: FHIRTimingRepeatInput
  """
  A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
  """
  Code: Code!
}

"""
FHIRSampledDataInput: input for SampledData
"""
input FHIRSampledDataInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
  """
  Origin: FHIRQuantityInput!
  """
  The length of time between sampling times, measured in milliseconds.
  """
  Period: Decimal
  """
  A correction factor that is applied to the sampled data points before they are added to the origin.
  """
  Factor: Decimal
  """
  The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
  """
  LowerLimit: Decimal
  """
  The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
  """
  UpperLimit: Decimal
  """
  The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
  """
  Dimensions: PositiveInt
  """
  A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
  """
  Data: String
}

"""
FHIRReferenceInput: input for Reference
"""
input FHIRReferenceInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
  """
  Reference: String
  """
      The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
  """
  Type: URI
  """
  An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
  """
  Identifier: FHIRIdentifierInput
  """
  Plain text narrative that identifies the resource in addition to the resource reference.
  """
  Display: String!
}

"""
FHIRRangeInput: input for Range
"""
input FHIRRangeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The low limit. The boundary is inclusive.
  """
  Low: FHIRQuantityInput
  """
  The high limit. The boundary is inclusive.
  """
  High: FHIRQuantityInput
}
"""
FHIRQuantityInput: input for Quantity
"""
input FHIRQuantityInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Float!
  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: QuantityComparatorEnum
  """
  A human-readable form of the unit.
  """
  Unit: String!
  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI!
  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code!
}

"""
FHIRPeriodInput: input for Period
"""
input FHIRPeriodInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The start of the period. The boundary is inclusive.
  """
  Start: DateTime!
  """
  The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
  """
  End: DateTime!
}

"""
FHIRNarrativeInput: input for Narrative
"""
input FHIRNarrativeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
  """
  Status: NarrativeStatusEnum
  """
  The actual narrative content, a stripped down version of XHTML.
  """
  Div: XHTML!
}

"""
FHIRIdentifierInput: input for Identifier
"""
input FHIRIdentifierInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The purpose of this identifier.
  """
  Use: IdentifierUseEnum!
  """
  A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
  """
  Type: FHIRCodeableConceptInput!
  """
  Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
  """
  System: URI
  """
  The portion of the identifier typically relevant to the user and which is unique within the context of the system.
  """
  Value: String!
  """
  Time period during which identifier is/was valid for use.
  """
  Period: FHIRPeriodInput
  """
  Organization that issued/manages the identifier.
  """
  Assigner: FHIRReferenceInput
}
"""
FHIRHumanNameInput: input for HumanName
"""
input FHIRHumanNameInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identifies the purpose for this name.
  """
  Use: HumanNameUseEnum!
  """
  Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
  """
  Text: String!
  """
  The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
  """
  Family: String
  """
  Given name.
  """
  Given: [String!]!
  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
  """
  Prefix: [String]
  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
  """
  Suffix: [String]
  """
  Indicates the period of time when this name was valid for the named person.
  """
  Period: FHIRPeriodInput
}

"""
FHIRDurationInput: input for Duration
"""
input FHIRDurationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal
  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: DurationComparatorEnum
  """
  A human-readable form of the unit.
  """
  Unit: String
  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI
  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}
"""
FHIRDosageDoseandrateInput: input for DosageDoseandrate
"""
input FHIRDosageDoseandrateInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The kind of dose or rate specified, for example, ordered or calculated.
  """
  Type: FHIRCodeableConceptInput
  """
  Amount of medication per dose.
  """
  DoseRange: FHIRRangeInput
  """
  Amount of medication per dose.
  """
  DoseQuantity: FHIRQuantityInput
  """
  Amount of medication per unit of time.
  """
  RateRatio: FHIRRatioInput
  """
  Amount of medication per unit of time.
  """
  RateRange: FHIRRangeInput
  """
  Amount of medication per unit of time.
  """
  RateQuantity: FHIRQuantityInput
}
"""
FHIRDosageInput: input for Dosage
"""
input FHIRDosageInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Indicates the order in which the dosage instructions should be applied or interpreted.
  """
  Sequence: Integer
  """
  Free text dosage instructions e.g. SIG.
  """
  Text: String
  """
  Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
  """
  AdditionalInstruction: [FHIRCodeableConceptInput]
  """
  Instructions in terms that are understood by the patient or consumer.
  """
  PatientInstruction: String
  """
  When medication should be administered.
  """
  Timing: FHIRTimingInput
  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededBoolean: Boolean
  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededCodeableConcept: Code
  """
  Body site to administer to.
  """
  Site: FHIRCodeableConceptInput
  """
  How drug should enter body.
  """
  Route: FHIRCodeableConceptInput
  """
  Technique for administering medication.
  """
  Method: FHIRCodeableConceptInput
  """
  The amount of medication administered.
  """
  DoseAndRate: [FHIRDosageDoseandrateInput]
  """
  Upper limit on medication per unit of time.
  """
  MaxDosePerPeriod: FHIRRatioInput
  """
  Upper limit on medication per administration.
  """
  MaxDosePerAdministration: FHIRQuantityInput
  """
  Upper limit on medication per lifetime of the patient.
  """
  MaxDosePerLifetime: FHIRQuantityInput
}

"""
FHIRContactPointInput: input for ContactPoint
"""
input FHIRContactPointInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Telecommunications form for contact point - what communications system is required to make use of the contact.
  """
  System: ContactPointSystemEnum
  """
  The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
  """
  Value: String
  """
  Identifies the purpose for the contact point.
  """
  Use: ContactPointUseEnum
  """
  Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
  """
  Rank: Int
  """
  Time period when the contact point was/is in use.
  """
  Period: FHIRPeriodInput
}

"""
FHIRCodingInput: input for Coding
"""
input FHIRCodingInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The identification of the code system that defines the meaning of the symbol in the code.
  """
  System: URI
  """
  The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
  """
  Version: String
  """
  A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
  """
  Code: Code!
  """
  A representation of the meaning of the code in the system, following the rules of the system.
  """
  Display: String!
  """
  Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
  """
  UserSelected: Boolean
}
"""
FHIRCodeableConceptInput: input for CodeableConcept
"""
input FHIRCodeableConceptInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  A reference to a code defined by a terminology system.
  """
  Coding: [FHIRCodingInput!]!
  """
  A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
  """
  Text: String!
}
"""
FHIRAttachmentInput: input for Attachment
"""
input FHIRAttachmentInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
  """
  ContentType: Code
  """
  The human language of the content. The value can be any valid value according to BCP 47.
  """
  Language: Code
  """
  The actual data of the attachment - a sequence of bytes, base64 encoded.
  """
  Data: Base64Binary
  """
  A location where the data can be accessed.
  """
  URL: URL
  """
  The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
  """
  Size: Int
  """
  The calculated hash of the data using SHA-1. Represented using base64.
  """
  Hash: Base64Binary
  """
  A label or set of text to display in place of the data.
  """
  Title: String
  """
  The date that the attachment was first created.
  """
  Creation: DateTime
}
"""
FHIRAnnotationInput: input for Annotation
"""
input FHIRAnnotationInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The individual responsible for making the annotation.
  """
  AuthorReference: FHIRReferenceInput
  """
  The individual responsible for making the annotation.
  """
  AuthorString: String
  """
  Indicates when this particular annotation was made.
  """
  Time: DateTime
  """
  The text of the annotation in markdown format.
  """
  Text: Markdown
}
"""
FHIRAgeInput: input for Age
"""
input FHIRAgeInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal
  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: AgeComparatorEnum
  """
  A human-readable form of the unit.
  """
  Unit: String
  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI
  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}
"""
FHIRAddressInput: input for Address
"""
input FHIRAddressInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: String

  """
  The purpose of this address.
  """
  Use: AddressUseEnum
  """
  Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
  """
  Type: AddressTypeEnum
  """
  Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
  """
  Text: String!
  """
  This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
  """
  Line: [String]
  """
  The name of the city, town, suburb, village or other community or delivery center.
  """
  City: String
  """
  The name of the administrative area (county).
  """
  District: String
  """
  Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
  """
  State: String
  """
  A postal code designating a region defined by the postal service.
  """
  PostalCode: Code
  """
  Country - a nation as commonly understood or generally accepted.
  """
  Country: String
  """
  Time period when address was/is in use.
  """
  Period: FHIRPeriodInput
}

"""
FHIRTimingRepeat definition: specifies an event that may occur multiple times. timing schedules are used to record when things are planned, expected or requested to occur. the most common usage is in dosage instructions for medications. they are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
"""
type FHIRTimingRepeat {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsDuration: FHIRDuration

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsRange: FHIRRange

  """
  Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
  """
  BoundsPeriod: FHIRPeriod

  """
  A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
  """
  Count: PositiveInt

  """
  If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
  """
  CountMax: PositiveInt

  """
  How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
  """
  Duration: Decimal

  """
  If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
  """
  DurationMax: Decimal

  """
  The units of time for the duration, in UCUM units.
  """
  DurationUnit: TimingRepeatDurationUnitEnum

  """
  The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
  """
  Frequency: PositiveInt

  """
  If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
  """
  FrequencyMax: PositiveInt

  """
  Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
  """
  Period: Decimal

  """
  If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
  """
  PeriodMax: Decimal

  """
  The units of time for the period in UCUM units.
  """
  PeriodUnit: TimingRepeatPeriodUnitEnum

  """
  If one or more days of week is provided, then the action happens only on the specified day(s).
  """
  DayOfWeek: [Code]

  """
  Specified time of day for action to take place.
  """
  TimeOfDay: Time

  """
  An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
  """
  When: TimingRepeatWhenEnum

  """
  The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
  """
  Offset: Int
}

"""
FHIRTiming definition: specifies an event that may occur multiple times. timing schedules are used to record when things are planned, expected or requested to occur. the most common usage is in dosage instructions for medications. they are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
"""
type FHIRTiming {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identifies specific times when the event occurs.
  """
  Event: [DateTime]

  """
  A set of rules that describe when the event is scheduled.
  """
  Repeat: FHIRTimingRepeat

  """
  A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
  """
  Code: Code!
}

"""
FHIRSampledData definition: a series of measurements taken by a device, with upper and lower limits. there may be more than one dimension in the data.
"""
type FHIRSampledData {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
  """
  Origin: FHIRQuantity!

  """
  The length of time between sampling times, measured in milliseconds.
  """
  Period: Decimal

  """
  A correction factor that is applied to the sampled data points before they are added to the origin.
  """
  Factor: Decimal

  """
  The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
  """
  LowerLimit: Decimal

  """
  The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
  """
  UpperLimit: Decimal

  """
  The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
  """
  Dimensions: PositiveInt

  """
  A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
  """
  Data: String
}

"""
FHIRReference definition: a reference from one resource to another.
"""
type FHIRReference {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
  """
  Reference: String

  """
      The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
  """
  Type: URI

  """
  An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
  """
  Identifier: FHIRIdentifier

  """
  Plain text narrative that identifies the resource in addition to the resource reference.
  """
  Display: String!
}

"""
FHIRRatio definition: a relationship of two quantity values - expressed as a numerator and a denominator.
"""
type FHIRRatio {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the numerator.
  """
  Numerator: FHIRQuantity!

  """
  The value of the denominator.
  """
  Denominator: FHIRQuantity!
}


"""
FHIRRatio definition: a relationship of two quantity values - expressed as a numerator and a denominator.
"""
input FHIRRatioInput {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the numerator.
  """
  Numerator: FHIRQuantityInput!

  """
  The value of the denominator.
  """
  Denominator: FHIRQuantityInput!
}

"""
FHIRRange definition: a set of ordered quantities defined by a low and high limit.
"""
type FHIRRange {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The low limit. The boundary is inclusive.
  """
  Low: FHIRQuantity!

  """
  The high limit. The boundary is inclusive.
  """
  High: FHIRQuantity!
}

"""
FHIRQuantity definition: a measured amount (or an amount that can potentially be measured). note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
"""
type FHIRQuantity {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Float!

  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: QuantityComparatorEnum

  """
  A human-readable form of the unit.
  """
  Unit: String!

  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI!

  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code!
}

"""
FHIRPeriod definition: a time period defined by a start and end date and optionally time.
"""
type FHIRPeriod {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The start of the period. The boundary is inclusive.
  """
  Start: DateTime!

  """
  The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
  """
  End: DateTime!
}

"""
FHIRNarrative definition: a human-readable summary of the resource conveying the essential clinical and business information for the resource.
"""
type FHIRNarrative {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
  """
  Status: NarrativeStatusEnum

  """
  The actual narrative content, a stripped down version of XHTML.
  """
  Div: XHTML!
}

"""
FHIRIdentifier definition: an identifier - identifies some entity uniquely and unambiguously. typically this is used for business identifiers.
"""
type FHIRIdentifier {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The purpose of this identifier.
  """
  Use: IdentifierUseEnum!

  """
  A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
  """
  Type: FHIRCodeableConcept!

  """
  Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
  """
  System: URI

  """
  The portion of the identifier typically relevant to the user and which is unique within the context of the system.
  """
  Value: String!

  """
  Time period during which identifier is/was valid for use.
  """
  Period: FHIRPeriod

  """
  Organization that issued/manages the identifier.
  """
  Assigner: FHIRReference
}

"""
FHIRHumanName definition: a human's name with the ability to identify parts and usage.
"""
type FHIRHumanName {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identifies the purpose for this name.
  """
  Use: HumanNameUseEnum!

  """
  Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
  """
  Text: String!

  """
  The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
  """
  Family: String

  """
  Given name.
  """
  Given: [String]

  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
  """
  Prefix: [String]

  """
  Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
  """
  Suffix: [String]

  """
  Indicates the period of time when this name was valid for the named person.
  """
  Period: FHIRPeriod
}

"""
FHIRDuration definition: a length of time.
"""
type FHIRDuration {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal

  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: DurationComparatorEnum

  """
  A human-readable form of the unit.
  """
  Unit: String

  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI

  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}

"""
FHIRDosageDoseandrate definition: indicates how the medication is/was taken or should be taken by the patient.
"""
type FHIRDosageDoseandrate {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The kind of dose or rate specified, for example, ordered or calculated.
  """
  Type: FHIRCodeableConcept

  """
  Amount of medication per dose.
  """
  DoseRange: FHIRRange

  """
  Amount of medication per dose.
  """
  DoseQuantity: FHIRQuantity

  """
  Amount of medication per unit of time.
  """
  RateRatio: FHIRRatio

  """
  Amount of medication per unit of time.
  """
  RateRange: FHIRRange

  """
  Amount of medication per unit of time.
  """
  RateQuantity: FHIRQuantity
}

"""
FHIRDosage definition: indicates how the medication is/was taken or should be taken by the patient.
"""
type FHIRDosage {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Indicates the order in which the dosage instructions should be applied or interpreted.
  """
  Sequence: Integer

  """
  Free text dosage instructions e.g. SIG.
  """
  Text: String

  """
  Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
  """
  AdditionalInstruction: [FHIRCodeableConcept]

  """
  Instructions in terms that are understood by the patient or consumer.
  """
  PatientInstruction: String

  """
  When medication should be administered.
  """
  Timing: FHIRTiming

  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededBoolean: Boolean

  """
  Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  """
  AsNeededCodeableConcept: Code

  """
  Body site to administer to.
  """
  Site: FHIRCodeableConcept

  """
  How drug should enter body.
  """
  Route: FHIRCodeableConcept

  """
  Technique for administering medication.
  """
  Method: FHIRCodeableConcept

  """
  The amount of medication administered.
  """
  DoseAndRate: [FHIRDosageDoseandrate]

  """
  Upper limit on medication per unit of time.
  """
  MaxDosePerPeriod: FHIRRatio

  """
  Upper limit on medication per administration.
  """
  MaxDosePerAdministration: FHIRQuantity

  """
  Upper limit on medication per lifetime of the patient.
  """
  MaxDosePerLifetime: FHIRQuantity
}


"""
FHIRContactPoint definition: details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
"""
type FHIRContactPoint {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Telecommunications form for contact point - what communications system is required to make use of the contact.
  """
  System: ContactPointSystemEnum

  """
  The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
  """
  Value: String

  """
  Identifies the purpose for the contact point.
  """
  Use: ContactPointUseEnum

  """
  Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
  """
  Rank: Int

  """
  Time period when the contact point was/is in use.
  """
  Period: FHIRPeriod
}

"""
FHIRCoding definition: a reference to a code defined by a terminology system.
"""
type FHIRCoding {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The identification of the code system that defines the meaning of the symbol in the code.
  """
  System: URI

  """
  The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
  """
  Version: String

  """
  A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
  """
  Code: Code!

  """
  A representation of the meaning of the code in the system, following the rules of the system.
  """
  Display: String!

  """
  Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
  """
  UserSelected: Boolean
}

"""
FHIRCodeableConcept definition: a concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
"""
type FHIRCodeableConcept {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  A reference to a code defined by a terminology system.
  """
  Coding: [FHIRCoding!]!

  """
  A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
  """
  Text: String!
}

"""
FHIRAttachment definition: for referring to data content defined in other formats.
"""
type FHIRAttachment {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
  """
  ContentType: Code

  """
  The human language of the content. The value can be any valid value according to BCP 47.
  """
  Language: Code

  """
  The actual data of the attachment - a sequence of bytes, base64 encoded.
  """
  Data: Base64Binary

  """
  A location where the data can be accessed.
  """
  URL: URL

  """
  The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
  """
  Size: Int

  """
  The calculated hash of the data using SHA-1. Represented using base64.
  """
  Hash: Base64Binary

  """
  A label or set of text to display in place of the data.
  """
  Title: String

  """
  The date that the attachment was first created.
  """
  Creation: DateTime
}

"""
FHIRAnnotation definition: a  text note which also  contains information about who made the statement and when.
"""
type FHIRAnnotation {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The individual responsible for making the annotation.
  """
  AuthorReference: FHIRReference

  """
  The individual responsible for making the annotation.
  """
  AuthorString: String

  """
  Indicates when this particular annotation was made.
  """
  Time: Time

  """
  The text of the annotation in markdown format.
  """
  Text: Markdown
}

"""
FHIRAge definition: a duration of time during which an organism (or a process) has existed.
"""
type FHIRAge {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The value of the measured amount. The value includes an implicit precision in the presentation of the value.
  """
  Value: Decimal

  """
  How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
  """
  Comparator: AgeComparatorEnum

  """
  A human-readable form of the unit.
  """
  Unit: String

  """
  The identification of the system that provides the coded form of the unit.
  """
  System: URI

  """
  A computer processable form of the unit in some unit representation system.
  """
  Code: Code
}

"""
FHIRAddress definition: an address expressed using postal conventions (as opposed to gps or other location definition formats).  this data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  there are a variety of postal address formats defined around the world.
"""
type FHIRAddress {
  """
  Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  """
  ID: ID

  """
  The purpose of this address.
  """
  Use: AddressUseEnum

  """
  Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
  """
  Type: AddressTypeEnum

  """
  Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
  """
  Text: String!

  """
  This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
  """
  Line: [String]

  """
  The name of the city, town, suburb, village or other community or delivery center.
  """
  City: String

  """
  The name of the administrative area (county).
  """
  District: String

  """
  Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
  """
  State: String

  """
  A postal code designating a region defined by the postal service.
  """
  PostalCode: Code

  """
  Country - a nation as commonly understood or generally accepted.
  """
  Country: String

  """
  Time period when address was/is in use.
  """
  Period: FHIRPeriod
}

"""
ContactPointSystemEnum is a FHIR enum
"""
enum ContactPointSystemEnum {
  phone
  fax
  email
  pager
  url
  sms
  other
}

"""
ContactPointUseEnum is a FHIR enum
"""
enum ContactPointUseEnum {
  home
  work
  temp
  old
  mobile
}

"""
AgeComparatorEnum is a FHIR enum
"""
enum AgeComparatorEnum {
  less_than # ` + "`" + `original: <` + "`" + `
  less_than_or_equal_to # ` + "`" + `original: <=` + "`" + `
  greater_than_or_equal_to # ` + "`" + `original: >=` + "`" + `
  greater_than # ` + "`" + `original: >` + "`" + `
}

"""
AddressUseEnum is a FHIR enum
"""
enum AddressUseEnum {
  home
  work
  temp
  old
  billing
}

"""
AddressTypeEnum is a FHIR enum
"""
enum AddressTypeEnum {
  postal
  physical
  both
}

"""
NarrativeStatusEnum is a FHIR enum
"""
enum NarrativeStatusEnum {
  generated
  extensions
  additional
  empty
}

"""
IdentifierUseEnum is a FHIR enum
"""
enum IdentifierUseEnum {
  usual
  official
  temp
  secondary
  old
}

"""
HumanNameUseEnum is a FHIR enum
"""
enum HumanNameUseEnum {
  usual
  official
  temp
  nickname
  anonymous
  old
  maiden
}

"""
TimingRepeatDurationUnitEnum is a FHIR enum
"""
enum TimingRepeatDurationUnitEnum {
  s
  min
  h
  d
  wk
  mo
  a
}

"""
TimingRepeatPeriodUnitEnum is a FHIR enum
"""
enum TimingRepeatPeriodUnitEnum {
  s
  min
  h
  d
  wk
  mo
  a
}

"""
TimingRepeatWhenEnum is a FHIR enum
"""
enum TimingRepeatWhenEnum {
  MORN
  MORN_early # ` + "`" + `original: MORN.early` + "`" + `
  MORN_late # ` + "`" + `original: MORN.late` + "`" + `
  NOON
  AFT
  AFT_early # ` + "`" + `original: AFT.early` + "`" + `
  AFT_late # ` + "`" + `original: AFT.late` + "`" + `
  EVE
  EVE_early # ` + "`" + `original: EVE.early` + "`" + `
  EVE_late # ` + "`" + `original: EVE.late` + "`" + `
  NIGHT
  PHS
  HS
  WAKE
  C
  CM
  CD
  CV
  AC
  ACM
  ACD
  ACV
  PC
  PCM
  PCD
  PCV
}

"""
QuantityComparatorEnum is a FHIR enum
"""
enum QuantityComparatorEnum {
  less_than # ` + "`" + `original: <` + "`" + `
  less_than_or_equal_to # ` + "`" + `original: <=` + "`" + `
  greater_than_or_equal_to # ` + "`" + `original: >=` + "`" + `
  greater_than # ` + "`" + `original: >` + "`" + `
}

"""
DurationComparatorEnum is a FHIR enum
"""
enum DurationComparatorEnum {
  less_than # ` + "`" + `original: <` + "`" + `
  less_than_or_equal_to # ` + "`" + `original: <=` + "`" + `
  greater_than_or_equal_to # ` + "`" + `original: >=` + "`" + `
  greater_than # ` + "`" + `original: >` + "`" + `
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
	{Name: "federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = Dummy

# fake type to build resolver interfaces for users to implement
type Entity {
		findDummyByID(id: ID!,): Dummy!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Entity_findDummyByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNHIF_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *domain.SimpleNHIFInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOSimpleNHIFInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimpleNHIFInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addNextOfKin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.SimpleNextOfKinInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSimpleNextOfKinInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimpleNextOfKinInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIRAllergyIntolerance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRAllergyIntoleranceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRAllergyIntoleranceInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIRComposition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRCompositionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIRCondition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRConditionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRConditionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIRMedicationRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRMedicationRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRMedicationRequestInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIRObservation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFHIRServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRServiceRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRServiceRequestInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUpdatePatientExtraInformation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.PatientExtraInformationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPatientExtraInformationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientExtraInformationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFHIRComposition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFHIRMedicationRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFHIRObservation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFHIRPatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFHIRServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endEpisode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerPatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.SimplePatientRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSimplePatientRegistrationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimplePatientRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_registerUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.SimplePatientRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSimplePatientRegistrationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimplePatientRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_startEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_startEpisodeByBreakGlass_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.BreakGlassEpisodeCreationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBreakGlassEpisodeCreationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐBreakGlassEpisodeCreationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_startEpisodeByOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OTPEpisodeCreationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOTPEpisodeCreationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐOTPEpisodeCreationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFHIRAllergyIntolerance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRAllergyIntoleranceInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRAllergyIntoleranceInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFHIRComposition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRCompositionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFHIRCondition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRConditionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRConditionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFHIRMedicationRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.FHIRMedicationRequestInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFHIRMedicationRequestInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.SimplePatientRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSimplePatientRegistrationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimplePatientRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_upgradeEpisode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 domain.OTPEpisodeUpgradeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOTPEpisodeUpgradeInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐOTPEpisodeUpgradeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allergySummary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findPatientsByMSISDN_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msisdn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msisdn"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findPatients_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["search"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["search"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMedicalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listConcepts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["org"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["source"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["source"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["verbose"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verbose"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["verbose"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["q"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("q"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["q"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["sortAsc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortAsc"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortAsc"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["sortDesc"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sortDesc"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sortDesc"] = arg5
	var arg6 *string
	if tmp, ok := rawArgs["conceptClass"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conceptClass"))
		arg6, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["conceptClass"] = arg6
	var arg7 *string
	if tmp, ok := rawArgs["dataType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataType"))
		arg7, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataType"] = arg7
	var arg8 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg8, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg8
	var arg9 *bool
	if tmp, ok := rawArgs["includeRetired"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeRetired"))
		arg9, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeRetired"] = arg9
	var arg10 *bool
	if tmp, ok := rawArgs["includeMappings"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeMappings"))
		arg10, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeMappings"] = arg10
	var arg11 *bool
	if tmp, ok := rawArgs["includeInverseMappings"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeInverseMappings"))
		arg11, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeInverseMappings"] = arg11
	return args, nil
}

func (ec *executionContext) field_Query_openEpisodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientReference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientReference"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientReference"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_openOrganizationEpisodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["providerSladeCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerSladeCode"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["providerSladeCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_patientTimelineWithCount_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["count"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["count"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_patientTimeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["count"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["count"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_problemSummary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRAllergyIntolerance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRComposition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRCondition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIREncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRMedicationRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRMedicationStatement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRObservation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchFHIRServiceRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg0, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_visitSummary_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Dummy_id(ctx context.Context, field graphql.CollectedField, obj *domain.Dummy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Dummy",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDummyByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDummyByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDummyByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Dummy)
	fc.Result = res
	return ec.marshalNDummy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDummy(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeOfCarePayload_episodeOfCare(ctx context.Context, field graphql.CollectedField, obj *domain.EpisodeOfCarePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeOfCarePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeOfCare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREpisodeOfCare)
	fc.Result = res
	return ec.marshalNFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) _EpisodeOfCarePayload_totalVisits(ctx context.Context, field graphql.CollectedField, obj *domain.EpisodeOfCarePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EpisodeOfCarePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalVisits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AddressUseEnum)
	fc.Result = res
	return ec.marshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AddressTypeEnum)
	fc.Result = res
	return ec.marshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_Line(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Line, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_City(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_District(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.District, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_State(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_PostalCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostalCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_Country(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAddress_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAge_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAge_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAge_Comparator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AgeComparatorEnum)
	fc.Result = res
	return ec.marshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAge_Unit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAge_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAge_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_ClinicalStatus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicalStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_VerificationStatus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AllergyIntoleranceTypeEnum)
	fc.Result = res
	return ec.marshalOAllergyIntoleranceTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.AllergyIntoleranceCategoryEnum)
	fc.Result = res
	return ec.marshalOAllergyIntoleranceCategoryEnum2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Criticality(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Criticality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.AllergyIntoleranceCriticalityEnum)
	fc.Result = res
	return ec.marshalNAllergyIntoleranceCriticalityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCriticalityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Patient(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Encounter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_OnsetDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_OnsetAge(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAge)
	fc.Result = res
	return ec.marshalOFHIRAge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_OnsetPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_OnsetRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_OnsetString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_RecordedDate(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Recorder(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recorder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Asserter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Asserter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_LastOccurrence(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastOccurrence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntolerance_Reaction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntolerance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntolerance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAllergyintoleranceReaction)
	fc.Result = res
	return ec.marshalOFHIRAllergyintoleranceReaction2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReaction(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntoleranceRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntoleranceRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAllergyIntoleranceRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRAllergyIntoleranceRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntoleranceRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntoleranceRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntoleranceRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntoleranceRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntoleranceRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntoleranceRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAllergyIntolerance)
	fc.Result = res
	return ec.marshalOFHIRAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyIntoleranceRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyIntoleranceRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAllergyIntolerance)
	fc.Result = res
	return ec.marshalNFHIRAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_Substance(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Substance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_Manifestation(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manifestation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_Description(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_Onset(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Onset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_Severity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.AllergyIntoleranceReactionSeverityEnum)
	fc.Result = res
	return ec.marshalOAllergyIntoleranceReactionSeverityEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceReactionSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_ExposureRoute(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExposureRoute, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAllergyintoleranceReaction_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAllergyintoleranceReaction) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAllergyintoleranceReaction",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAnnotation_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAnnotation_AuthorReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAnnotation_AuthorString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAnnotation_Time(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAnnotation_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAnnotation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAnnotation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Markdown)
	fc.Result = res
	return ec.marshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_ContentType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_Language(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_Data(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Base64Binary)
	fc.Result = res
	return ec.marshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_URL(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URL)
	fc.Result = res
	return ec.marshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_Size(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_Hash(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Base64Binary)
	fc.Result = res
	return ec.marshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_Title(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRAttachment_Creation(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCodeableConcept_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCodeableConcept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCodeableConcept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCodeableConcept_Coding(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCodeableConcept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCodeableConcept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCoding)
	fc.Result = res
	return ec.marshalNFHIRCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCodeableConcept_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCodeableConcept) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCodeableConcept",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCoding_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCoding_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCoding_Version(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCoding_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCoding_Display(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCoding_UserSelected(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCoding) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCoding",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserSelected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.CompositionStatusEnum)
	fc.Result = res
	return ec.marshalOCompositionStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Encounter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Date(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Author(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Title(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Confidentiality(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Confidentiality, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Attester(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attester, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCompositionAttester)
	fc.Result = res
	return ec.marshalOFHIRCompositionAttester2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttester(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Custodian(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Custodian, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_RelatesTo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelatesTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCompositionRelatesto)
	fc.Result = res
	return ec.marshalOFHIRCompositionRelatesto2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatesto(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Event(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCompositionEvent)
	fc.Result = res
	return ec.marshalOFHIRCompositionEvent2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRComposition_Section(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRComposition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRComposition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCompositionSection)
	fc.Result = res
	return ec.marshalOFHIRCompositionSection2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSection(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionAttester_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionAttester) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionAttester",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionAttester_Mode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionAttester) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionAttester",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.CompositionAttesterModeEnum)
	fc.Result = res
	return ec.marshalOCompositionAttesterModeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionAttesterModeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionAttester_Time(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionAttester) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionAttester",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionAttester_Party(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionAttester) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionAttester",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Party, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionEvent_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionEvent_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionEvent_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionEvent_Detail(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelatesto_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelatesto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelatesto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelatesto_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelatesto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelatesto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelatesto_TargetIdentifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelatesto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelatesto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelatesto_TargetReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelatesto) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelatesto",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCompositionRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRCompositionRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRComposition)
	fc.Result = res
	return ec.marshalOFHIRComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRComposition(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRComposition)
	fc.Result = res
	return ec.marshalNFHIRComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRComposition(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Title(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Author(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Focus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Focus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Mode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_OrderedBy(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Entry(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_EmptyReason(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmptyReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCompositionSection_Section(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCompositionSection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCompositionSection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCompositionSection)
	fc.Result = res
	return ec.marshalOFHIRCompositionSection2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSection(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_ClinicalStatus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClinicalStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_VerificationStatus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Severity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_BodySite(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BodySite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Encounter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_OnsetDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_OnsetAge(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAge)
	fc.Result = res
	return ec.marshalOFHIRAge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_OnsetPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_OnsetRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_OnsetString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_AbatementDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbatementDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_AbatementAge(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbatementAge, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAge)
	fc.Result = res
	return ec.marshalOFHIRAge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_AbatementPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbatementPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_AbatementRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbatementRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_AbatementString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AbatementString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_RecordedDate(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Recorder(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recorder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Asserter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Asserter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Stage(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRConditionStage)
	fc.Result = res
	return ec.marshalOFHIRConditionStage2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStage(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Evidence(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Evidence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRConditionEvidence)
	fc.Result = res
	return ec.marshalOFHIRConditionEvidence2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidence(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRCondition_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRCondition) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRCondition",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionEvidence_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionEvidence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionEvidence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionEvidence_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionEvidence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionEvidence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionEvidence_Detail(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionEvidence) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionEvidence",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Detail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRConditionRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRConditionRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCondition)
	fc.Result = res
	return ec.marshalOFHIRCondition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCondition(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCondition)
	fc.Result = res
	return ec.marshalNFHIRCondition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCondition(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionStage_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionStage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionStage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionStage_Summary(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionStage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionStage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionStage_Assessment(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionStage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionStage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRConditionStage_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRConditionStage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRConditionStage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRContactPoint_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRContactPoint_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ContactPointSystemEnum)
	fc.Result = res
	return ec.marshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRContactPoint_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRContactPoint_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ContactPointUseEnum)
	fc.Result = res
	return ec.marshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRContactPoint_Rank(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int64)
	fc.Result = res
	return ec.marshalOInt2ᚖint64(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRContactPoint_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRContactPoint) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRContactPoint",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_Sequence(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOInteger2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_AdditionalInstruction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalInstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_PatientInstruction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientInstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_Timing(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRTiming)
	fc.Result = res
	return ec.marshalOFHIRTiming2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTiming(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_AsNeededBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsNeededBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_AsNeededCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsNeededCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_Site(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Site, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_Route(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_Method(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_DoseAndRate(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoseAndRate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRDosageDoseandrate)
	fc.Result = res
	return ec.marshalOFHIRDosageDoseandrate2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_MaxDosePerPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDosePerPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_MaxDosePerAdministration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDosePerAdministration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosage_MaxDosePerLifetime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxDosePerLifetime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_DoseRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoseRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_DoseQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoseQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_RateRatio(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_RateRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDosageDoseandrate_RateQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDosageDoseandrate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDosageDoseandrate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDuration_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDuration_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDuration_Comparator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.DurationComparatorEnum)
	fc.Result = res
	return ec.marshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDuration_Unit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDuration_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRDuration_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRDuration) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRDuration",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalNFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.EncounterStatusEnum)
	fc.Result = res
	return ec.marshalNEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_StatusHistory(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREncounterStatushistory)
	fc.Result = res
	return ec.marshalOFHIREncounterStatushistory2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistory(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Class(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCoding)
	fc.Result = res
	return ec.marshalNFHIRCoding2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_ClassHistory(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClassHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREncounterClasshistory)
	fc.Result = res
	return ec.marshalOFHIREncounterClasshistory2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistory(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_ServiceType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Priority(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_EpisodeOfCare(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeOfCare, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_BasedOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Participant(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Participant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREncounterParticipant)
	fc.Result = res
	return ec.marshalOFHIREncounterParticipant2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipant(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Appointment(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appointment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Length(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRDuration)
	fc.Result = res
	return ec.marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_ReasonCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_ReasonReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Diagnosis(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diagnosis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREncounterDiagnosis)
	fc.Result = res
	return ec.marshalOFHIREncounterDiagnosis2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosis(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Account(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Hospitalization(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hospitalization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREncounterHospitalization)
	fc.Result = res
	return ec.marshalOFHIREncounterHospitalization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterHospitalization(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_Location(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREncounterLocation)
	fc.Result = res
	return ec.marshalOFHIREncounterLocation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_ServiceProvider(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounter_PartOf(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounter) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounter",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartOf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterClasshistory_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterClasshistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterClasshistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterClasshistory_Class(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterClasshistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterClasshistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCoding)
	fc.Result = res
	return ec.marshalNFHIRCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterClasshistory_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterClasshistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterClasshistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalNFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterDiagnosis_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterDiagnosis_Condition(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterDiagnosis_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterDiagnosis_Rank(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_PreAdmissionIdentifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PreAdmissionIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_Origin(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_AdmitSource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdmitSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_ReAdmission(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReAdmission, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_DietPreference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DietPreference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_SpecialCourtesy(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecialCourtesy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_SpecialArrangement(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecialArrangement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_Destination(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Destination, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterHospitalization_DischargeDisposition(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterHospitalization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterHospitalization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DischargeDisposition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterLocation_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterLocation_Location(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterLocation_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.EncounterLocationStatusEnum)
	fc.Result = res
	return ec.marshalOEncounterLocationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterLocationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterLocation_PhysicalType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhysicalType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterLocation_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterLocation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterLocation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterParticipant_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterParticipant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterParticipant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterParticipant_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterParticipant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterParticipant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterParticipant_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterParticipant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterParticipant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterParticipant_Individual(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterParticipant) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterParticipant",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Individual, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREncounterRelayEdge)
	fc.Result = res
	return ec.marshalOFHIREncounterRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREncounter)
	fc.Result = res
	return ec.marshalOFHIREncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounter(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREncounter)
	fc.Result = res
	return ec.marshalNFHIREncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounter(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterStatushistory_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterStatushistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterStatushistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterStatushistory_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterStatushistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterStatushistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.EncounterStatusHistoryStatusEnum)
	fc.Result = res
	return ec.marshalOEncounterStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusHistoryStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREncounterStatushistory_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREncounterStatushistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREncounterStatushistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalNFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.EpisodeOfCareStatusEnum)
	fc.Result = res
	return ec.marshalOEpisodeOfCareStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_StatusHistory(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREpisodeofcareStatushistory)
	fc.Result = res
	return ec.marshalOFHIREpisodeofcareStatushistory2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistory(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Diagnosis(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Diagnosis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREpisodeofcareDiagnosis)
	fc.Result = res
	return ec.marshalOFHIREpisodeofcareDiagnosis2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosis(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Patient(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_ManagingOrganization(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagingOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_ReferralRequest(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferralRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_CareManager(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CareManager, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Team(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCare_Account(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCare) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCare",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Account, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCareRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCareRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCareRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREpisodeOfCareRelayEdge)
	fc.Result = res
	return ec.marshalOFHIREpisodeOfCareRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCareRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCareRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCareRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCareRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCareRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCareRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCareRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCareRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCareRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREpisodeOfCare)
	fc.Result = res
	return ec.marshalOFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeOfCareRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeOfCareRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeOfCareRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREpisodeOfCare)
	fc.Result = res
	return ec.marshalNFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareDiagnosis_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareDiagnosis_Condition(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareDiagnosis_Role(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareDiagnosis_Rank(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareDiagnosis) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareDiagnosis",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rank, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareStatushistory_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareStatushistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareStatushistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareStatushistory_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareStatushistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareStatushistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.EpisodeOfCareStatusHistoryStatusEnum)
	fc.Result = res
	return ec.marshalOEpisodeOfCareStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusHistoryStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIREpisodeofcareStatushistory_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIREpisodeofcareStatushistory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIREpisodeofcareStatushistory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalNFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.HumanNameUseEnum)
	fc.Result = res
	return ec.marshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Family(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Family, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Given(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Given, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Prefix(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Suffix(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suffix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRHumanName_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRHumanName) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRHumanName",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_Use(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.IdentifierUseEnum)
	fc.Result = res
	return ec.marshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRIdentifier_Assigner(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRIdentifier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRIdentifier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assigner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(domain.MedicationStatusEnum)
	fc.Result = res
	return ec.marshalOMedicationStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Manufacturer(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manufacturer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIROrganization)
	fc.Result = res
	return ec.marshalOFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Form(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Form, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Amount(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Ingredient(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ingredient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.MedicationIngredient)
	fc.Result = res
	return ec.marshalOMedicationIngredient2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredient(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedication_Batch(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.MedicationBatch)
	fc.Result = res
	return ec.marshalOMedicationBatch2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRMedicationRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRMedicationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedication)
	fc.Result = res
	return ec.marshalOFHIRMedication2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedication(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedication)
	fc.Result = res
	return ec.marshalOFHIRMedication2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedication(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_StatusReason(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Intent(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Intent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Priority(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_DoNotPerform(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoNotPerform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_ReportedBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReportedBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_ReportedReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReportedReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_MedicationCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicationCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_MedicationReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicationReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Encounter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_SupportingInformation(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingInformation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_AuthoredOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthoredOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Requester(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requester, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Performer(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_PerformerType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Recorder(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recorder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_ReasonCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_ReasonReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_InstantiatesCanonical(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstantiatesCanonical, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Canonical)
	fc.Result = res
	return ec.marshalOCanonical2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCanonical(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_InstantiatesURI(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstantiatesURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Instant)
	fc.Result = res
	return ec.marshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_BasedOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_GroupIdentifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GroupIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_CourseOfTherapyType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CourseOfTherapyType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Insurance(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insurance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_DosageInstruction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DosageInstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRDosage)
	fc.Result = res
	return ec.marshalOFHIRDosage2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosage(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_DispenseRequest(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DispenseRequest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationrequestDispenserequest)
	fc.Result = res
	return ec.marshalOFHIRMedicationrequestDispenserequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestDispenserequest(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_Substitution(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Substitution, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationrequestSubstitution)
	fc.Result = res
	return ec.marshalOFHIRMedicationrequestSubstitution2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestSubstitution(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_PriorPrescription(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriorPrescription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_DetectedIssue(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DetectedIssue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequest_EventHistory(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EventHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequestRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequestRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequestRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRMedicationRequestRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRMedicationRequestRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequestRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequestRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequestRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequestRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequestRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequestRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequestRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequestRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequestRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationRequest)
	fc.Result = res
	return ec.marshalOFHIRMedicationRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationRequestRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationRequestRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationRequestRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationRequest)
	fc.Result = res
	return ec.marshalNFHIRMedicationRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_BasedOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_PartOf(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartOf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.MedicationStatementStatusEnum)
	fc.Result = res
	return ec.marshalOMedicationStatementStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatementStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_StatusReason(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_MedicationCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicationCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_MedicationReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MedicationReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedication)
	fc.Result = res
	return ec.marshalOFHIRMedication2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedication(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Context(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_EffectiveDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_EffectivePeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectivePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_DateAsserted(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateAsserted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_InformationSource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InformationSource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_DerivedFrom(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DerivedFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_ReasonCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_ReasonReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatement_Dosage(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dosage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRDosage)
	fc.Result = res
	return ec.marshalOFHIRDosage2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosage(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatementRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatementRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatementRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRMedicationStatementRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRMedicationStatementRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatementRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatementRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatementRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatementRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatementRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatementRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatementRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatementRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatementRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationStatement)
	fc.Result = res
	return ec.marshalOFHIRMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatement(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationStatementRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationStatementRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationStatementRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationStatement)
	fc.Result = res
	return ec.marshalOFHIRMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatement(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_InitialFill(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialFill, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationrequestInitialfill)
	fc.Result = res
	return ec.marshalOFHIRMedicationrequestInitialfill2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestInitialfill(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_DispenseInterval(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DispenseInterval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRDuration)
	fc.Result = res
	return ec.marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_ValidityPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidityPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_NumberOfRepeatsAllowed(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumberOfRepeatsAllowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOUnsignedInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_Quantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_ExpectedSupplyDuration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpectedSupplyDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRDuration)
	fc.Result = res
	return ec.marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest_Performer(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestDispenserequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestDispenserequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestInitialfill_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestInitialfill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestInitialfill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestInitialfill_Quantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestInitialfill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestInitialfill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestInitialfill_Duration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestInitialfill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestInitialfill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRDuration)
	fc.Result = res
	return ec.marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestSubstitution_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestSubstitution) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestSubstitution",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestSubstitution_AllowedBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestSubstitution) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestSubstitution",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestSubstitution_AllowedCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestSubstitution) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestSubstitution",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowedCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRMedicationrequestSubstitution_Reason(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRMedicationrequestSubstitution) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRMedicationrequestSubstitution",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRNarrative_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRNarrative) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRNarrative",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRNarrative_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRNarrative) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRNarrative",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.NarrativeStatusEnum)
	fc.Result = res
	return ec.marshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRNarrative_Div(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRNarrative) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRNarrative",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Div, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.XHTML)
	fc.Result = res
	return ec.marshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_BasedOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_PartOf(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PartOf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.ObservationStatusEnum)
	fc.Result = res
	return ec.marshalOObservationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐObservationStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Focus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Focus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Encounter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_EffectiveDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_EffectivePeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectivePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_EffectiveTiming(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveTiming, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRTiming)
	fc.Result = res
	return ec.marshalOFHIRTiming2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTiming(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_EffectiveInstant(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectiveInstant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Instant)
	fc.Result = res
	return ec.marshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Issued(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Instant)
	fc.Result = res
	return ec.marshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Performer(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueInteger(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOInteger2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueRatio(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueSampledData(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueSampledData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRSampledData)
	fc.Result = res
	return ec.marshalOFHIRSampledData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRSampledData(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValueDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ValuePeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValuePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_DataAbsentReason(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataAbsentReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Interpretation(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interpretation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_BodySite(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BodySite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Method(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Method, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Specimen(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Specimen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Device(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_ReferenceRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservationReferencerange)
	fc.Result = res
	return ec.marshalOFHIRObservationReferencerange2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_HasMember(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasMember, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_DerivedFrom(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DerivedFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservation_Component(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Component, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservationComponent)
	fc.Result = res
	return ec.marshalOFHIRObservationComponent2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponent(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueString(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueInteger(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOInteger2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueRatio(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueSampledData(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueSampledData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRSampledData)
	fc.Result = res
	return ec.marshalOFHIRSampledData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRSampledData(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValueDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ValuePeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValuePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_DataAbsentReason(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataAbsentReason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_Interpretation(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interpretation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationComponent_ReferenceRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationComponent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationComponent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservationReferencerange)
	fc.Result = res
	return ec.marshalOFHIRObservationReferencerange2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_Low(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Low, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_High(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.High, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_AppliesTo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppliesTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_Age(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Age, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationReferencerange_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationReferencerange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationReferencerange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservationRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRObservationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRObservation)
	fc.Result = res
	return ec.marshalOFHIRObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRObservationRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRObservationRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRObservationRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRObservation)
	fc.Result = res
	return ec.marshalNFHIRObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Active(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Name(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Alias(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Alias, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Telecom(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telecom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRContactPoint)
	fc.Result = res
	return ec.marshalOFHIRContactPoint2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganization_Address(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAddress)
	fc.Result = res
	return ec.marshalOFHIRAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganizationRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganizationRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIROrganizationRelayEdge)
	fc.Result = res
	return ec.marshalOFHIROrganizationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganizationRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganizationRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganizationRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganizationRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganizationRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganizationRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIROrganization)
	fc.Result = res
	return ec.marshalOFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIROrganizationRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIROrganizationRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIROrganizationRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIROrganization)
	fc.Result = res
	return ec.marshalNFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Active(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Name(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRHumanName)
	fc.Result = res
	return ec.marshalOFHIRHumanName2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanName(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Telecom(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telecom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRContactPoint)
	fc.Result = res
	return ec.marshalOFHIRContactPoint2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Gender(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.PatientGenderEnum)
	fc.Result = res
	return ec.marshalOPatientGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientGenderEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_BirthDate(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_DeceasedBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeceasedBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_DeceasedDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeceasedDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Address(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAddress)
	fc.Result = res
	return ec.marshalOFHIRAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_MaritalStatus(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaritalStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_MultipleBirthBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultipleBirthBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_MultipleBirthInteger(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultipleBirthInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOInteger2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Photo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Photo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAttachment)
	fc.Result = res
	return ec.marshalOFHIRAttachment2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Contact(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRPatientContact)
	fc.Result = res
	return ec.marshalOFHIRPatientContact2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContact(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Communication(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Communication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRPatientCommunication)
	fc.Result = res
	return ec.marshalOFHIRPatientCommunication2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunication(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_GeneralPractitioner(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GeneralPractitioner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_ManagingOrganization(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagingOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatient_Link(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRPatientLink)
	fc.Result = res
	return ec.marshalOFHIRPatientLink2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLink(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientCommunication_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientCommunication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientCommunication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientCommunication_Language(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientCommunication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientCommunication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalNFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientCommunication_Preferred(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientCommunication) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientCommunication",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Preferred, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Relationship(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relationship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Name(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRHumanName)
	fc.Result = res
	return ec.marshalOFHIRHumanName2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanName(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Telecom(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Telecom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRContactPoint)
	fc.Result = res
	return ec.marshalOFHIRContactPoint2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Address(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAddress)
	fc.Result = res
	return ec.marshalOFHIRAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Gender(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.PatientContactGenderEnum)
	fc.Result = res
	return ec.marshalOPatientContactGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientContactGenderEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Organization(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientContact_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientContact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientContact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientLink_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientLink",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientLink_Other(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientLink",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Other, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientLink_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientLink) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientLink",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.PatientLinkTypeEnum)
	fc.Result = res
	return ec.marshalOPatientLinkTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientLinkTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRPatientRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRPatientRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayConnection_hasOpenEpisodes(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOpenEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayEdge_hasOpenEpisodes(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOpenEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPatient)
	fc.Result = res
	return ec.marshalOFHIRPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPatient)
	fc.Result = res
	return ec.marshalNFHIRPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPatientRelayPayload_hasOpenEpisodes(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPatientRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPatientRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOpenEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPeriod_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPeriod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPeriod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPeriod_Start(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPeriod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPeriod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.DateTime)
	fc.Result = res
	return ec.marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRPeriod_End(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRPeriod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRPeriod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.DateTime)
	fc.Result = res
	return ec.marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRQuantity_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRQuantity_Value(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRQuantity_Comparator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.QuantityComparatorEnum)
	fc.Result = res
	return ec.marshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRQuantity_Unit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRQuantity_System(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.URI)
	fc.Result = res
	return ec.marshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRQuantity_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRQuantity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRQuantity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRRange_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRRange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRRange_Low(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRRange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Low, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRRange_High(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRRange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.High, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRRatio_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRatio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRRatio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRRatio_Numerator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRatio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRRatio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Numerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRRatio_Denominator(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRRatio) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRRatio",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Denominator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRReference_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRReference_Reference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRReference_Type(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRReference_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRReference_Display(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRReference) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRReference",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_Origin(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalNFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_Factor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Factor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_LowerLimit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LowerLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_UpperLimit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpperLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_Dimensions(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dimensions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRSampledData_Data(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRSampledData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRSampledData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Text(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRNarrative)
	fc.Result = res
	return ec.marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Identifier(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_InstantiatesCanonical(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstantiatesCanonical, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Canonical)
	fc.Result = res
	return ec.marshalOCanonical2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCanonical(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_InstantiatesURI(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstantiatesURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Instant)
	fc.Result = res
	return ec.marshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_BasedOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BasedOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Replaces(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replaces, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Requisition(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requisition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRIdentifier)
	fc.Result = res
	return ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Status(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Intent(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Intent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Category(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Priority(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_DoNotPerform(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DoNotPerform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_OrderDetail(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderDetail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_QuantityQuantity(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRQuantity)
	fc.Result = res
	return ec.marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_QuantityRatio(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_QuantityRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuantityRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Subject(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Encounter(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_OccurrenceDateTime(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccurrenceDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_OccurrencePeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccurrencePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_OccurrenceTiming(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccurrenceTiming, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRTiming)
	fc.Result = res
	return ec.marshalOFHIRTiming2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTiming(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_AsNeededBoolean(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsNeededBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_AsNeededCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AsNeededCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_AuthoredOn(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthoredOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Requester(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Requester, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_PerformerType(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PerformerType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Performer(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Performer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_LocationCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_LocationReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_ReasonCode(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_ReasonReference(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReasonReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Insurance(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Insurance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_SupportingInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportingInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Specimen(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Specimen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_BodySite(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BodySite, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_Note(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAnnotation)
	fc.Result = res
	return ec.marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_PatientInstruction(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientInstruction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequest_RelevantHistory(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequest",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RelevantHistory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequestRelayConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequestRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequestRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRServiceRequestRelayEdge)
	fc.Result = res
	return ec.marshalOFHIRServiceRequestRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequestRelayConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequestRelayConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequestRelayConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequestRelayEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequestRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequestRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequestRelayEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequestRelayEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequestRelayEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRServiceRequest)
	fc.Result = res
	return ec.marshalOFHIRServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRServiceRequestRelayPayload_resource(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRServiceRequestRelayPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRServiceRequestRelayPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRServiceRequest)
	fc.Result = res
	return ec.marshalNFHIRServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequest(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTiming_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTiming_Event(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTiming_Repeat(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repeat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRTimingRepeat)
	fc.Result = res
	return ec.marshalOFHIRTimingRepeat2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeat(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTiming_Code(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTiming) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTiming",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_ID(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_BoundsDuration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoundsDuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRDuration)
	fc.Result = res
	return ec.marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_BoundsRange(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoundsRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRange)
	fc.Result = res
	return ec.marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_BoundsPeriod(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BoundsPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPeriod)
	fc.Result = res
	return ec.marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_Count(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_CountMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CountMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_Duration(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_DurationMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_DurationUnit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.TimingRepeatDurationUnitEnum)
	fc.Result = res
	return ec.marshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_Frequency(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Frequency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_FrequencyMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FrequencyMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOPositiveInt2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_Period(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_PeriodMax(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodMax, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Decimal)
	fc.Result = res
	return ec.marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_PeriodUnit(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PeriodUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.TimingRepeatPeriodUnitEnum)
	fc.Result = res
	return ec.marshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_DayOfWeek(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DayOfWeek, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_TimeOfDay(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeOfDay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_When(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.When, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.TimingRepeatWhenEnum)
	fc.Result = res
	return ec.marshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx, field.Selections, res)
}

func (ec *executionContext) _FHIRTimingRepeat_Offset(ctx context.Context, field graphql.CollectedField, obj *domain.FHIRTimingRepeat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FHIRTimingRepeat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalData_regimen(ctx context.Context, field graphql.CollectedField, obj *domain.MedicalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regimen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRMedicationStatement)
	fc.Result = res
	return ec.marshalOFHIRMedicationStatement2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatement(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalData_allergies(ctx context.Context, field graphql.CollectedField, obj *domain.MedicalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allergies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRAllergyIntolerance)
	fc.Result = res
	return ec.marshalOFHIRAllergyIntolerance2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalData_weight(ctx context.Context, field graphql.CollectedField, obj *domain.MedicalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservation)
	fc.Result = res
	return ec.marshalOFHIRObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalData_bmi(ctx context.Context, field graphql.CollectedField, obj *domain.MedicalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BMI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservation)
	fc.Result = res
	return ec.marshalOFHIRObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalData_viralLoad(ctx context.Context, field graphql.CollectedField, obj *domain.MedicalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViralLoad, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservation)
	fc.Result = res
	return ec.marshalOFHIRObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicalData_cd4Count(ctx context.Context, field graphql.CollectedField, obj *domain.MedicalData) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CD4Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIRObservation)
	fc.Result = res
	return ec.marshalOFHIRObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicationBatch_LotNumber(ctx context.Context, field graphql.CollectedField, obj *domain.MedicationBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicationBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LotNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicationBatch_ExpirationDate(ctx context.Context, field graphql.CollectedField, obj *domain.MedicationBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicationBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicationIngredient_ItemCodelabConcept(ctx context.Context, field graphql.CollectedField, obj *domain.MedicationIngredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicationIngredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemCodelabConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCodeableConcept)
	fc.Result = res
	return ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicationIngredient_ItemReference(ctx context.Context, field graphql.CollectedField, obj *domain.MedicationIngredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicationIngredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRReference)
	fc.Result = res
	return ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicationIngredient_IsActive(ctx context.Context, field graphql.CollectedField, obj *domain.MedicationIngredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicationIngredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _MedicationIngredient_Strength(ctx context.Context, field graphql.CollectedField, obj *domain.MedicationIngredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MedicationIngredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Strength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRRatio)
	fc.Result = res
	return ec.marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_startEpisodeByOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_startEpisodeByOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartEpisodeByOtp(rctx, args["input"].(domain.OTPEpisodeCreationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.EpisodeOfCarePayload)
	fc.Result = res
	return ec.marshalNEpisodeOfCarePayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCarePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_startEpisodeByBreakGlass(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_startEpisodeByBreakGlass_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartEpisodeByBreakGlass(rctx, args["input"].(domain.BreakGlassEpisodeCreationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.EpisodeOfCarePayload)
	fc.Result = res
	return ec.marshalNEpisodeOfCarePayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCarePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upgradeEpisode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upgradeEpisode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpgradeEpisode(rctx, args["input"].(domain.OTPEpisodeUpgradeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.EpisodeOfCarePayload)
	fc.Result = res
	return ec.marshalNEpisodeOfCarePayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCarePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_endEpisode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_endEpisode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EndEpisode(rctx, args["episodeID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_startEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_startEncounter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartEncounter(rctx, args["episodeID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_endEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_endEncounter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EndEncounter(rctx, args["encounterID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerPatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerPatient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterPatient(rctx, args["input"].(domain.SimplePatientRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientPayload)
	fc.Result = res
	return ec.marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_registerUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_registerUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RegisterUser(rctx, args["input"].(domain.SimplePatientRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientPayload)
	fc.Result = res
	return ec.marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePatient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePatient(rctx, args["input"].(domain.SimplePatientRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientPayload)
	fc.Result = res
	return ec.marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNextOfKin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNextOfKin_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNextOfKin(rctx, args["input"].(domain.SimpleNextOfKinInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientPayload)
	fc.Result = res
	return ec.marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addNHIF(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addNHIF_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddNhif(rctx, args["input"].(*domain.SimpleNHIFInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientPayload)
	fc.Result = res
	return ec.marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUpdatePatientExtraInformation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUpdatePatientExtraInformation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUpdatePatientExtraInformation(rctx, args["input"].(domain.PatientExtraInformationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFHIRMedicationRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFHIRMedicationRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIRMedicationRequest(rctx, args["input"].(domain.FHIRMedicationRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationRequestRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRMedicationRequestRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFHIRMedicationRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFHIRMedicationRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFHIRMedicationRequest(rctx, args["input"].(domain.FHIRMedicationRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationRequestRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRMedicationRequestRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFHIRMedicationRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFHIRMedicationRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFHIRMedicationRequest(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFHIRAllergyIntolerance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFHIRAllergyIntolerance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIRAllergyIntolerance(rctx, args["input"].(domain.FHIRAllergyIntoleranceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAllergyIntoleranceRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRAllergyIntoleranceRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFHIRAllergyIntolerance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFHIRAllergyIntolerance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFHIRAllergyIntolerance(rctx, args["input"].(domain.FHIRAllergyIntoleranceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAllergyIntoleranceRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRAllergyIntoleranceRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFHIRCondition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFHIRCondition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIRCondition(rctx, args["input"].(domain.FHIRConditionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRConditionRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRConditionRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFHIRCondition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFHIRCondition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFHIRCondition(rctx, args["input"].(domain.FHIRConditionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRConditionRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRConditionRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFHIRServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFHIRServiceRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIRServiceRequest(rctx, args["input"].(domain.FHIRServiceRequestInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRServiceRequestRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRServiceRequestRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFHIRServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFHIRServiceRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFHIRServiceRequest(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFHIRObservation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFHIRObservation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIRObservation(rctx, args["input"].(domain.FHIRObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRObservationRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRObservationRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFHIRComposition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFHIRComposition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFHIRComposition(rctx, args["input"].(domain.FHIRCompositionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCompositionRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRCompositionRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFHIRComposition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFHIRComposition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFHIRComposition(rctx, args["input"].(domain.FHIRCompositionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCompositionRelayPayload)
	fc.Result = res
	return ec.marshalNFHIRCompositionRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFHIRComposition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFHIRComposition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFHIRComposition(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFHIRPatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFHIRPatient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFHIRPatient(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFHIRObservation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFHIRObservation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFHIRObservation(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *firebasetools.PageInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientConnection_edges(ctx context.Context, field graphql.CollectedField, obj *domain.PatientConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.PatientEdge)
	fc.Result = res
	return ec.marshalOPatientEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *domain.PatientConnection) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientConnection",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*firebasetools.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *domain.PatientEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientEdge_node(ctx context.Context, field graphql.CollectedField, obj *domain.PatientEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPatient)
	fc.Result = res
	return ec.marshalNFHIRPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientEdge_hasOpenEpisodes(ctx context.Context, field graphql.CollectedField, obj *domain.PatientEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOpenEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientPayload_patientRecord(ctx context.Context, field graphql.CollectedField, obj *domain.PatientPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientRecord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRPatient)
	fc.Result = res
	return ec.marshalNFHIRPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatient(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientPayload_hasOpenEpisodes(ctx context.Context, field graphql.CollectedField, obj *domain.PatientPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasOpenEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PatientPayload_openEpisodes(ctx context.Context, field graphql.CollectedField, obj *domain.PatientPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PatientPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OpenEpisodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREpisodeOfCare)
	fc.Result = res
	return ec.marshalOFHIREpisodeOfCare2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findPatientsByMSISDN(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findPatientsByMSISDN_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindPatientsByMsisdn(rctx, args["msisdn"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientConnection)
	fc.Result = res
	return ec.marshalNPatientConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findPatients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findPatients_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindPatients(rctx, args["search"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientConnection)
	fc.Result = res
	return ec.marshalNPatientConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getPatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getPatient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatient(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.PatientPayload)
	fc.Result = res
	return ec.marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_openEpisodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_openEpisodes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OpenEpisodes(rctx, args["patientReference"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREpisodeOfCare)
	fc.Result = res
	return ec.marshalNFHIREpisodeOfCare2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_openOrganizationEpisodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_openOrganizationEpisodes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OpenOrganizationEpisodes(rctx, args["providerSladeCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.FHIREpisodeOfCare)
	fc.Result = res
	return ec.marshalNFHIREpisodeOfCare2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_problemSummary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_problemSummary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProblemSummary(rctx, args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_visitSummary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_visitSummary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().VisitSummary(rctx, args["encounterID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientTimelineWithCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patientTimelineWithCount_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientTimelineWithCount(rctx, args["episodeID"].(string), args["count"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2ᚕmapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_patientTimeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_patientTimeline_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientTimeline(rctx, args["patientID"].(string), args["count"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2ᚕmapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIREncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIREncounter_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIREncounter(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIREncounterRelayConnection)
	fc.Result = res
	return ec.marshalNFHIREncounterRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRCondition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRCondition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRCondition(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRConditionRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRConditionRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRAllergyIntolerance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRAllergyIntolerance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRAllergyIntolerance(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRAllergyIntoleranceRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRAllergyIntoleranceRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRObservation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRObservation_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRObservation(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRObservationRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRObservationRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRMedicationStatement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRMedicationStatement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRMedicationStatement(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationStatementRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRMedicationStatementRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRMedicationRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRMedicationRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRMedicationRequest(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRMedicationRequestRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRMedicationRequestRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRServiceRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRServiceRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRServiceRequest(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRServiceRequestRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRServiceRequestRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_searchFHIRComposition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_searchFHIRComposition_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchFHIRComposition(rctx, args["params"].(map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.FHIRCompositionRelayConnection)
	fc.Result = res
	return ec.marshalNFHIRCompositionRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayConnection(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_allergySummary(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_allergySummary_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllergySummary(rctx, args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getMedicalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getMedicalData_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMedicalData(rctx, args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*domain.MedicalData)
	fc.Result = res
	return ec.marshalOMedicalData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicalData(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listConcepts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_listConcepts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListConcepts(rctx, args["org"].(string), args["source"].(string), args["verbose"].(bool), args["q"].(*string), args["sortAsc"].(*string), args["sortDesc"].(*string), args["conceptClass"].(*string), args["dataType"].(*string), args["locale"].(*string), args["includeRetired"].(*bool), args["includeMappings"].(*bool), args["includeInverseMappings"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]map[string]interface{})
	fc.Result = res
	return ec.marshalNMap2ᚕmapᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query__entities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, args["representations"].([]map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBreakGlassEpisodeCreationInput(ctx context.Context, obj interface{}) (domain.BreakGlassEpisodeCreationInput, error) {
	var it domain.BreakGlassEpisodeCreationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerCode"))
			it.ProviderCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "practitionerUID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("practitionerUID"))
			it.PractitionerUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerPhone"))
			it.ProviderPhone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "otp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
			it.Otp, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullAccess":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAccess"))
			it.FullAccess, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "patientPhone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientPhone"))
			it.PatientPhone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailInput(ctx context.Context, obj interface{}) (domain.EmailInput, error) {
	var it domain.EmailInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "communicationOptIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communicationOptIn"))
			it.CommunicationOptIn, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAddressInput(ctx context.Context, obj interface{}) (domain.FHIRAddressInput, error) {
	var it domain.FHIRAddressInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Line":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Line"))
			it.Line, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("City"))
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "District":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("District"))
			it.District, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "State":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("State"))
			it.State, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "PostalCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PostalCode"))
			it.PostalCode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Country":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Country"))
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAgeInput(ctx context.Context, obj interface{}) (domain.FHIRAgeInput, error) {
	var it domain.FHIRAgeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Comparator"))
			it.Comparator, err = ec.unmarshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAllergyIntoleranceInput(ctx context.Context, obj interface{}) (domain.FHIRAllergyIntoleranceInput, error) {
	var it domain.FHIRAllergyIntoleranceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClinicalStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ClinicalStatus"))
			it.ClinicalStatus, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "VerificationStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VerificationStatus"))
			it.VerificationStatus, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOAllergyIntoleranceTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOAllergyIntoleranceCategoryEnum2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Criticality":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Criticality"))
			it.Criticality, err = ec.unmarshalNAllergyIntoleranceCriticalityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCriticalityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Patient":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Patient"))
			it.Patient, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Encounter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Encounter"))
			it.Encounter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetDateTime"))
			it.OnsetDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetAge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetAge"))
			it.OnsetAge, err = ec.unmarshalOFHIRAgeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAgeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetPeriod"))
			it.OnsetPeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetRange"))
			it.OnsetRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetString"))
			it.OnsetString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "RecordedDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RecordedDate"))
			it.RecordedDate, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "Recorder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Recorder"))
			it.Recorder, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Asserter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Asserter"))
			it.Asserter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "LastOccurrence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LastOccurrence"))
			it.LastOccurrence, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Reaction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Reaction"))
			it.Reaction, err = ec.unmarshalOFHIRAllergyintoleranceReactionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReactionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAllergyintoleranceReactionInput(ctx context.Context, obj interface{}) (domain.FHIRAllergyintoleranceReactionInput, error) {
	var it domain.FHIRAllergyintoleranceReactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Substance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Substance"))
			it.Substance, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Manifestation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Manifestation"))
			it.Manifestation, err = ec.unmarshalNFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Onset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Onset"))
			it.Onset, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Severity"))
			it.Severity, err = ec.unmarshalOAllergyIntoleranceReactionSeverityEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceReactionSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "ExposureRoute":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ExposureRoute"))
			it.ExposureRoute, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAnnotationInput(ctx context.Context, obj interface{}) (domain.FHIRAnnotationInput, error) {
	var it domain.FHIRAnnotationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthorReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthorReference"))
			it.AuthorReference, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthorString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthorString"))
			it.AuthorString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Time"))
			it.Time, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRAttachmentInput(ctx context.Context, obj interface{}) (domain.FHIRAttachmentInput, error) {
	var it domain.FHIRAttachmentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ContentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ContentType"))
			it.ContentType, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Language"))
			it.Language, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Data"))
			it.Data, err = ec.unmarshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, v)
			if err != nil {
				return it, err
			}
		case "URL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URL"))
			it.URL, err = ec.unmarshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx, v)
			if err != nil {
				return it, err
			}
		case "Size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Size"))
			it.Size, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Hash"))
			it.Hash, err = ec.unmarshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Creation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Creation"))
			it.Creation, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCodeableConceptInput(ctx context.Context, obj interface{}) (domain.FHIRCodeableConceptInput, error) {
	var it domain.FHIRCodeableConceptInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Coding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Coding"))
			it.Coding, err = ec.unmarshalNFHIRCodingInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCodingInput(ctx context.Context, obj interface{}) (domain.FHIRCodingInput, error) {
	var it domain.FHIRCodingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Version"))
			it.Version, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Display":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Display"))
			it.Display, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "UserSelected":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UserSelected"))
			it.UserSelected, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCompositionAttesterInput(ctx context.Context, obj interface{}) (domain.FHIRCompositionAttesterInput, error) {
	var it domain.FHIRCompositionAttesterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Mode"))
			it.Mode, err = ec.unmarshalOCompositionAttesterModeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionAttesterModeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Time":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Time"))
			it.Time, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Party":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Party"))
			it.Party, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCompositionEventInput(ctx context.Context, obj interface{}) (domain.FHIRCompositionEventInput, error) {
	var it domain.FHIRCompositionEventInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Detail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Detail"))
			it.Detail, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCompositionInput(ctx context.Context, obj interface{}) (domain.FHIRCompositionInput, error) {
	var it domain.FHIRCompositionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOCompositionStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalNFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Encounter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Encounter"))
			it.Encounter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Date":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Date"))
			it.Date, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "Author":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Author"))
			it.Author, err = ec.unmarshalNFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Confidentiality":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Confidentiality"))
			it.Confidentiality, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Attester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Attester"))
			it.Attester, err = ec.unmarshalOFHIRCompositionAttesterInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttesterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Custodian":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Custodian"))
			it.Custodian, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RelatesTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RelatesTo"))
			it.RelatesTo, err = ec.unmarshalOFHIRCompositionRelatestoInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatestoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Event"))
			it.Event, err = ec.unmarshalOFHIRCompositionEventInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEventInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Section":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Section"))
			it.Section, err = ec.unmarshalOFHIRCompositionSectionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCompositionRelatestoInput(ctx context.Context, obj interface{}) (domain.FHIRCompositionRelatestoInput, error) {
	var it domain.FHIRCompositionRelatestoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "TargetIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TargetIdentifier"))
			it.TargetIdentifier, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "TargetReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TargetReference"))
			it.TargetReference, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRCompositionSectionInput(ctx context.Context, obj interface{}) (domain.FHIRCompositionSectionInput, error) {
	var it domain.FHIRCompositionSectionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Author":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Author"))
			it.Author, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Focus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Focus"))
			it.Focus, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOFHIRNarrativeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrativeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Mode"))
			it.Mode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "OrderedBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OrderedBy"))
			it.OrderedBy, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Entry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Entry"))
			it.Entry, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EmptyReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EmptyReason"))
			it.EmptyReason, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Section":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Section"))
			it.Section, err = ec.unmarshalOFHIRCompositionSectionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSectionInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRConditionEvidenceInput(ctx context.Context, obj interface{}) (domain.FHIRConditionEvidenceInput, error) {
	var it domain.FHIRConditionEvidenceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Detail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Detail"))
			it.Detail, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRConditionInput(ctx context.Context, obj interface{}) (domain.FHIRConditionInput, error) {
	var it domain.FHIRConditionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClinicalStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ClinicalStatus"))
			it.ClinicalStatus, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "VerificationStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("VerificationStatus"))
			it.VerificationStatus, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Severity"))
			it.Severity, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BodySite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BodySite"))
			it.BodySite, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Encounter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Encounter"))
			it.Encounter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetDateTime"))
			it.OnsetDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetAge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetAge"))
			it.OnsetAge, err = ec.unmarshalOFHIRAgeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAgeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetPeriod"))
			it.OnsetPeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetRange"))
			it.OnsetRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OnsetString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OnsetString"))
			it.OnsetString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AbatementDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AbatementDateTime"))
			it.AbatementDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "AbatementAge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AbatementAge"))
			it.AbatementAge, err = ec.unmarshalOFHIRAgeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAgeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AbatementPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AbatementPeriod"))
			it.AbatementPeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AbatementRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AbatementRange"))
			it.AbatementRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AbatementString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AbatementString"))
			it.AbatementString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "RecordedDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RecordedDate"))
			it.RecordedDate, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "Recorder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Recorder"))
			it.Recorder, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Asserter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Asserter"))
			it.Asserter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Stage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Stage"))
			it.Stage, err = ec.unmarshalOFHIRConditionStageInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStageInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Evidence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Evidence"))
			it.Evidence, err = ec.unmarshalOFHIRConditionEvidenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRConditionStageInput(ctx context.Context, obj interface{}) (domain.FHIRConditionStageInput, error) {
	var it domain.FHIRConditionStageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Summary":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Summary"))
			it.Summary, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Assessment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Assessment"))
			it.Assessment, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRContactPointInput(ctx context.Context, obj interface{}) (domain.FHIRContactPointInput, error) {
	var it domain.FHIRContactPointInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Rank"))
			it.Rank, err = ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRDosageDoseandrateInput(ctx context.Context, obj interface{}) (domain.FHIRDosageDoseandrateInput, error) {
	var it domain.FHIRDosageDoseandrateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoseRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoseRange"))
			it.DoseRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoseQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoseQuantity"))
			it.DoseQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RateRatio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RateRatio"))
			it.RateRatio, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RateRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RateRange"))
			it.RateRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "RateQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RateQuantity"))
			it.RateQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRDosageInput(ctx context.Context, obj interface{}) (domain.FHIRDosageInput, error) {
	var it domain.FHIRDosageInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Sequence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Sequence"))
			it.Sequence, err = ec.unmarshalOInteger2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AdditionalInstruction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AdditionalInstruction"))
			it.AdditionalInstruction, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PatientInstruction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PatientInstruction"))
			it.PatientInstruction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Timing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Timing"))
			it.Timing, err = ec.unmarshalOFHIRTimingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AsNeededBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AsNeededBoolean"))
			it.AsNeededBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "AsNeededCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AsNeededCodeableConcept"))
			it.AsNeededCodeableConcept, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Site":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Site"))
			it.Site, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Route":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Route"))
			it.Route, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Method"))
			it.Method, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoseAndRate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoseAndRate"))
			it.DoseAndRate, err = ec.unmarshalOFHIRDosageDoseandrateInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaxDosePerPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaxDosePerPeriod"))
			it.MaxDosePerPeriod, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaxDosePerAdministration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaxDosePerAdministration"))
			it.MaxDosePerAdministration, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaxDosePerLifetime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaxDosePerLifetime"))
			it.MaxDosePerLifetime, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRDurationInput(ctx context.Context, obj interface{}) (domain.FHIRDurationInput, error) {
	var it domain.FHIRDurationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Comparator"))
			it.Comparator, err = ec.unmarshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Unit"))
			it.Unit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterClasshistoryInput(ctx context.Context, obj interface{}) (domain.FHIREncounterClasshistoryInput, error) {
	var it domain.FHIREncounterClasshistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Class":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Class"))
			it.Class, err = ec.unmarshalNFHIRCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalNFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterDiagnosisInput(ctx context.Context, obj interface{}) (domain.FHIREncounterDiagnosisInput, error) {
	var it domain.FHIREncounterDiagnosisInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Condition"))
			it.Condition, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Rank"))
			it.Rank, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterHospitalizationInput(ctx context.Context, obj interface{}) (domain.FHIREncounterHospitalizationInput, error) {
	var it domain.FHIREncounterHospitalizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "PreAdmissionIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PreAdmissionIdentifier"))
			it.PreAdmissionIdentifier, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Origin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Origin"))
			it.Origin, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AdmitSource":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AdmitSource"))
			it.AdmitSource, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReAdmission":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReAdmission"))
			it.ReAdmission, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DietPreference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DietPreference"))
			it.DietPreference, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "SpecialCourtesy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SpecialCourtesy"))
			it.SpecialCourtesy, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "SpecialArrangement":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SpecialArrangement"))
			it.SpecialArrangement, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Destination":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Destination"))
			it.Destination, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DischargeDisposition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DischargeDisposition"))
			it.DischargeDisposition, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterInput(ctx context.Context, obj interface{}) (domain.FHIREncounterInput, error) {
	var it domain.FHIREncounterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalNFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalNEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "StatusHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("StatusHistory"))
			it.StatusHistory, err = ec.unmarshalOFHIREncounterStatushistoryInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Class":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Class"))
			it.Class, err = ec.unmarshalNFHIRCodingInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ClassHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ClassHistory"))
			it.ClassHistory, err = ec.unmarshalOFHIREncounterClasshistoryInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ServiceType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ServiceType"))
			it.ServiceType, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Priority"))
			it.Priority, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EpisodeOfCare":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EpisodeOfCare"))
			it.EpisodeOfCare, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BasedOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BasedOn"))
			it.BasedOn, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Participant":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Participant"))
			it.Participant, err = ec.unmarshalOFHIREncounterParticipantInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipantInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Appointment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Appointment"))
			it.Appointment, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Length":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Length"))
			it.Length, err = ec.unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonCode"))
			it.ReasonCode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonReference"))
			it.ReasonReference, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Diagnosis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Diagnosis"))
			it.Diagnosis, err = ec.unmarshalOFHIREncounterDiagnosisInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosisInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Account":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Account"))
			it.Account, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Hospitalization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Hospitalization"))
			it.Hospitalization, err = ec.unmarshalOFHIREncounterHospitalizationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterHospitalizationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Location"))
			it.Location, err = ec.unmarshalOFHIREncounterLocationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ServiceProvider":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ServiceProvider"))
			it.ServiceProvider, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PartOf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PartOf"))
			it.PartOf, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterLocationInput(ctx context.Context, obj interface{}) (domain.FHIREncounterLocationInput, error) {
	var it domain.FHIREncounterLocationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Location"))
			it.Location, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOEncounterLocationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterLocationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "PhysicalType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PhysicalType"))
			it.PhysicalType, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterParticipantInput(ctx context.Context, obj interface{}) (domain.FHIREncounterParticipantInput, error) {
	var it domain.FHIREncounterParticipantInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Individual":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Individual"))
			it.Individual, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREncounterStatushistoryInput(ctx context.Context, obj interface{}) (domain.FHIREncounterStatushistoryInput, error) {
	var it domain.FHIREncounterStatushistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOEncounterStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusHistoryStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalNFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREpisodeOfCareInput(ctx context.Context, obj interface{}) (domain.FHIREpisodeOfCareInput, error) {
	var it domain.FHIREpisodeOfCareInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOEpisodeOfCareStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "StatusHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("StatusHistory"))
			it.StatusHistory, err = ec.unmarshalOFHIREpisodeofcareStatushistoryInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistoryInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Diagnosis":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Diagnosis"))
			it.Diagnosis, err = ec.unmarshalOFHIREpisodeofcareDiagnosisInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosisInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Patient":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Patient"))
			it.Patient, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ManagingOrganization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ManagingOrganization"))
			it.ManagingOrganization, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReferralRequest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReferralRequest"))
			it.ReferralRequest, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "CareManager":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CareManager"))
			it.CareManager, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Team":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Team"))
			it.Team, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Account":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Account"))
			it.Account, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREpisodeofcareDiagnosisInput(ctx context.Context, obj interface{}) (domain.FHIREpisodeofcareDiagnosisInput, error) {
	var it domain.FHIREpisodeofcareDiagnosisInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Condition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Condition"))
			it.Condition, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Role"))
			it.Role, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Rank":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Rank"))
			it.Rank, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIREpisodeofcareStatushistoryInput(ctx context.Context, obj interface{}) (domain.FHIREpisodeofcareStatushistoryInput, error) {
	var it domain.FHIREpisodeofcareStatushistoryInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOEpisodeOfCareStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusHistoryStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalNFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRHumanNameInput(ctx context.Context, obj interface{}) (domain.FHIRHumanNameInput, error) {
	var it domain.FHIRHumanNameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Family":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Family"))
			it.Family, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Given":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Given"))
			it.Given, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "Prefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Prefix"))
			it.Prefix, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Suffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Suffix"))
			it.Suffix, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRIdentifierInput(ctx context.Context, obj interface{}) (domain.FHIRIdentifierInput, error) {
	var it domain.FHIRIdentifierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Use":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Use"))
			it.Use, err = ec.unmarshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Assigner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Assigner"))
			it.Assigner, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRMedicationInput(ctx context.Context, obj interface{}) (domain.FHIRMedicationInput, error) {
	var it domain.FHIRMedicationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOFHIRNarrativeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrativeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOMedicationStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Manufacturer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Manufacturer"))
			it.Manufacturer, err = ec.unmarshalOFHIROrganizationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Form":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Form"))
			it.Form, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Amount"))
			it.Amount, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Ingredient":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Ingredient"))
			it.Ingredient, err = ec.unmarshalOMedicationIngredientInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredientInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Batch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Batch"))
			it.Batch, err = ec.unmarshalOMedicationBatchInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationBatchInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRMedicationRequestInput(ctx context.Context, obj interface{}) (domain.FHIRMedicationRequestInput, error) {
	var it domain.FHIRMedicationRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "StatusReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("StatusReason"))
			it.StatusReason, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Intent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Intent"))
			it.Intent, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Priority"))
			it.Priority, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoNotPerform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoNotPerform"))
			it.DoNotPerform, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReportedBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReportedBoolean"))
			it.ReportedBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReportedReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReportedReference"))
			it.ReportedReference, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MedicationCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MedicationCodeableConcept"))
			it.MedicationCodeableConcept, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MedicationReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MedicationReference"))
			it.MedicationReference, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Encounter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Encounter"))
			it.Encounter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "SupportingInformation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SupportingInformation"))
			it.SupportingInformation, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthoredOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthoredOn"))
			it.AuthoredOn, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Requester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Requester"))
			it.Requester, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Performer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Performer"))
			it.Performer, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PerformerType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PerformerType"))
			it.PerformerType, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Recorder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Recorder"))
			it.Recorder, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonCode"))
			it.ReasonCode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonReference"))
			it.ReasonReference, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "InstantiatesCanonical":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("InstantiatesCanonical"))
			it.InstantiatesCanonical, err = ec.unmarshalOCanonical2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCanonical(ctx, v)
			if err != nil {
				return it, err
			}
		case "InstantiatesURI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("InstantiatesURI"))
			it.InstantiatesURI, err = ec.unmarshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, v)
			if err != nil {
				return it, err
			}
		case "BasedOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BasedOn"))
			it.BasedOn, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "GroupIdentifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GroupIdentifier"))
			it.GroupIdentifier, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "CourseOfTherapyType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CourseOfTherapyType"))
			it.CourseOfTherapyType, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Insurance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Insurance"))
			it.Insurance, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DosageInstruction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DosageInstruction"))
			it.DosageInstruction, err = ec.unmarshalOFHIRDosageInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DispenseRequest":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DispenseRequest"))
			it.DispenseRequest, err = ec.unmarshalOFHIRMedicationrequestDispenserequestInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestDispenserequestInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Substitution":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Substitution"))
			it.Substitution, err = ec.unmarshalOFHIRMedicationrequestSubstitutionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestSubstitutionInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PriorPrescription":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PriorPrescription"))
			it.PriorPrescription, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DetectedIssue":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DetectedIssue"))
			it.DetectedIssue, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EventHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EventHistory"))
			it.EventHistory, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRMedicationStatementInput(ctx context.Context, obj interface{}) (domain.FHIRMedicationStatementInput, error) {
	var it domain.FHIRMedicationStatementInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOFHIRNarrativeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrativeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BasedOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BasedOn"))
			it.BasedOn, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PartOf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PartOf"))
			it.PartOf, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOMedicationStatementStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatementStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "StatusReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("StatusReason"))
			it.StatusReason, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MedicationCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MedicationCodeableConcept"))
			it.MedicationCodeableConcept, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MedicationReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MedicationReference"))
			it.MedicationReference, err = ec.unmarshalOFHIRMedicationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Context":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Context"))
			it.Context, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EffectiveDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EffectiveDateTime"))
			it.EffectiveDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "EffectivePeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EffectivePeriod"))
			it.EffectivePeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DateAsserted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DateAsserted"))
			it.DateAsserted, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "InformationSource":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("InformationSource"))
			it.InformationSource, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DerivedFrom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DerivedFrom"))
			it.DerivedFrom, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonCode"))
			it.ReasonCode, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonReference"))
			it.ReasonReference, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Dosage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Dosage"))
			it.Dosage, err = ec.unmarshalOFHIRDosageInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRMedicationrequestDispenserequestInput(ctx context.Context, obj interface{}) (domain.FHIRMedicationrequestDispenserequestInput, error) {
	var it domain.FHIRMedicationrequestDispenserequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "InitialFill":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("InitialFill"))
			it.InitialFill, err = ec.unmarshalOFHIRMedicationrequestInitialfillInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestInitialfillInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DispenseInterval":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DispenseInterval"))
			it.DispenseInterval, err = ec.unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValidityPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValidityPeriod"))
			it.ValidityPeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "NumberOfRepeatsAllowed":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("NumberOfRepeatsAllowed"))
			it.NumberOfRepeatsAllowed, err = ec.unmarshalOUnsignedInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
			it.Quantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ExpectedSupplyDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ExpectedSupplyDuration"))
			it.ExpectedSupplyDuration, err = ec.unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Performer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Performer"))
			it.Performer, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRMedicationrequestInitialfillInput(ctx context.Context, obj interface{}) (domain.FHIRMedicationrequestInitialfillInput, error) {
	var it domain.FHIRMedicationrequestInitialfillInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Quantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Quantity"))
			it.Quantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Duration"))
			it.Duration, err = ec.unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRMedicationrequestSubstitutionInput(ctx context.Context, obj interface{}) (domain.FHIRMedicationrequestSubstitutionInput, error) {
	var it domain.FHIRMedicationrequestSubstitutionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "AllowedBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AllowedBoolean"))
			it.AllowedBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "AllowedCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AllowedCodeableConcept"))
			it.AllowedCodeableConcept, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Reason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Reason"))
			it.Reason, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRNarrativeInput(ctx context.Context, obj interface{}) (domain.FHIRNarrativeInput, error) {
	var it domain.FHIRNarrativeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Div":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Div"))
			it.Div, err = ec.unmarshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRObservationComponentInput(ctx context.Context, obj interface{}) (domain.FHIRObservationComponentInput, error) {
	var it domain.FHIRObservationComponentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueQuantity"))
			it.ValueQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueCodeableConcept"))
			it.ValueCodeableConcept, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueString"))
			it.ValueString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueBoolean"))
			it.ValueBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueInteger":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueInteger"))
			it.ValueInteger, err = ec.unmarshalOInteger2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueRange"))
			it.ValueRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueRatio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueRatio"))
			it.ValueRatio, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueSampledData":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueSampledData"))
			it.ValueSampledData, err = ec.unmarshalOFHIRSampledDataInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRSampledDataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueTime"))
			it.ValueTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueDateTime"))
			it.ValueDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValuePeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValuePeriod"))
			it.ValuePeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DataAbsentReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DataAbsentReason"))
			it.DataAbsentReason, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Interpretation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Interpretation"))
			it.Interpretation, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReferenceRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReferenceRange"))
			it.ReferenceRange, err = ec.unmarshalOFHIRObservationReferencerangeInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRObservationInput(ctx context.Context, obj interface{}) (domain.FHIRObservationInput, error) {
	var it domain.FHIRObservationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BasedOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BasedOn"))
			it.BasedOn, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PartOf":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PartOf"))
			it.PartOf, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOObservationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐObservationStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Focus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Focus"))
			it.Focus, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Encounter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Encounter"))
			it.Encounter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EffectiveDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EffectiveDateTime"))
			it.EffectiveDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "EffectivePeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EffectivePeriod"))
			it.EffectivePeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EffectiveTiming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EffectiveTiming"))
			it.EffectiveTiming, err = ec.unmarshalOFHIRTimingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "EffectiveInstant":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("EffectiveInstant"))
			it.EffectiveInstant, err = ec.unmarshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, v)
			if err != nil {
				return it, err
			}
		case "Issued":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Issued"))
			it.Issued, err = ec.unmarshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, v)
			if err != nil {
				return it, err
			}
		case "Performer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Performer"))
			it.Performer, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueQuantity"))
			it.ValueQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueCodeableConcept"))
			it.ValueCodeableConcept, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueString"))
			it.ValueString, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueBoolean"))
			it.ValueBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueInteger":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueInteger"))
			it.ValueInteger, err = ec.unmarshalOInteger2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueRange"))
			it.ValueRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueRatio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueRatio"))
			it.ValueRatio, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueSampledData":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueSampledData"))
			it.ValueSampledData, err = ec.unmarshalOFHIRSampledDataInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRSampledDataInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueTime"))
			it.ValueTime, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValueDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValueDateTime"))
			it.ValueDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "ValuePeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ValuePeriod"))
			it.ValuePeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DataAbsentReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DataAbsentReason"))
			it.DataAbsentReason, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Interpretation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Interpretation"))
			it.Interpretation, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BodySite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BodySite"))
			it.BodySite, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Method":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Method"))
			it.Method, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Specimen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Specimen"))
			it.Specimen, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Device"))
			it.Device, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReferenceRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReferenceRange"))
			it.ReferenceRange, err = ec.unmarshalOFHIRObservationReferencerangeInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "HasMember":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("HasMember"))
			it.HasMember, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "DerivedFrom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DerivedFrom"))
			it.DerivedFrom, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Component":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Component"))
			it.Component, err = ec.unmarshalOFHIRObservationComponentInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponentInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRObservationReferencerangeInput(ctx context.Context, obj interface{}) (domain.FHIRObservationReferencerangeInput, error) {
	var it domain.FHIRObservationReferencerangeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Low":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Low"))
			it.Low, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "High":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("High"))
			it.High, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AppliesTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AppliesTo"))
			it.AppliesTo, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Age":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Age"))
			it.Age, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Text"))
			it.Text, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIROrganizationInput(ctx context.Context, obj interface{}) (domain.FHIROrganizationInput, error) {
	var it domain.FHIROrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Active"))
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Alias":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Alias"))
			it.Alias, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Telecom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Telecom"))
			it.Telecom, err = ec.unmarshalOFHIRContactPointInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalOFHIRAddressInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRPatientCommunicationInput(ctx context.Context, obj interface{}) (domain.FHIRPatientCommunicationInput, error) {
	var it domain.FHIRPatientCommunicationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Language"))
			it.Language, err = ec.unmarshalNFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Preferred":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Preferred"))
			it.Preferred, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRPatientContactInput(ctx context.Context, obj interface{}) (domain.FHIRPatientContactInput, error) {
	var it domain.FHIRPatientContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Relationship":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Relationship"))
			it.Relationship, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalOFHIRHumanNameInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanNameInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Telecom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Telecom"))
			it.Telecom, err = ec.unmarshalOFHIRContactPointInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalOFHIRAddressInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Gender"))
			it.Gender, err = ec.unmarshalOPatientContactGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientContactGenderEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Organization"))
			it.Organization, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRPatientInput(ctx context.Context, obj interface{}) (domain.FHIRPatientInput, error) {
	var it domain.FHIRPatientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Active"))
			it.Active, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Name"))
			it.Name, err = ec.unmarshalOFHIRHumanNameInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanNameInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Telecom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Telecom"))
			it.Telecom, err = ec.unmarshalOFHIRContactPointInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Gender"))
			it.Gender, err = ec.unmarshalOPatientGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientGenderEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "BirthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BirthDate"))
			it.BirthDate, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "DeceasedBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeceasedBoolean"))
			it.DeceasedBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "DeceasedDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DeceasedDateTime"))
			it.DeceasedDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Address"))
			it.Address, err = ec.unmarshalOFHIRAddressInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaritalStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MaritalStatus"))
			it.MaritalStatus, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "MultipleBirthBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MultipleBirthBoolean"))
			it.MultipleBirthBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "MultipleBirthInteger":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MultipleBirthInteger"))
			it.MultipleBirthInteger, err = ec.unmarshalOInteger2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Photo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Photo"))
			it.Photo, err = ec.unmarshalOFHIRAttachmentInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachmentInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Contact":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Contact"))
			it.Contact, err = ec.unmarshalOFHIRPatientContactInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContactInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Communication":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Communication"))
			it.Communication, err = ec.unmarshalOFHIRPatientCommunicationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunicationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "GeneralPractitioner":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("GeneralPractitioner"))
			it.GeneralPractitioner, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ManagingOrganization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ManagingOrganization"))
			it.ManagingOrganization, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Link"))
			it.Link, err = ec.unmarshalOFHIRPatientLinkInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLinkInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRPatientLinkInput(ctx context.Context, obj interface{}) (domain.FHIRPatientLinkInput, error) {
	var it domain.FHIRPatientLinkInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Other":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Other"))
			it.Other, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOPatientLinkTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientLinkTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRPeriodInput(ctx context.Context, obj interface{}) (domain.FHIRPeriodInput, error) {
	var it domain.FHIRPeriodInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Start":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Start"))
			it.Start, err = ec.unmarshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "End":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("End"))
			it.End, err = ec.unmarshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRQuantityInput(ctx context.Context, obj interface{}) (domain.FHIRQuantityInput, error) {
	var it domain.FHIRQuantityInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Value"))
			it.Value, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "Comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Comparator"))
			it.Comparator, err = ec.unmarshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Unit"))
			it.Unit, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "System":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("System"))
			it.System, err = ec.unmarshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRRangeInput(ctx context.Context, obj interface{}) (domain.FHIRRangeInput, error) {
	var it domain.FHIRRangeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Low":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Low"))
			it.Low, err = ec.unmarshalOFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "High":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("High"))
			it.High, err = ec.unmarshalOFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRRatioInput(ctx context.Context, obj interface{}) (domain.FHIRRatioInput, error) {
	var it domain.FHIRRatioInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Numerator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Numerator"))
			it.Numerator, err = ec.unmarshalNFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Denominator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Denominator"))
			it.Denominator, err = ec.unmarshalNFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRReferenceInput(ctx context.Context, obj interface{}) (domain.FHIRReferenceInput, error) {
	var it domain.FHIRReferenceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Reference"))
			it.Reference, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Type"))
			it.Type, err = ec.unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Display":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Display"))
			it.Display, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRSampledDataInput(ctx context.Context, obj interface{}) (domain.FHIRSampledDataInput, error) {
	var it domain.FHIRSampledDataInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Origin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Origin"))
			it.Origin, err = ec.unmarshalNFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Factor":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Factor"))
			it.Factor, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "LowerLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LowerLimit"))
			it.LowerLimit, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "UpperLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UpperLimit"))
			it.UpperLimit, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "Dimensions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Dimensions"))
			it.Dimensions, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Data"))
			it.Data, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRServiceRequestInput(ctx context.Context, obj interface{}) (domain.FHIRServiceRequestInput, error) {
	var it domain.FHIRServiceRequestInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Identifier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Identifier"))
			it.Identifier, err = ec.unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "InstantiatesCanonical":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("InstantiatesCanonical"))
			it.InstantiatesCanonical, err = ec.unmarshalOCanonical2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCanonical(ctx, v)
			if err != nil {
				return it, err
			}
		case "InstantiatesURI":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("InstantiatesURI"))
			it.InstantiatesURI, err = ec.unmarshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx, v)
			if err != nil {
				return it, err
			}
		case "BasedOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BasedOn"))
			it.BasedOn, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Replaces":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Replaces"))
			it.Replaces, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Requisition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Requisition"))
			it.Requisition, err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Status"))
			it.Status, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Intent":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Intent"))
			it.Intent, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Category"))
			it.Category, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Priority"))
			it.Priority, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "DoNotPerform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DoNotPerform"))
			it.DoNotPerform, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OrderDetail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OrderDetail"))
			it.OrderDetail, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "QuantityQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QuantityQuantity"))
			it.QuantityQuantity, err = ec.unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "QuantityRatio":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QuantityRatio"))
			it.QuantityRatio, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "QuantityRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("QuantityRange"))
			it.QuantityRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subject":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Subject"))
			it.Subject, err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Encounter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Encounter"))
			it.Encounter, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OccurrenceDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OccurrenceDateTime"))
			it.OccurrenceDateTime, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "OccurrencePeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OccurrencePeriod"))
			it.OccurrencePeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "OccurrenceTiming":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OccurrenceTiming"))
			it.OccurrenceTiming, err = ec.unmarshalOFHIRTimingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "AsNeededBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AsNeededBoolean"))
			it.AsNeededBoolean, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "AsNeededCodeableConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AsNeededCodeableConcept"))
			it.AsNeededCodeableConcept, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "AuthoredOn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("AuthoredOn"))
			it.AuthoredOn, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Requester":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Requester"))
			it.Requester, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PerformerType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PerformerType"))
			it.PerformerType, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Performer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Performer"))
			it.Performer, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "LocationCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LocationCode"))
			it.LocationCode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "LocationReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LocationReference"))
			it.LocationReference, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonCode"))
			it.ReasonCode, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "ReasonReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ReasonReference"))
			it.ReasonReference, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Insurance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Insurance"))
			it.Insurance, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "SupportingInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("SupportingInfo"))
			it.SupportingInfo, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Specimen":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Specimen"))
			it.Specimen, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BodySite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BodySite"))
			it.BodySite, err = ec.unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Note"))
			it.Note, err = ec.unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "PatientInstruction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PatientInstruction"))
			it.PatientInstruction, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "RelevantHistory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("RelevantHistory"))
			it.RelevantHistory, err = ec.unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRTimingInput(ctx context.Context, obj interface{}) (domain.FHIRTimingInput, error) {
	var it domain.FHIRTimingInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Event"))
			it.Event, err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "Repeat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Repeat"))
			it.Repeat, err = ec.unmarshalOFHIRTimingRepeatInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeatInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Code"))
			it.Code, err = ec.unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFHIRTimingRepeatInput(ctx context.Context, obj interface{}) (domain.FHIRTimingRepeatInput, error) {
	var it domain.FHIRTimingRepeatInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ID"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BoundsDuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BoundsDuration"))
			it.BoundsDuration, err = ec.unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BoundsRange":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BoundsRange"))
			it.BoundsRange, err = ec.unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "BoundsPeriod":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("BoundsPeriod"))
			it.BoundsPeriod, err = ec.unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "Count":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Count"))
			it.Count, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "CountMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CountMax"))
			it.CountMax, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Duration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Duration"))
			it.Duration, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "DurationMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DurationMax"))
			it.DurationMax, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "DurationUnit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DurationUnit"))
			it.DurationUnit, err = ec.unmarshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Frequency":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Frequency"))
			it.Frequency, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FrequencyMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FrequencyMax"))
			it.FrequencyMax, err = ec.unmarshalOPositiveInt2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Period":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Period"))
			it.Period, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "PeriodMax":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PeriodMax"))
			it.PeriodMax, err = ec.unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx, v)
			if err != nil {
				return it, err
			}
		case "PeriodUnit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("PeriodUnit"))
			it.PeriodUnit, err = ec.unmarshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "DayOfWeek":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("DayOfWeek"))
			it.DayOfWeek, err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
		case "TimeOfDay":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("TimeOfDay"))
			it.TimeOfDay, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "When":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("When"))
			it.When, err = ec.unmarshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx, v)
			if err != nil {
				return it, err
			}
		case "Offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Offset"))
			it.Offset, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentificationDocument(ctx context.Context, obj interface{}) (domain.IdentificationDocument, error) {
	var it domain.IdentificationDocument
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "documentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentType"))
			it.DocumentType, err = ec.unmarshalNIDDocumentType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIDDocumentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "documentNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("documentNumber"))
			it.DocumentNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageContentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageContentType"))
			it.ImageContentType, err = ec.unmarshalOContentType2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageBase64":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageBase64"))
			it.ImageBase64, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMedicationBatchInput(ctx context.Context, obj interface{}) (domain.MedicationBatchInput, error) {
	var it domain.MedicationBatchInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "LotNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LotNumber"))
			it.LotNumber, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "ExpirationDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ExpirationDate"))
			it.ExpirationDate, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMedicationIngredientInput(ctx context.Context, obj interface{}) (domain.MedicationIngredientInput, error) {
	var it domain.MedicationIngredientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "ItemCodelabConcept":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ItemCodelabConcept"))
			it.ItemCodelabConcept, err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "ItemReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ItemReference"))
			it.ItemReference, err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "IsActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsActive"))
			it.IsActive, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Strength":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("Strength"))
			it.Strength, err = ec.unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNameInput(ctx context.Context, obj interface{}) (domain.NameInput, error) {
	var it domain.NameInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "otherNames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherNames"))
			it.OtherNames, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOTPEpisodeCreationInput(ctx context.Context, obj interface{}) (domain.OTPEpisodeCreationInput, error) {
	var it domain.OTPEpisodeCreationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerCode"))
			it.ProviderCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msisdn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
			it.Msisdn, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "otp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
			it.Otp, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "fullAccess":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fullAccess"))
			it.FullAccess, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOTPEpisodeUpgradeInput(ctx context.Context, obj interface{}) (domain.OTPEpisodeUpgradeInput, error) {
	var it domain.OTPEpisodeUpgradeInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "episodeID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeID"))
			it.EpisodeID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "msisdn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
			it.Msisdn, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "otp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
			it.Otp, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatientExtraInformationInput(ctx context.Context, obj interface{}) (domain.PatientExtraInformationInput, error) {
	var it domain.PatientExtraInformationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "maritalStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maritalStatus"))
			it.MaritalStatus, err = ec.unmarshalOMaritalStatus2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMaritalStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "languages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			it.Languages, err = ec.unmarshalOLanguage2ᚕᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx, v)
			if err != nil {
				return it, err
			}
		case "emails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			it.Emails, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneNumberInput(ctx context.Context, obj interface{}) (domain.PhoneNumberInput, error) {
	var it domain.PhoneNumberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "msisdn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
			it.Msisdn, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "verificationCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verificationCode"))
			it.VerificationCode, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "isUSSD":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isUSSD"))
			it.IsUssd, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "communicationOptIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communicationOptIn"))
			it.CommunicationOptIn, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhotoInput(ctx context.Context, obj interface{}) (domain.PhotoInput, error) {
	var it domain.PhotoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "photoContentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoContentType"))
			it.PhotoContentType, err = ec.unmarshalNContentType2githubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoBase64data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoBase64data"))
			it.PhotoBase64data, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "photoFilename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photoFilename"))
			it.PhotoFilename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhysicalAddress(ctx context.Context, obj interface{}) (domain.PhysicalAddress, error) {
	var it domain.PhysicalAddress
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "mapsCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mapsCode"))
			it.MapsCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "physicalAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("physicalAddress"))
			it.PhysicalAddress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPostalAddress(ctx context.Context, obj interface{}) (domain.PostalAddress, error) {
	var it domain.PostalAddress
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "postalAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalAddress"))
			it.PostalAddress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postalCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalCode"))
			it.PostalCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRetirePatientInput(ctx context.Context, obj interface{}) (domain.RetirePatientInput, error) {
	var it domain.RetirePatientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSimpleNHIFInput(ctx context.Context, obj interface{}) (domain.SimpleNHIFInput, error) {
	var it domain.SimpleNHIFInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "membershipNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("membershipNumber"))
			it.MembershipNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "frontImageBase64":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frontImageBase64"))
			it.FrontImageBase64, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "frontImageContentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("frontImageContentType"))
			it.FrontImageContentType, err = ec.unmarshalOContentType2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
		case "rearImageBase64":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rearImageBase64"))
			it.RearImageBase64, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "rearImageContentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rearImageContentType"))
			it.RearImageContentType, err = ec.unmarshalOContentType2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSimpleNextOfKinInput(ctx context.Context, obj interface{}) (domain.SimpleNextOfKinInput, error) {
	var it domain.SimpleNextOfKinInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			it.PatientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "names":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("names"))
			it.Names, err = ec.unmarshalNNameInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNameInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumbers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumbers"))
			it.PhoneNumbers, err = ec.unmarshalNPhoneNumberInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhoneNumberInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "emails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			it.Emails, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "physicalAddresses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("physicalAddresses"))
			it.PhysicalAddresses, err = ec.unmarshalOPhysicalAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhysicalAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "postalAddresses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalAddresses"))
			it.PostalAddresses, err = ec.unmarshalOPostalAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPostalAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			it.BirthDate, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "relationship":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relationship"))
			it.Relationship, err = ec.unmarshalNRelationshipType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐRelationshipType(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			it.Active, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSimplePatientRegistrationInput(ctx context.Context, obj interface{}) (domain.SimplePatientRegistrationInput, error) {
	var it domain.SimplePatientRegistrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "names":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("names"))
			it.Names, err = ec.unmarshalNNameInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNameInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			it.Gender, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "identificationDocuments":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identificationDocuments"))
			it.IdentificationDocuments, err = ec.unmarshalOIdentificationDocument2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentificationDocumentᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			it.BirthDate, err = ec.unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumbers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumbers"))
			it.PhoneNumbers, err = ec.unmarshalNPhoneNumberInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhoneNumberInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "photos":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("photos"))
			it.Photos, err = ec.unmarshalOPhotoInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhotoInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "emails":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emails"))
			it.Emails, err = ec.unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEmailInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "physicalAddresses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("physicalAddresses"))
			it.PhysicalAddresses, err = ec.unmarshalOPhysicalAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhysicalAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "postalAddresses":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postalAddresses"))
			it.PostalAddresses, err = ec.unmarshalOPostalAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPostalAddress(ctx, v)
			if err != nil {
				return it, err
			}
		case "maritalStatus":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maritalStatus"))
			it.MaritalStatus, err = ec.unmarshalOMaritalStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMaritalStatus(ctx, v)
			if err != nil {
				return it, err
			}
		case "languages":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("languages"))
			it.Languages, err = ec.unmarshalOLanguage2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx, v)
			if err != nil {
				return it, err
			}
		case "active":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("active"))
			it.Active, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "replicateUSSD":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicateUSSD"))
			it.ReplicateUSSD, err = ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case domain.Dummy:
		return ec._Dummy(ctx, sel, &obj)
	case *domain.Dummy:
		if obj == nil {
			return graphql.Null
		}
		return ec._Dummy(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var dummyImplementors = []string{"Dummy", "_Entity"}

func (ec *executionContext) _Dummy(ctx context.Context, sel ast.SelectionSet, obj *domain.Dummy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dummyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dummy")
		case "id":
			out.Values[i] = ec._Dummy_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findDummyByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDummyByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var episodeOfCarePayloadImplementors = []string{"EpisodeOfCarePayload"}

func (ec *executionContext) _EpisodeOfCarePayload(ctx context.Context, sel ast.SelectionSet, obj *domain.EpisodeOfCarePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, episodeOfCarePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EpisodeOfCarePayload")
		case "episodeOfCare":
			out.Values[i] = ec._EpisodeOfCarePayload_episodeOfCare(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalVisits":
			out.Values[i] = ec._EpisodeOfCarePayload_totalVisits(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAddressImplementors = []string{"FHIRAddress"}

func (ec *executionContext) _FHIRAddress(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAddress")
		case "ID":
			out.Values[i] = ec._FHIRAddress_ID(ctx, field, obj)
		case "Use":
			out.Values[i] = ec._FHIRAddress_Use(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIRAddress_Type(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRAddress_Text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Line":
			out.Values[i] = ec._FHIRAddress_Line(ctx, field, obj)
		case "City":
			out.Values[i] = ec._FHIRAddress_City(ctx, field, obj)
		case "District":
			out.Values[i] = ec._FHIRAddress_District(ctx, field, obj)
		case "State":
			out.Values[i] = ec._FHIRAddress_State(ctx, field, obj)
		case "PostalCode":
			out.Values[i] = ec._FHIRAddress_PostalCode(ctx, field, obj)
		case "Country":
			out.Values[i] = ec._FHIRAddress_Country(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIRAddress_Period(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAgeImplementors = []string{"FHIRAge"}

func (ec *executionContext) _FHIRAge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAge")
		case "ID":
			out.Values[i] = ec._FHIRAge_ID(ctx, field, obj)
		case "Value":
			out.Values[i] = ec._FHIRAge_Value(ctx, field, obj)
		case "Comparator":
			out.Values[i] = ec._FHIRAge_Comparator(ctx, field, obj)
		case "Unit":
			out.Values[i] = ec._FHIRAge_Unit(ctx, field, obj)
		case "System":
			out.Values[i] = ec._FHIRAge_System(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRAge_Code(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAllergyIntoleranceImplementors = []string{"FHIRAllergyIntolerance"}

func (ec *executionContext) _FHIRAllergyIntolerance(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAllergyIntolerance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAllergyIntoleranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAllergyIntolerance")
		case "ID":
			out.Values[i] = ec._FHIRAllergyIntolerance_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRAllergyIntolerance_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRAllergyIntolerance_Identifier(ctx, field, obj)
		case "ClinicalStatus":
			out.Values[i] = ec._FHIRAllergyIntolerance_ClinicalStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "VerificationStatus":
			out.Values[i] = ec._FHIRAllergyIntolerance_VerificationStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._FHIRAllergyIntolerance_Type(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._FHIRAllergyIntolerance_Category(ctx, field, obj)
		case "Criticality":
			out.Values[i] = ec._FHIRAllergyIntolerance_Criticality(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Code":
			out.Values[i] = ec._FHIRAllergyIntolerance_Code(ctx, field, obj)
		case "Patient":
			out.Values[i] = ec._FHIRAllergyIntolerance_Patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Encounter":
			out.Values[i] = ec._FHIRAllergyIntolerance_Encounter(ctx, field, obj)
		case "OnsetDateTime":
			out.Values[i] = ec._FHIRAllergyIntolerance_OnsetDateTime(ctx, field, obj)
		case "OnsetAge":
			out.Values[i] = ec._FHIRAllergyIntolerance_OnsetAge(ctx, field, obj)
		case "OnsetPeriod":
			out.Values[i] = ec._FHIRAllergyIntolerance_OnsetPeriod(ctx, field, obj)
		case "OnsetRange":
			out.Values[i] = ec._FHIRAllergyIntolerance_OnsetRange(ctx, field, obj)
		case "OnsetString":
			out.Values[i] = ec._FHIRAllergyIntolerance_OnsetString(ctx, field, obj)
		case "RecordedDate":
			out.Values[i] = ec._FHIRAllergyIntolerance_RecordedDate(ctx, field, obj)
		case "Recorder":
			out.Values[i] = ec._FHIRAllergyIntolerance_Recorder(ctx, field, obj)
		case "Asserter":
			out.Values[i] = ec._FHIRAllergyIntolerance_Asserter(ctx, field, obj)
		case "LastOccurrence":
			out.Values[i] = ec._FHIRAllergyIntolerance_LastOccurrence(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRAllergyIntolerance_Note(ctx, field, obj)
		case "Reaction":
			out.Values[i] = ec._FHIRAllergyIntolerance_Reaction(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAllergyIntoleranceRelayConnectionImplementors = []string{"FHIRAllergyIntoleranceRelayConnection"}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAllergyIntoleranceRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAllergyIntoleranceRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAllergyIntoleranceRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRAllergyIntoleranceRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRAllergyIntoleranceRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAllergyIntoleranceRelayEdgeImplementors = []string{"FHIRAllergyIntoleranceRelayEdge"}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAllergyIntoleranceRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAllergyIntoleranceRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAllergyIntoleranceRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRAllergyIntoleranceRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRAllergyIntoleranceRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAllergyIntoleranceRelayPayloadImplementors = []string{"FHIRAllergyIntoleranceRelayPayload"}

func (ec *executionContext) _FHIRAllergyIntoleranceRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAllergyIntoleranceRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAllergyIntoleranceRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAllergyIntoleranceRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRAllergyIntoleranceRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAllergyintoleranceReactionImplementors = []string{"FHIRAllergyintoleranceReaction"}

func (ec *executionContext) _FHIRAllergyintoleranceReaction(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAllergyintoleranceReaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAllergyintoleranceReactionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAllergyintoleranceReaction")
		case "ID":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_ID(ctx, field, obj)
		case "Substance":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_Substance(ctx, field, obj)
		case "Manifestation":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_Manifestation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Description":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_Description(ctx, field, obj)
		case "Onset":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_Onset(ctx, field, obj)
		case "Severity":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_Severity(ctx, field, obj)
		case "ExposureRoute":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_ExposureRoute(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRAllergyintoleranceReaction_Note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAnnotationImplementors = []string{"FHIRAnnotation"}

func (ec *executionContext) _FHIRAnnotation(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAnnotation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAnnotationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAnnotation")
		case "ID":
			out.Values[i] = ec._FHIRAnnotation_ID(ctx, field, obj)
		case "AuthorReference":
			out.Values[i] = ec._FHIRAnnotation_AuthorReference(ctx, field, obj)
		case "AuthorString":
			out.Values[i] = ec._FHIRAnnotation_AuthorString(ctx, field, obj)
		case "Time":
			out.Values[i] = ec._FHIRAnnotation_Time(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRAnnotation_Text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRAttachmentImplementors = []string{"FHIRAttachment"}

func (ec *executionContext) _FHIRAttachment(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRAttachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRAttachment")
		case "ID":
			out.Values[i] = ec._FHIRAttachment_ID(ctx, field, obj)
		case "ContentType":
			out.Values[i] = ec._FHIRAttachment_ContentType(ctx, field, obj)
		case "Language":
			out.Values[i] = ec._FHIRAttachment_Language(ctx, field, obj)
		case "Data":
			out.Values[i] = ec._FHIRAttachment_Data(ctx, field, obj)
		case "URL":
			out.Values[i] = ec._FHIRAttachment_URL(ctx, field, obj)
		case "Size":
			out.Values[i] = ec._FHIRAttachment_Size(ctx, field, obj)
		case "Hash":
			out.Values[i] = ec._FHIRAttachment_Hash(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._FHIRAttachment_Title(ctx, field, obj)
		case "Creation":
			out.Values[i] = ec._FHIRAttachment_Creation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCodeableConceptImplementors = []string{"FHIRCodeableConcept"}

func (ec *executionContext) _FHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCodeableConcept) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCodeableConceptImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCodeableConcept")
		case "ID":
			out.Values[i] = ec._FHIRCodeableConcept_ID(ctx, field, obj)
		case "Coding":
			out.Values[i] = ec._FHIRCodeableConcept_Coding(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Text":
			out.Values[i] = ec._FHIRCodeableConcept_Text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCodingImplementors = []string{"FHIRCoding"}

func (ec *executionContext) _FHIRCoding(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCoding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCodingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCoding")
		case "ID":
			out.Values[i] = ec._FHIRCoding_ID(ctx, field, obj)
		case "System":
			out.Values[i] = ec._FHIRCoding_System(ctx, field, obj)
		case "Version":
			out.Values[i] = ec._FHIRCoding_Version(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRCoding_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Display":
			out.Values[i] = ec._FHIRCoding_Display(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "UserSelected":
			out.Values[i] = ec._FHIRCoding_UserSelected(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionImplementors = []string{"FHIRComposition"}

func (ec *executionContext) _FHIRComposition(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRComposition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRComposition")
		case "ID":
			out.Values[i] = ec._FHIRComposition_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRComposition_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRComposition_Identifier(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRComposition_Status(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIRComposition_Type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Category":
			out.Values[i] = ec._FHIRComposition_Category(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._FHIRComposition_Subject(ctx, field, obj)
		case "Encounter":
			out.Values[i] = ec._FHIRComposition_Encounter(ctx, field, obj)
		case "Date":
			out.Values[i] = ec._FHIRComposition_Date(ctx, field, obj)
		case "Author":
			out.Values[i] = ec._FHIRComposition_Author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._FHIRComposition_Title(ctx, field, obj)
		case "Confidentiality":
			out.Values[i] = ec._FHIRComposition_Confidentiality(ctx, field, obj)
		case "Attester":
			out.Values[i] = ec._FHIRComposition_Attester(ctx, field, obj)
		case "Custodian":
			out.Values[i] = ec._FHIRComposition_Custodian(ctx, field, obj)
		case "RelatesTo":
			out.Values[i] = ec._FHIRComposition_RelatesTo(ctx, field, obj)
		case "Event":
			out.Values[i] = ec._FHIRComposition_Event(ctx, field, obj)
		case "Section":
			out.Values[i] = ec._FHIRComposition_Section(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionAttesterImplementors = []string{"FHIRCompositionAttester"}

func (ec *executionContext) _FHIRCompositionAttester(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionAttester) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionAttesterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionAttester")
		case "ID":
			out.Values[i] = ec._FHIRCompositionAttester_ID(ctx, field, obj)
		case "Mode":
			out.Values[i] = ec._FHIRCompositionAttester_Mode(ctx, field, obj)
		case "Time":
			out.Values[i] = ec._FHIRCompositionAttester_Time(ctx, field, obj)
		case "Party":
			out.Values[i] = ec._FHIRCompositionAttester_Party(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionEventImplementors = []string{"FHIRCompositionEvent"}

func (ec *executionContext) _FHIRCompositionEvent(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionEventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionEvent")
		case "ID":
			out.Values[i] = ec._FHIRCompositionEvent_ID(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRCompositionEvent_Code(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIRCompositionEvent_Period(ctx, field, obj)
		case "Detail":
			out.Values[i] = ec._FHIRCompositionEvent_Detail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionRelatestoImplementors = []string{"FHIRCompositionRelatesto"}

func (ec *executionContext) _FHIRCompositionRelatesto(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionRelatesto) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionRelatestoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionRelatesto")
		case "ID":
			out.Values[i] = ec._FHIRCompositionRelatesto_ID(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRCompositionRelatesto_Code(ctx, field, obj)
		case "TargetIdentifier":
			out.Values[i] = ec._FHIRCompositionRelatesto_TargetIdentifier(ctx, field, obj)
		case "TargetReference":
			out.Values[i] = ec._FHIRCompositionRelatesto_TargetReference(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionRelayConnectionImplementors = []string{"FHIRCompositionRelayConnection"}

func (ec *executionContext) _FHIRCompositionRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRCompositionRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRCompositionRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionRelayEdgeImplementors = []string{"FHIRCompositionRelayEdge"}

func (ec *executionContext) _FHIRCompositionRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRCompositionRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRCompositionRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionRelayPayloadImplementors = []string{"FHIRCompositionRelayPayload"}

func (ec *executionContext) _FHIRCompositionRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRCompositionRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRCompositionSectionImplementors = []string{"FHIRCompositionSection"}

func (ec *executionContext) _FHIRCompositionSection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCompositionSection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRCompositionSectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCompositionSection")
		case "ID":
			out.Values[i] = ec._FHIRCompositionSection_ID(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._FHIRCompositionSection_Title(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRCompositionSection_Code(ctx, field, obj)
		case "Author":
			out.Values[i] = ec._FHIRCompositionSection_Author(ctx, field, obj)
		case "Focus":
			out.Values[i] = ec._FHIRCompositionSection_Focus(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRCompositionSection_Text(ctx, field, obj)
		case "Mode":
			out.Values[i] = ec._FHIRCompositionSection_Mode(ctx, field, obj)
		case "OrderedBy":
			out.Values[i] = ec._FHIRCompositionSection_OrderedBy(ctx, field, obj)
		case "Entry":
			out.Values[i] = ec._FHIRCompositionSection_Entry(ctx, field, obj)
		case "EmptyReason":
			out.Values[i] = ec._FHIRCompositionSection_EmptyReason(ctx, field, obj)
		case "Section":
			out.Values[i] = ec._FHIRCompositionSection_Section(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRConditionImplementors = []string{"FHIRCondition"}

func (ec *executionContext) _FHIRCondition(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRCondition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRConditionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRCondition")
		case "ID":
			out.Values[i] = ec._FHIRCondition_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRCondition_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRCondition_Identifier(ctx, field, obj)
		case "ClinicalStatus":
			out.Values[i] = ec._FHIRCondition_ClinicalStatus(ctx, field, obj)
		case "VerificationStatus":
			out.Values[i] = ec._FHIRCondition_VerificationStatus(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._FHIRCondition_Category(ctx, field, obj)
		case "Severity":
			out.Values[i] = ec._FHIRCondition_Severity(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRCondition_Code(ctx, field, obj)
		case "BodySite":
			out.Values[i] = ec._FHIRCondition_BodySite(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._FHIRCondition_Subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Encounter":
			out.Values[i] = ec._FHIRCondition_Encounter(ctx, field, obj)
		case "OnsetDateTime":
			out.Values[i] = ec._FHIRCondition_OnsetDateTime(ctx, field, obj)
		case "OnsetAge":
			out.Values[i] = ec._FHIRCondition_OnsetAge(ctx, field, obj)
		case "OnsetPeriod":
			out.Values[i] = ec._FHIRCondition_OnsetPeriod(ctx, field, obj)
		case "OnsetRange":
			out.Values[i] = ec._FHIRCondition_OnsetRange(ctx, field, obj)
		case "OnsetString":
			out.Values[i] = ec._FHIRCondition_OnsetString(ctx, field, obj)
		case "AbatementDateTime":
			out.Values[i] = ec._FHIRCondition_AbatementDateTime(ctx, field, obj)
		case "AbatementAge":
			out.Values[i] = ec._FHIRCondition_AbatementAge(ctx, field, obj)
		case "AbatementPeriod":
			out.Values[i] = ec._FHIRCondition_AbatementPeriod(ctx, field, obj)
		case "AbatementRange":
			out.Values[i] = ec._FHIRCondition_AbatementRange(ctx, field, obj)
		case "AbatementString":
			out.Values[i] = ec._FHIRCondition_AbatementString(ctx, field, obj)
		case "RecordedDate":
			out.Values[i] = ec._FHIRCondition_RecordedDate(ctx, field, obj)
		case "Recorder":
			out.Values[i] = ec._FHIRCondition_Recorder(ctx, field, obj)
		case "Asserter":
			out.Values[i] = ec._FHIRCondition_Asserter(ctx, field, obj)
		case "Stage":
			out.Values[i] = ec._FHIRCondition_Stage(ctx, field, obj)
		case "Evidence":
			out.Values[i] = ec._FHIRCondition_Evidence(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRCondition_Note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRConditionEvidenceImplementors = []string{"FHIRConditionEvidence"}

func (ec *executionContext) _FHIRConditionEvidence(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRConditionEvidence) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRConditionEvidenceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRConditionEvidence")
		case "ID":
			out.Values[i] = ec._FHIRConditionEvidence_ID(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRConditionEvidence_Code(ctx, field, obj)
		case "Detail":
			out.Values[i] = ec._FHIRConditionEvidence_Detail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRConditionRelayConnectionImplementors = []string{"FHIRConditionRelayConnection"}

func (ec *executionContext) _FHIRConditionRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRConditionRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRConditionRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRConditionRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRConditionRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRConditionRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRConditionRelayEdgeImplementors = []string{"FHIRConditionRelayEdge"}

func (ec *executionContext) _FHIRConditionRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRConditionRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRConditionRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRConditionRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRConditionRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRConditionRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRConditionRelayPayloadImplementors = []string{"FHIRConditionRelayPayload"}

func (ec *executionContext) _FHIRConditionRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRConditionRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRConditionRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRConditionRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRConditionRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRConditionStageImplementors = []string{"FHIRConditionStage"}

func (ec *executionContext) _FHIRConditionStage(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRConditionStage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRConditionStageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRConditionStage")
		case "ID":
			out.Values[i] = ec._FHIRConditionStage_ID(ctx, field, obj)
		case "Summary":
			out.Values[i] = ec._FHIRConditionStage_Summary(ctx, field, obj)
		case "Assessment":
			out.Values[i] = ec._FHIRConditionStage_Assessment(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIRConditionStage_Type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRContactPointImplementors = []string{"FHIRContactPoint"}

func (ec *executionContext) _FHIRContactPoint(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRContactPoint) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRContactPointImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRContactPoint")
		case "ID":
			out.Values[i] = ec._FHIRContactPoint_ID(ctx, field, obj)
		case "System":
			out.Values[i] = ec._FHIRContactPoint_System(ctx, field, obj)
		case "Value":
			out.Values[i] = ec._FHIRContactPoint_Value(ctx, field, obj)
		case "Use":
			out.Values[i] = ec._FHIRContactPoint_Use(ctx, field, obj)
		case "Rank":
			out.Values[i] = ec._FHIRContactPoint_Rank(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIRContactPoint_Period(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRDosageImplementors = []string{"FHIRDosage"}

func (ec *executionContext) _FHIRDosage(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRDosage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRDosageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRDosage")
		case "ID":
			out.Values[i] = ec._FHIRDosage_ID(ctx, field, obj)
		case "Sequence":
			out.Values[i] = ec._FHIRDosage_Sequence(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRDosage_Text(ctx, field, obj)
		case "AdditionalInstruction":
			out.Values[i] = ec._FHIRDosage_AdditionalInstruction(ctx, field, obj)
		case "PatientInstruction":
			out.Values[i] = ec._FHIRDosage_PatientInstruction(ctx, field, obj)
		case "Timing":
			out.Values[i] = ec._FHIRDosage_Timing(ctx, field, obj)
		case "AsNeededBoolean":
			out.Values[i] = ec._FHIRDosage_AsNeededBoolean(ctx, field, obj)
		case "AsNeededCodeableConcept":
			out.Values[i] = ec._FHIRDosage_AsNeededCodeableConcept(ctx, field, obj)
		case "Site":
			out.Values[i] = ec._FHIRDosage_Site(ctx, field, obj)
		case "Route":
			out.Values[i] = ec._FHIRDosage_Route(ctx, field, obj)
		case "Method":
			out.Values[i] = ec._FHIRDosage_Method(ctx, field, obj)
		case "DoseAndRate":
			out.Values[i] = ec._FHIRDosage_DoseAndRate(ctx, field, obj)
		case "MaxDosePerPeriod":
			out.Values[i] = ec._FHIRDosage_MaxDosePerPeriod(ctx, field, obj)
		case "MaxDosePerAdministration":
			out.Values[i] = ec._FHIRDosage_MaxDosePerAdministration(ctx, field, obj)
		case "MaxDosePerLifetime":
			out.Values[i] = ec._FHIRDosage_MaxDosePerLifetime(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRDosageDoseandrateImplementors = []string{"FHIRDosageDoseandrate"}

func (ec *executionContext) _FHIRDosageDoseandrate(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRDosageDoseandrate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRDosageDoseandrateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRDosageDoseandrate")
		case "ID":
			out.Values[i] = ec._FHIRDosageDoseandrate_ID(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIRDosageDoseandrate_Type(ctx, field, obj)
		case "DoseRange":
			out.Values[i] = ec._FHIRDosageDoseandrate_DoseRange(ctx, field, obj)
		case "DoseQuantity":
			out.Values[i] = ec._FHIRDosageDoseandrate_DoseQuantity(ctx, field, obj)
		case "RateRatio":
			out.Values[i] = ec._FHIRDosageDoseandrate_RateRatio(ctx, field, obj)
		case "RateRange":
			out.Values[i] = ec._FHIRDosageDoseandrate_RateRange(ctx, field, obj)
		case "RateQuantity":
			out.Values[i] = ec._FHIRDosageDoseandrate_RateQuantity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRDurationImplementors = []string{"FHIRDuration"}

func (ec *executionContext) _FHIRDuration(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRDuration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRDurationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRDuration")
		case "ID":
			out.Values[i] = ec._FHIRDuration_ID(ctx, field, obj)
		case "Value":
			out.Values[i] = ec._FHIRDuration_Value(ctx, field, obj)
		case "Comparator":
			out.Values[i] = ec._FHIRDuration_Comparator(ctx, field, obj)
		case "Unit":
			out.Values[i] = ec._FHIRDuration_Unit(ctx, field, obj)
		case "System":
			out.Values[i] = ec._FHIRDuration_System(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRDuration_Code(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterImplementors = []string{"FHIREncounter"}

func (ec *executionContext) _FHIREncounter(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounter")
		case "ID":
			out.Values[i] = ec._FHIREncounter_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIREncounter_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIREncounter_Identifier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._FHIREncounter_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "StatusHistory":
			out.Values[i] = ec._FHIREncounter_StatusHistory(ctx, field, obj)
		case "Class":
			out.Values[i] = ec._FHIREncounter_Class(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ClassHistory":
			out.Values[i] = ec._FHIREncounter_ClassHistory(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIREncounter_Type(ctx, field, obj)
		case "ServiceType":
			out.Values[i] = ec._FHIREncounter_ServiceType(ctx, field, obj)
		case "Priority":
			out.Values[i] = ec._FHIREncounter_Priority(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._FHIREncounter_Subject(ctx, field, obj)
		case "EpisodeOfCare":
			out.Values[i] = ec._FHIREncounter_EpisodeOfCare(ctx, field, obj)
		case "BasedOn":
			out.Values[i] = ec._FHIREncounter_BasedOn(ctx, field, obj)
		case "Participant":
			out.Values[i] = ec._FHIREncounter_Participant(ctx, field, obj)
		case "Appointment":
			out.Values[i] = ec._FHIREncounter_Appointment(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIREncounter_Period(ctx, field, obj)
		case "Length":
			out.Values[i] = ec._FHIREncounter_Length(ctx, field, obj)
		case "ReasonCode":
			out.Values[i] = ec._FHIREncounter_ReasonCode(ctx, field, obj)
		case "ReasonReference":
			out.Values[i] = ec._FHIREncounter_ReasonReference(ctx, field, obj)
		case "Diagnosis":
			out.Values[i] = ec._FHIREncounter_Diagnosis(ctx, field, obj)
		case "Account":
			out.Values[i] = ec._FHIREncounter_Account(ctx, field, obj)
		case "Hospitalization":
			out.Values[i] = ec._FHIREncounter_Hospitalization(ctx, field, obj)
		case "Location":
			out.Values[i] = ec._FHIREncounter_Location(ctx, field, obj)
		case "ServiceProvider":
			out.Values[i] = ec._FHIREncounter_ServiceProvider(ctx, field, obj)
		case "PartOf":
			out.Values[i] = ec._FHIREncounter_PartOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterClasshistoryImplementors = []string{"FHIREncounterClasshistory"}

func (ec *executionContext) _FHIREncounterClasshistory(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterClasshistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterClasshistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterClasshistory")
		case "ID":
			out.Values[i] = ec._FHIREncounterClasshistory_ID(ctx, field, obj)
		case "Class":
			out.Values[i] = ec._FHIREncounterClasshistory_Class(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Period":
			out.Values[i] = ec._FHIREncounterClasshistory_Period(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterDiagnosisImplementors = []string{"FHIREncounterDiagnosis"}

func (ec *executionContext) _FHIREncounterDiagnosis(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterDiagnosis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterDiagnosisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterDiagnosis")
		case "ID":
			out.Values[i] = ec._FHIREncounterDiagnosis_ID(ctx, field, obj)
		case "Condition":
			out.Values[i] = ec._FHIREncounterDiagnosis_Condition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Use":
			out.Values[i] = ec._FHIREncounterDiagnosis_Use(ctx, field, obj)
		case "Rank":
			out.Values[i] = ec._FHIREncounterDiagnosis_Rank(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterHospitalizationImplementors = []string{"FHIREncounterHospitalization"}

func (ec *executionContext) _FHIREncounterHospitalization(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterHospitalization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterHospitalizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterHospitalization")
		case "ID":
			out.Values[i] = ec._FHIREncounterHospitalization_ID(ctx, field, obj)
		case "PreAdmissionIdentifier":
			out.Values[i] = ec._FHIREncounterHospitalization_PreAdmissionIdentifier(ctx, field, obj)
		case "Origin":
			out.Values[i] = ec._FHIREncounterHospitalization_Origin(ctx, field, obj)
		case "AdmitSource":
			out.Values[i] = ec._FHIREncounterHospitalization_AdmitSource(ctx, field, obj)
		case "ReAdmission":
			out.Values[i] = ec._FHIREncounterHospitalization_ReAdmission(ctx, field, obj)
		case "DietPreference":
			out.Values[i] = ec._FHIREncounterHospitalization_DietPreference(ctx, field, obj)
		case "SpecialCourtesy":
			out.Values[i] = ec._FHIREncounterHospitalization_SpecialCourtesy(ctx, field, obj)
		case "SpecialArrangement":
			out.Values[i] = ec._FHIREncounterHospitalization_SpecialArrangement(ctx, field, obj)
		case "Destination":
			out.Values[i] = ec._FHIREncounterHospitalization_Destination(ctx, field, obj)
		case "DischargeDisposition":
			out.Values[i] = ec._FHIREncounterHospitalization_DischargeDisposition(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterLocationImplementors = []string{"FHIREncounterLocation"}

func (ec *executionContext) _FHIREncounterLocation(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterLocation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterLocationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterLocation")
		case "ID":
			out.Values[i] = ec._FHIREncounterLocation_ID(ctx, field, obj)
		case "Location":
			out.Values[i] = ec._FHIREncounterLocation_Location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Status":
			out.Values[i] = ec._FHIREncounterLocation_Status(ctx, field, obj)
		case "PhysicalType":
			out.Values[i] = ec._FHIREncounterLocation_PhysicalType(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIREncounterLocation_Period(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterParticipantImplementors = []string{"FHIREncounterParticipant"}

func (ec *executionContext) _FHIREncounterParticipant(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterParticipant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterParticipantImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterParticipant")
		case "ID":
			out.Values[i] = ec._FHIREncounterParticipant_ID(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIREncounterParticipant_Type(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIREncounterParticipant_Period(ctx, field, obj)
		case "Individual":
			out.Values[i] = ec._FHIREncounterParticipant_Individual(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterRelayConnectionImplementors = []string{"FHIREncounterRelayConnection"}

func (ec *executionContext) _FHIREncounterRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIREncounterRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIREncounterRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterRelayEdgeImplementors = []string{"FHIREncounterRelayEdge"}

func (ec *executionContext) _FHIREncounterRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIREncounterRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIREncounterRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterRelayPayloadImplementors = []string{"FHIREncounterRelayPayload"}

func (ec *executionContext) _FHIREncounterRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIREncounterRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREncounterStatushistoryImplementors = []string{"FHIREncounterStatushistory"}

func (ec *executionContext) _FHIREncounterStatushistory(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREncounterStatushistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREncounterStatushistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREncounterStatushistory")
		case "ID":
			out.Values[i] = ec._FHIREncounterStatushistory_ID(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIREncounterStatushistory_Status(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIREncounterStatushistory_Period(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREpisodeOfCareImplementors = []string{"FHIREpisodeOfCare"}

func (ec *executionContext) _FHIREpisodeOfCare(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREpisodeOfCare) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREpisodeOfCareImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREpisodeOfCare")
		case "ID":
			out.Values[i] = ec._FHIREpisodeOfCare_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIREpisodeOfCare_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIREpisodeOfCare_Identifier(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIREpisodeOfCare_Status(ctx, field, obj)
		case "StatusHistory":
			out.Values[i] = ec._FHIREpisodeOfCare_StatusHistory(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIREpisodeOfCare_Type(ctx, field, obj)
		case "Diagnosis":
			out.Values[i] = ec._FHIREpisodeOfCare_Diagnosis(ctx, field, obj)
		case "Patient":
			out.Values[i] = ec._FHIREpisodeOfCare_Patient(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagingOrganization":
			out.Values[i] = ec._FHIREpisodeOfCare_ManagingOrganization(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIREpisodeOfCare_Period(ctx, field, obj)
		case "ReferralRequest":
			out.Values[i] = ec._FHIREpisodeOfCare_ReferralRequest(ctx, field, obj)
		case "CareManager":
			out.Values[i] = ec._FHIREpisodeOfCare_CareManager(ctx, field, obj)
		case "Team":
			out.Values[i] = ec._FHIREpisodeOfCare_Team(ctx, field, obj)
		case "Account":
			out.Values[i] = ec._FHIREpisodeOfCare_Account(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREpisodeOfCareRelayConnectionImplementors = []string{"FHIREpisodeOfCareRelayConnection"}

func (ec *executionContext) _FHIREpisodeOfCareRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREpisodeOfCareRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREpisodeOfCareRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREpisodeOfCareRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIREpisodeOfCareRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIREpisodeOfCareRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREpisodeOfCareRelayEdgeImplementors = []string{"FHIREpisodeOfCareRelayEdge"}

func (ec *executionContext) _FHIREpisodeOfCareRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREpisodeOfCareRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREpisodeOfCareRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREpisodeOfCareRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIREpisodeOfCareRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIREpisodeOfCareRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREpisodeOfCareRelayPayloadImplementors = []string{"FHIREpisodeOfCareRelayPayload"}

func (ec *executionContext) _FHIREpisodeOfCareRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREpisodeOfCareRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREpisodeOfCareRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREpisodeOfCareRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIREpisodeOfCareRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREpisodeofcareDiagnosisImplementors = []string{"FHIREpisodeofcareDiagnosis"}

func (ec *executionContext) _FHIREpisodeofcareDiagnosis(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREpisodeofcareDiagnosis) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREpisodeofcareDiagnosisImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREpisodeofcareDiagnosis")
		case "ID":
			out.Values[i] = ec._FHIREpisodeofcareDiagnosis_ID(ctx, field, obj)
		case "Condition":
			out.Values[i] = ec._FHIREpisodeofcareDiagnosis_Condition(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Role":
			out.Values[i] = ec._FHIREpisodeofcareDiagnosis_Role(ctx, field, obj)
		case "Rank":
			out.Values[i] = ec._FHIREpisodeofcareDiagnosis_Rank(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIREpisodeofcareStatushistoryImplementors = []string{"FHIREpisodeofcareStatushistory"}

func (ec *executionContext) _FHIREpisodeofcareStatushistory(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIREpisodeofcareStatushistory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIREpisodeofcareStatushistoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIREpisodeofcareStatushistory")
		case "ID":
			out.Values[i] = ec._FHIREpisodeofcareStatushistory_ID(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIREpisodeofcareStatushistory_Status(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIREpisodeofcareStatushistory_Period(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRHumanNameImplementors = []string{"FHIRHumanName"}

func (ec *executionContext) _FHIRHumanName(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRHumanName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRHumanNameImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRHumanName")
		case "ID":
			out.Values[i] = ec._FHIRHumanName_ID(ctx, field, obj)
		case "Use":
			out.Values[i] = ec._FHIRHumanName_Use(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Text":
			out.Values[i] = ec._FHIRHumanName_Text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Family":
			out.Values[i] = ec._FHIRHumanName_Family(ctx, field, obj)
		case "Given":
			out.Values[i] = ec._FHIRHumanName_Given(ctx, field, obj)
		case "Prefix":
			out.Values[i] = ec._FHIRHumanName_Prefix(ctx, field, obj)
		case "Suffix":
			out.Values[i] = ec._FHIRHumanName_Suffix(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIRHumanName_Period(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRIdentifierImplementors = []string{"FHIRIdentifier"}

func (ec *executionContext) _FHIRIdentifier(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRIdentifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRIdentifierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRIdentifier")
		case "ID":
			out.Values[i] = ec._FHIRIdentifier_ID(ctx, field, obj)
		case "Use":
			out.Values[i] = ec._FHIRIdentifier_Use(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._FHIRIdentifier_Type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "System":
			out.Values[i] = ec._FHIRIdentifier_System(ctx, field, obj)
		case "Value":
			out.Values[i] = ec._FHIRIdentifier_Value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Period":
			out.Values[i] = ec._FHIRIdentifier_Period(ctx, field, obj)
		case "Assigner":
			out.Values[i] = ec._FHIRIdentifier_Assigner(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationImplementors = []string{"FHIRMedication"}

func (ec *executionContext) _FHIRMedication(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedication")
		case "ID":
			out.Values[i] = ec._FHIRMedication_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRMedication_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRMedication_Identifier(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRMedication_Code(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRMedication_Status(ctx, field, obj)
		case "Manufacturer":
			out.Values[i] = ec._FHIRMedication_Manufacturer(ctx, field, obj)
		case "Form":
			out.Values[i] = ec._FHIRMedication_Form(ctx, field, obj)
		case "Amount":
			out.Values[i] = ec._FHIRMedication_Amount(ctx, field, obj)
		case "Ingredient":
			out.Values[i] = ec._FHIRMedication_Ingredient(ctx, field, obj)
		case "Batch":
			out.Values[i] = ec._FHIRMedication_Batch(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRelayConnectionImplementors = []string{"FHIRMedicationRelayConnection"}

func (ec *executionContext) _FHIRMedicationRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRMedicationRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRMedicationRelayConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRelayEdgeImplementors = []string{"FHIRMedicationRelayEdge"}

func (ec *executionContext) _FHIRMedicationRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRMedicationRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRMedicationRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRelayPayloadImplementors = []string{"FHIRMedicationRelayPayload"}

func (ec *executionContext) _FHIRMedicationRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRMedicationRelayPayload_resource(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRequestImplementors = []string{"FHIRMedicationRequest"}

func (ec *executionContext) _FHIRMedicationRequest(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRequest")
		case "ID":
			out.Values[i] = ec._FHIRMedicationRequest_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRMedicationRequest_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRMedicationRequest_Identifier(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRMedicationRequest_Status(ctx, field, obj)
		case "StatusReason":
			out.Values[i] = ec._FHIRMedicationRequest_StatusReason(ctx, field, obj)
		case "Intent":
			out.Values[i] = ec._FHIRMedicationRequest_Intent(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._FHIRMedicationRequest_Category(ctx, field, obj)
		case "Priority":
			out.Values[i] = ec._FHIRMedicationRequest_Priority(ctx, field, obj)
		case "DoNotPerform":
			out.Values[i] = ec._FHIRMedicationRequest_DoNotPerform(ctx, field, obj)
		case "ReportedBoolean":
			out.Values[i] = ec._FHIRMedicationRequest_ReportedBoolean(ctx, field, obj)
		case "ReportedReference":
			out.Values[i] = ec._FHIRMedicationRequest_ReportedReference(ctx, field, obj)
		case "MedicationCodeableConcept":
			out.Values[i] = ec._FHIRMedicationRequest_MedicationCodeableConcept(ctx, field, obj)
		case "MedicationReference":
			out.Values[i] = ec._FHIRMedicationRequest_MedicationReference(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._FHIRMedicationRequest_Subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Encounter":
			out.Values[i] = ec._FHIRMedicationRequest_Encounter(ctx, field, obj)
		case "SupportingInformation":
			out.Values[i] = ec._FHIRMedicationRequest_SupportingInformation(ctx, field, obj)
		case "AuthoredOn":
			out.Values[i] = ec._FHIRMedicationRequest_AuthoredOn(ctx, field, obj)
		case "Requester":
			out.Values[i] = ec._FHIRMedicationRequest_Requester(ctx, field, obj)
		case "Performer":
			out.Values[i] = ec._FHIRMedicationRequest_Performer(ctx, field, obj)
		case "PerformerType":
			out.Values[i] = ec._FHIRMedicationRequest_PerformerType(ctx, field, obj)
		case "Recorder":
			out.Values[i] = ec._FHIRMedicationRequest_Recorder(ctx, field, obj)
		case "ReasonCode":
			out.Values[i] = ec._FHIRMedicationRequest_ReasonCode(ctx, field, obj)
		case "ReasonReference":
			out.Values[i] = ec._FHIRMedicationRequest_ReasonReference(ctx, field, obj)
		case "InstantiatesCanonical":
			out.Values[i] = ec._FHIRMedicationRequest_InstantiatesCanonical(ctx, field, obj)
		case "InstantiatesURI":
			out.Values[i] = ec._FHIRMedicationRequest_InstantiatesURI(ctx, field, obj)
		case "BasedOn":
			out.Values[i] = ec._FHIRMedicationRequest_BasedOn(ctx, field, obj)
		case "GroupIdentifier":
			out.Values[i] = ec._FHIRMedicationRequest_GroupIdentifier(ctx, field, obj)
		case "CourseOfTherapyType":
			out.Values[i] = ec._FHIRMedicationRequest_CourseOfTherapyType(ctx, field, obj)
		case "Insurance":
			out.Values[i] = ec._FHIRMedicationRequest_Insurance(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRMedicationRequest_Note(ctx, field, obj)
		case "DosageInstruction":
			out.Values[i] = ec._FHIRMedicationRequest_DosageInstruction(ctx, field, obj)
		case "DispenseRequest":
			out.Values[i] = ec._FHIRMedicationRequest_DispenseRequest(ctx, field, obj)
		case "Substitution":
			out.Values[i] = ec._FHIRMedicationRequest_Substitution(ctx, field, obj)
		case "PriorPrescription":
			out.Values[i] = ec._FHIRMedicationRequest_PriorPrescription(ctx, field, obj)
		case "DetectedIssue":
			out.Values[i] = ec._FHIRMedicationRequest_DetectedIssue(ctx, field, obj)
		case "EventHistory":
			out.Values[i] = ec._FHIRMedicationRequest_EventHistory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRequestRelayConnectionImplementors = []string{"FHIRMedicationRequestRelayConnection"}

func (ec *executionContext) _FHIRMedicationRequestRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRequestRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRequestRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRequestRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRMedicationRequestRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRMedicationRequestRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRequestRelayEdgeImplementors = []string{"FHIRMedicationRequestRelayEdge"}

func (ec *executionContext) _FHIRMedicationRequestRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRequestRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRequestRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRequestRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRMedicationRequestRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRMedicationRequestRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationRequestRelayPayloadImplementors = []string{"FHIRMedicationRequestRelayPayload"}

func (ec *executionContext) _FHIRMedicationRequestRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationRequestRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationRequestRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationRequestRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRMedicationRequestRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationStatementImplementors = []string{"FHIRMedicationStatement"}

func (ec *executionContext) _FHIRMedicationStatement(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationStatement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationStatementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationStatement")
		case "ID":
			out.Values[i] = ec._FHIRMedicationStatement_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRMedicationStatement_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRMedicationStatement_Identifier(ctx, field, obj)
		case "BasedOn":
			out.Values[i] = ec._FHIRMedicationStatement_BasedOn(ctx, field, obj)
		case "PartOf":
			out.Values[i] = ec._FHIRMedicationStatement_PartOf(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRMedicationStatement_Status(ctx, field, obj)
		case "StatusReason":
			out.Values[i] = ec._FHIRMedicationStatement_StatusReason(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._FHIRMedicationStatement_Category(ctx, field, obj)
		case "MedicationCodeableConcept":
			out.Values[i] = ec._FHIRMedicationStatement_MedicationCodeableConcept(ctx, field, obj)
		case "MedicationReference":
			out.Values[i] = ec._FHIRMedicationStatement_MedicationReference(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._FHIRMedicationStatement_Subject(ctx, field, obj)
		case "Context":
			out.Values[i] = ec._FHIRMedicationStatement_Context(ctx, field, obj)
		case "EffectiveDateTime":
			out.Values[i] = ec._FHIRMedicationStatement_EffectiveDateTime(ctx, field, obj)
		case "EffectivePeriod":
			out.Values[i] = ec._FHIRMedicationStatement_EffectivePeriod(ctx, field, obj)
		case "DateAsserted":
			out.Values[i] = ec._FHIRMedicationStatement_DateAsserted(ctx, field, obj)
		case "InformationSource":
			out.Values[i] = ec._FHIRMedicationStatement_InformationSource(ctx, field, obj)
		case "DerivedFrom":
			out.Values[i] = ec._FHIRMedicationStatement_DerivedFrom(ctx, field, obj)
		case "ReasonCode":
			out.Values[i] = ec._FHIRMedicationStatement_ReasonCode(ctx, field, obj)
		case "ReasonReference":
			out.Values[i] = ec._FHIRMedicationStatement_ReasonReference(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRMedicationStatement_Note(ctx, field, obj)
		case "Dosage":
			out.Values[i] = ec._FHIRMedicationStatement_Dosage(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationStatementRelayConnectionImplementors = []string{"FHIRMedicationStatementRelayConnection"}

func (ec *executionContext) _FHIRMedicationStatementRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationStatementRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationStatementRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationStatementRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRMedicationStatementRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRMedicationStatementRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationStatementRelayEdgeImplementors = []string{"FHIRMedicationStatementRelayEdge"}

func (ec *executionContext) _FHIRMedicationStatementRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationStatementRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationStatementRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationStatementRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRMedicationStatementRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRMedicationStatementRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationStatementRelayPayloadImplementors = []string{"FHIRMedicationStatementRelayPayload"}

func (ec *executionContext) _FHIRMedicationStatementRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationStatementRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationStatementRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationStatementRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRMedicationStatementRelayPayload_resource(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationrequestDispenserequestImplementors = []string{"FHIRMedicationrequestDispenserequest"}

func (ec *executionContext) _FHIRMedicationrequestDispenserequest(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationrequestDispenserequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationrequestDispenserequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationrequestDispenserequest")
		case "ID":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_ID(ctx, field, obj)
		case "InitialFill":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_InitialFill(ctx, field, obj)
		case "DispenseInterval":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_DispenseInterval(ctx, field, obj)
		case "ValidityPeriod":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_ValidityPeriod(ctx, field, obj)
		case "NumberOfRepeatsAllowed":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_NumberOfRepeatsAllowed(ctx, field, obj)
		case "Quantity":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_Quantity(ctx, field, obj)
		case "ExpectedSupplyDuration":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_ExpectedSupplyDuration(ctx, field, obj)
		case "Performer":
			out.Values[i] = ec._FHIRMedicationrequestDispenserequest_Performer(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationrequestInitialfillImplementors = []string{"FHIRMedicationrequestInitialfill"}

func (ec *executionContext) _FHIRMedicationrequestInitialfill(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationrequestInitialfill) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationrequestInitialfillImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationrequestInitialfill")
		case "ID":
			out.Values[i] = ec._FHIRMedicationrequestInitialfill_ID(ctx, field, obj)
		case "Quantity":
			out.Values[i] = ec._FHIRMedicationrequestInitialfill_Quantity(ctx, field, obj)
		case "Duration":
			out.Values[i] = ec._FHIRMedicationrequestInitialfill_Duration(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRMedicationrequestSubstitutionImplementors = []string{"FHIRMedicationrequestSubstitution"}

func (ec *executionContext) _FHIRMedicationrequestSubstitution(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRMedicationrequestSubstitution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRMedicationrequestSubstitutionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRMedicationrequestSubstitution")
		case "ID":
			out.Values[i] = ec._FHIRMedicationrequestSubstitution_ID(ctx, field, obj)
		case "AllowedBoolean":
			out.Values[i] = ec._FHIRMedicationrequestSubstitution_AllowedBoolean(ctx, field, obj)
		case "AllowedCodeableConcept":
			out.Values[i] = ec._FHIRMedicationrequestSubstitution_AllowedCodeableConcept(ctx, field, obj)
		case "Reason":
			out.Values[i] = ec._FHIRMedicationrequestSubstitution_Reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRNarrativeImplementors = []string{"FHIRNarrative"}

func (ec *executionContext) _FHIRNarrative(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRNarrative) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRNarrativeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRNarrative")
		case "ID":
			out.Values[i] = ec._FHIRNarrative_ID(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRNarrative_Status(ctx, field, obj)
		case "Div":
			out.Values[i] = ec._FHIRNarrative_Div(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRObservationImplementors = []string{"FHIRObservation"}

func (ec *executionContext) _FHIRObservation(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRObservation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRObservationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRObservation")
		case "ID":
			out.Values[i] = ec._FHIRObservation_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRObservation_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRObservation_Identifier(ctx, field, obj)
		case "BasedOn":
			out.Values[i] = ec._FHIRObservation_BasedOn(ctx, field, obj)
		case "PartOf":
			out.Values[i] = ec._FHIRObservation_PartOf(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRObservation_Status(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._FHIRObservation_Category(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRObservation_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Subject":
			out.Values[i] = ec._FHIRObservation_Subject(ctx, field, obj)
		case "Focus":
			out.Values[i] = ec._FHIRObservation_Focus(ctx, field, obj)
		case "Encounter":
			out.Values[i] = ec._FHIRObservation_Encounter(ctx, field, obj)
		case "EffectiveDateTime":
			out.Values[i] = ec._FHIRObservation_EffectiveDateTime(ctx, field, obj)
		case "EffectivePeriod":
			out.Values[i] = ec._FHIRObservation_EffectivePeriod(ctx, field, obj)
		case "EffectiveTiming":
			out.Values[i] = ec._FHIRObservation_EffectiveTiming(ctx, field, obj)
		case "EffectiveInstant":
			out.Values[i] = ec._FHIRObservation_EffectiveInstant(ctx, field, obj)
		case "Issued":
			out.Values[i] = ec._FHIRObservation_Issued(ctx, field, obj)
		case "Performer":
			out.Values[i] = ec._FHIRObservation_Performer(ctx, field, obj)
		case "ValueQuantity":
			out.Values[i] = ec._FHIRObservation_ValueQuantity(ctx, field, obj)
		case "ValueCodeableConcept":
			out.Values[i] = ec._FHIRObservation_ValueCodeableConcept(ctx, field, obj)
		case "ValueString":
			out.Values[i] = ec._FHIRObservation_ValueString(ctx, field, obj)
		case "ValueBoolean":
			out.Values[i] = ec._FHIRObservation_ValueBoolean(ctx, field, obj)
		case "ValueInteger":
			out.Values[i] = ec._FHIRObservation_ValueInteger(ctx, field, obj)
		case "ValueRange":
			out.Values[i] = ec._FHIRObservation_ValueRange(ctx, field, obj)
		case "ValueRatio":
			out.Values[i] = ec._FHIRObservation_ValueRatio(ctx, field, obj)
		case "ValueSampledData":
			out.Values[i] = ec._FHIRObservation_ValueSampledData(ctx, field, obj)
		case "ValueTime":
			out.Values[i] = ec._FHIRObservation_ValueTime(ctx, field, obj)
		case "ValueDateTime":
			out.Values[i] = ec._FHIRObservation_ValueDateTime(ctx, field, obj)
		case "ValuePeriod":
			out.Values[i] = ec._FHIRObservation_ValuePeriod(ctx, field, obj)
		case "DataAbsentReason":
			out.Values[i] = ec._FHIRObservation_DataAbsentReason(ctx, field, obj)
		case "Interpretation":
			out.Values[i] = ec._FHIRObservation_Interpretation(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRObservation_Note(ctx, field, obj)
		case "BodySite":
			out.Values[i] = ec._FHIRObservation_BodySite(ctx, field, obj)
		case "Method":
			out.Values[i] = ec._FHIRObservation_Method(ctx, field, obj)
		case "Specimen":
			out.Values[i] = ec._FHIRObservation_Specimen(ctx, field, obj)
		case "Device":
			out.Values[i] = ec._FHIRObservation_Device(ctx, field, obj)
		case "ReferenceRange":
			out.Values[i] = ec._FHIRObservation_ReferenceRange(ctx, field, obj)
		case "HasMember":
			out.Values[i] = ec._FHIRObservation_HasMember(ctx, field, obj)
		case "DerivedFrom":
			out.Values[i] = ec._FHIRObservation_DerivedFrom(ctx, field, obj)
		case "Component":
			out.Values[i] = ec._FHIRObservation_Component(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRObservationComponentImplementors = []string{"FHIRObservationComponent"}

func (ec *executionContext) _FHIRObservationComponent(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRObservationComponent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRObservationComponentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRObservationComponent")
		case "ID":
			out.Values[i] = ec._FHIRObservationComponent_ID(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRObservationComponent_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ValueQuantity":
			out.Values[i] = ec._FHIRObservationComponent_ValueQuantity(ctx, field, obj)
		case "ValueCodeableConcept":
			out.Values[i] = ec._FHIRObservationComponent_ValueCodeableConcept(ctx, field, obj)
		case "ValueString":
			out.Values[i] = ec._FHIRObservationComponent_ValueString(ctx, field, obj)
		case "ValueBoolean":
			out.Values[i] = ec._FHIRObservationComponent_ValueBoolean(ctx, field, obj)
		case "ValueInteger":
			out.Values[i] = ec._FHIRObservationComponent_ValueInteger(ctx, field, obj)
		case "ValueRange":
			out.Values[i] = ec._FHIRObservationComponent_ValueRange(ctx, field, obj)
		case "ValueRatio":
			out.Values[i] = ec._FHIRObservationComponent_ValueRatio(ctx, field, obj)
		case "ValueSampledData":
			out.Values[i] = ec._FHIRObservationComponent_ValueSampledData(ctx, field, obj)
		case "ValueTime":
			out.Values[i] = ec._FHIRObservationComponent_ValueTime(ctx, field, obj)
		case "ValueDateTime":
			out.Values[i] = ec._FHIRObservationComponent_ValueDateTime(ctx, field, obj)
		case "ValuePeriod":
			out.Values[i] = ec._FHIRObservationComponent_ValuePeriod(ctx, field, obj)
		case "DataAbsentReason":
			out.Values[i] = ec._FHIRObservationComponent_DataAbsentReason(ctx, field, obj)
		case "Interpretation":
			out.Values[i] = ec._FHIRObservationComponent_Interpretation(ctx, field, obj)
		case "ReferenceRange":
			out.Values[i] = ec._FHIRObservationComponent_ReferenceRange(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRObservationReferencerangeImplementors = []string{"FHIRObservationReferencerange"}

func (ec *executionContext) _FHIRObservationReferencerange(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRObservationReferencerange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRObservationReferencerangeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRObservationReferencerange")
		case "ID":
			out.Values[i] = ec._FHIRObservationReferencerange_ID(ctx, field, obj)
		case "Low":
			out.Values[i] = ec._FHIRObservationReferencerange_Low(ctx, field, obj)
		case "High":
			out.Values[i] = ec._FHIRObservationReferencerange_High(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIRObservationReferencerange_Type(ctx, field, obj)
		case "AppliesTo":
			out.Values[i] = ec._FHIRObservationReferencerange_AppliesTo(ctx, field, obj)
		case "Age":
			out.Values[i] = ec._FHIRObservationReferencerange_Age(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRObservationReferencerange_Text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRObservationRelayConnectionImplementors = []string{"FHIRObservationRelayConnection"}

func (ec *executionContext) _FHIRObservationRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRObservationRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRObservationRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRObservationRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRObservationRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRObservationRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRObservationRelayEdgeImplementors = []string{"FHIRObservationRelayEdge"}

func (ec *executionContext) _FHIRObservationRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRObservationRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRObservationRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRObservationRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRObservationRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRObservationRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRObservationRelayPayloadImplementors = []string{"FHIRObservationRelayPayload"}

func (ec *executionContext) _FHIRObservationRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRObservationRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRObservationRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRObservationRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRObservationRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationImplementors = []string{"FHIROrganization"}

func (ec *executionContext) _FHIROrganization(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganization")
		case "ID":
			out.Values[i] = ec._FHIROrganization_ID(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIROrganization_Identifier(ctx, field, obj)
		case "Active":
			out.Values[i] = ec._FHIROrganization_Active(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIROrganization_Type(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._FHIROrganization_Name(ctx, field, obj)
		case "Alias":
			out.Values[i] = ec._FHIROrganization_Alias(ctx, field, obj)
		case "Telecom":
			out.Values[i] = ec._FHIROrganization_Telecom(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._FHIROrganization_Address(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationRelayConnectionImplementors = []string{"FHIROrganizationRelayConnection"}

func (ec *executionContext) _FHIROrganizationRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganizationRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganizationRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIROrganizationRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIROrganizationRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationRelayEdgeImplementors = []string{"FHIROrganizationRelayEdge"}

func (ec *executionContext) _FHIROrganizationRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganizationRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganizationRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIROrganizationRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIROrganizationRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIROrganizationRelayPayloadImplementors = []string{"FHIROrganizationRelayPayload"}

func (ec *executionContext) _FHIROrganizationRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIROrganizationRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIROrganizationRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIROrganizationRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIROrganizationRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientImplementors = []string{"FHIRPatient"}

func (ec *executionContext) _FHIRPatient(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatient")
		case "ID":
			out.Values[i] = ec._FHIRPatient_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRPatient_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRPatient_Identifier(ctx, field, obj)
		case "Active":
			out.Values[i] = ec._FHIRPatient_Active(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._FHIRPatient_Name(ctx, field, obj)
		case "Telecom":
			out.Values[i] = ec._FHIRPatient_Telecom(ctx, field, obj)
		case "Gender":
			out.Values[i] = ec._FHIRPatient_Gender(ctx, field, obj)
		case "BirthDate":
			out.Values[i] = ec._FHIRPatient_BirthDate(ctx, field, obj)
		case "DeceasedBoolean":
			out.Values[i] = ec._FHIRPatient_DeceasedBoolean(ctx, field, obj)
		case "DeceasedDateTime":
			out.Values[i] = ec._FHIRPatient_DeceasedDateTime(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._FHIRPatient_Address(ctx, field, obj)
		case "MaritalStatus":
			out.Values[i] = ec._FHIRPatient_MaritalStatus(ctx, field, obj)
		case "MultipleBirthBoolean":
			out.Values[i] = ec._FHIRPatient_MultipleBirthBoolean(ctx, field, obj)
		case "MultipleBirthInteger":
			out.Values[i] = ec._FHIRPatient_MultipleBirthInteger(ctx, field, obj)
		case "Photo":
			out.Values[i] = ec._FHIRPatient_Photo(ctx, field, obj)
		case "Contact":
			out.Values[i] = ec._FHIRPatient_Contact(ctx, field, obj)
		case "Communication":
			out.Values[i] = ec._FHIRPatient_Communication(ctx, field, obj)
		case "GeneralPractitioner":
			out.Values[i] = ec._FHIRPatient_GeneralPractitioner(ctx, field, obj)
		case "ManagingOrganization":
			out.Values[i] = ec._FHIRPatient_ManagingOrganization(ctx, field, obj)
		case "Link":
			out.Values[i] = ec._FHIRPatient_Link(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientCommunicationImplementors = []string{"FHIRPatientCommunication"}

func (ec *executionContext) _FHIRPatientCommunication(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatientCommunication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientCommunicationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatientCommunication")
		case "ID":
			out.Values[i] = ec._FHIRPatientCommunication_ID(ctx, field, obj)
		case "Language":
			out.Values[i] = ec._FHIRPatientCommunication_Language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Preferred":
			out.Values[i] = ec._FHIRPatientCommunication_Preferred(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientContactImplementors = []string{"FHIRPatientContact"}

func (ec *executionContext) _FHIRPatientContact(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatientContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientContactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatientContact")
		case "ID":
			out.Values[i] = ec._FHIRPatientContact_ID(ctx, field, obj)
		case "Relationship":
			out.Values[i] = ec._FHIRPatientContact_Relationship(ctx, field, obj)
		case "Name":
			out.Values[i] = ec._FHIRPatientContact_Name(ctx, field, obj)
		case "Telecom":
			out.Values[i] = ec._FHIRPatientContact_Telecom(ctx, field, obj)
		case "Address":
			out.Values[i] = ec._FHIRPatientContact_Address(ctx, field, obj)
		case "Gender":
			out.Values[i] = ec._FHIRPatientContact_Gender(ctx, field, obj)
		case "Organization":
			out.Values[i] = ec._FHIRPatientContact_Organization(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIRPatientContact_Period(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientLinkImplementors = []string{"FHIRPatientLink"}

func (ec *executionContext) _FHIRPatientLink(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatientLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientLinkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatientLink")
		case "ID":
			out.Values[i] = ec._FHIRPatientLink_ID(ctx, field, obj)
		case "Other":
			out.Values[i] = ec._FHIRPatientLink_Other(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._FHIRPatientLink_Type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientRelayConnectionImplementors = []string{"FHIRPatientRelayConnection"}

func (ec *executionContext) _FHIRPatientRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatientRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatientRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRPatientRelayConnection_edges(ctx, field, obj)
		case "hasOpenEpisodes":
			out.Values[i] = ec._FHIRPatientRelayConnection_hasOpenEpisodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":
			out.Values[i] = ec._FHIRPatientRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientRelayEdgeImplementors = []string{"FHIRPatientRelayEdge"}

func (ec *executionContext) _FHIRPatientRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatientRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatientRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRPatientRelayEdge_cursor(ctx, field, obj)
		case "hasOpenEpisodes":
			out.Values[i] = ec._FHIRPatientRelayEdge_hasOpenEpisodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._FHIRPatientRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPatientRelayPayloadImplementors = []string{"FHIRPatientRelayPayload"}

func (ec *executionContext) _FHIRPatientRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPatientRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPatientRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPatientRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRPatientRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOpenEpisodes":
			out.Values[i] = ec._FHIRPatientRelayPayload_hasOpenEpisodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRPeriodImplementors = []string{"FHIRPeriod"}

func (ec *executionContext) _FHIRPeriod(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRPeriod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRPeriodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRPeriod")
		case "ID":
			out.Values[i] = ec._FHIRPeriod_ID(ctx, field, obj)
		case "Start":
			out.Values[i] = ec._FHIRPeriod_Start(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "End":
			out.Values[i] = ec._FHIRPeriod_End(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRQuantityImplementors = []string{"FHIRQuantity"}

func (ec *executionContext) _FHIRQuantity(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRQuantity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRQuantityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRQuantity")
		case "ID":
			out.Values[i] = ec._FHIRQuantity_ID(ctx, field, obj)
		case "Value":
			out.Values[i] = ec._FHIRQuantity_Value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Comparator":
			out.Values[i] = ec._FHIRQuantity_Comparator(ctx, field, obj)
		case "Unit":
			out.Values[i] = ec._FHIRQuantity_Unit(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "System":
			out.Values[i] = ec._FHIRQuantity_System(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Code":
			out.Values[i] = ec._FHIRQuantity_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRRangeImplementors = []string{"FHIRRange"}

func (ec *executionContext) _FHIRRange(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRRange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRRangeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRRange")
		case "ID":
			out.Values[i] = ec._FHIRRange_ID(ctx, field, obj)
		case "Low":
			out.Values[i] = ec._FHIRRange_Low(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "High":
			out.Values[i] = ec._FHIRRange_High(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRRatioImplementors = []string{"FHIRRatio"}

func (ec *executionContext) _FHIRRatio(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRRatio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRRatioImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRRatio")
		case "ID":
			out.Values[i] = ec._FHIRRatio_ID(ctx, field, obj)
		case "Numerator":
			out.Values[i] = ec._FHIRRatio_Numerator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Denominator":
			out.Values[i] = ec._FHIRRatio_Denominator(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRReferenceImplementors = []string{"FHIRReference"}

func (ec *executionContext) _FHIRReference(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRReference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRReferenceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRReference")
		case "ID":
			out.Values[i] = ec._FHIRReference_ID(ctx, field, obj)
		case "Reference":
			out.Values[i] = ec._FHIRReference_Reference(ctx, field, obj)
		case "Type":
			out.Values[i] = ec._FHIRReference_Type(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRReference_Identifier(ctx, field, obj)
		case "Display":
			out.Values[i] = ec._FHIRReference_Display(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRSampledDataImplementors = []string{"FHIRSampledData"}

func (ec *executionContext) _FHIRSampledData(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRSampledData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRSampledDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRSampledData")
		case "ID":
			out.Values[i] = ec._FHIRSampledData_ID(ctx, field, obj)
		case "Origin":
			out.Values[i] = ec._FHIRSampledData_Origin(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Period":
			out.Values[i] = ec._FHIRSampledData_Period(ctx, field, obj)
		case "Factor":
			out.Values[i] = ec._FHIRSampledData_Factor(ctx, field, obj)
		case "LowerLimit":
			out.Values[i] = ec._FHIRSampledData_LowerLimit(ctx, field, obj)
		case "UpperLimit":
			out.Values[i] = ec._FHIRSampledData_UpperLimit(ctx, field, obj)
		case "Dimensions":
			out.Values[i] = ec._FHIRSampledData_Dimensions(ctx, field, obj)
		case "Data":
			out.Values[i] = ec._FHIRSampledData_Data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRServiceRequestImplementors = []string{"FHIRServiceRequest"}

func (ec *executionContext) _FHIRServiceRequest(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRServiceRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRServiceRequestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRServiceRequest")
		case "ID":
			out.Values[i] = ec._FHIRServiceRequest_ID(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._FHIRServiceRequest_Text(ctx, field, obj)
		case "Identifier":
			out.Values[i] = ec._FHIRServiceRequest_Identifier(ctx, field, obj)
		case "InstantiatesCanonical":
			out.Values[i] = ec._FHIRServiceRequest_InstantiatesCanonical(ctx, field, obj)
		case "InstantiatesURI":
			out.Values[i] = ec._FHIRServiceRequest_InstantiatesURI(ctx, field, obj)
		case "BasedOn":
			out.Values[i] = ec._FHIRServiceRequest_BasedOn(ctx, field, obj)
		case "Replaces":
			out.Values[i] = ec._FHIRServiceRequest_Replaces(ctx, field, obj)
		case "Requisition":
			out.Values[i] = ec._FHIRServiceRequest_Requisition(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._FHIRServiceRequest_Status(ctx, field, obj)
		case "Intent":
			out.Values[i] = ec._FHIRServiceRequest_Intent(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._FHIRServiceRequest_Category(ctx, field, obj)
		case "Priority":
			out.Values[i] = ec._FHIRServiceRequest_Priority(ctx, field, obj)
		case "DoNotPerform":
			out.Values[i] = ec._FHIRServiceRequest_DoNotPerform(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRServiceRequest_Code(ctx, field, obj)
		case "OrderDetail":
			out.Values[i] = ec._FHIRServiceRequest_OrderDetail(ctx, field, obj)
		case "QuantityQuantity":
			out.Values[i] = ec._FHIRServiceRequest_QuantityQuantity(ctx, field, obj)
		case "QuantityRatio":
			out.Values[i] = ec._FHIRServiceRequest_QuantityRatio(ctx, field, obj)
		case "QuantityRange":
			out.Values[i] = ec._FHIRServiceRequest_QuantityRange(ctx, field, obj)
		case "Subject":
			out.Values[i] = ec._FHIRServiceRequest_Subject(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Encounter":
			out.Values[i] = ec._FHIRServiceRequest_Encounter(ctx, field, obj)
		case "OccurrenceDateTime":
			out.Values[i] = ec._FHIRServiceRequest_OccurrenceDateTime(ctx, field, obj)
		case "OccurrencePeriod":
			out.Values[i] = ec._FHIRServiceRequest_OccurrencePeriod(ctx, field, obj)
		case "OccurrenceTiming":
			out.Values[i] = ec._FHIRServiceRequest_OccurrenceTiming(ctx, field, obj)
		case "AsNeededBoolean":
			out.Values[i] = ec._FHIRServiceRequest_AsNeededBoolean(ctx, field, obj)
		case "AsNeededCodeableConcept":
			out.Values[i] = ec._FHIRServiceRequest_AsNeededCodeableConcept(ctx, field, obj)
		case "AuthoredOn":
			out.Values[i] = ec._FHIRServiceRequest_AuthoredOn(ctx, field, obj)
		case "Requester":
			out.Values[i] = ec._FHIRServiceRequest_Requester(ctx, field, obj)
		case "PerformerType":
			out.Values[i] = ec._FHIRServiceRequest_PerformerType(ctx, field, obj)
		case "Performer":
			out.Values[i] = ec._FHIRServiceRequest_Performer(ctx, field, obj)
		case "LocationCode":
			out.Values[i] = ec._FHIRServiceRequest_LocationCode(ctx, field, obj)
		case "LocationReference":
			out.Values[i] = ec._FHIRServiceRequest_LocationReference(ctx, field, obj)
		case "ReasonCode":
			out.Values[i] = ec._FHIRServiceRequest_ReasonCode(ctx, field, obj)
		case "ReasonReference":
			out.Values[i] = ec._FHIRServiceRequest_ReasonReference(ctx, field, obj)
		case "Insurance":
			out.Values[i] = ec._FHIRServiceRequest_Insurance(ctx, field, obj)
		case "SupportingInfo":
			out.Values[i] = ec._FHIRServiceRequest_SupportingInfo(ctx, field, obj)
		case "Specimen":
			out.Values[i] = ec._FHIRServiceRequest_Specimen(ctx, field, obj)
		case "BodySite":
			out.Values[i] = ec._FHIRServiceRequest_BodySite(ctx, field, obj)
		case "Note":
			out.Values[i] = ec._FHIRServiceRequest_Note(ctx, field, obj)
		case "PatientInstruction":
			out.Values[i] = ec._FHIRServiceRequest_PatientInstruction(ctx, field, obj)
		case "RelevantHistory":
			out.Values[i] = ec._FHIRServiceRequest_RelevantHistory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRServiceRequestRelayConnectionImplementors = []string{"FHIRServiceRequestRelayConnection"}

func (ec *executionContext) _FHIRServiceRequestRelayConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRServiceRequestRelayConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRServiceRequestRelayConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRServiceRequestRelayConnection")
		case "edges":
			out.Values[i] = ec._FHIRServiceRequestRelayConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._FHIRServiceRequestRelayConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRServiceRequestRelayEdgeImplementors = []string{"FHIRServiceRequestRelayEdge"}

func (ec *executionContext) _FHIRServiceRequestRelayEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRServiceRequestRelayEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRServiceRequestRelayEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRServiceRequestRelayEdge")
		case "cursor":
			out.Values[i] = ec._FHIRServiceRequestRelayEdge_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._FHIRServiceRequestRelayEdge_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRServiceRequestRelayPayloadImplementors = []string{"FHIRServiceRequestRelayPayload"}

func (ec *executionContext) _FHIRServiceRequestRelayPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRServiceRequestRelayPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRServiceRequestRelayPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRServiceRequestRelayPayload")
		case "resource":
			out.Values[i] = ec._FHIRServiceRequestRelayPayload_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRTimingImplementors = []string{"FHIRTiming"}

func (ec *executionContext) _FHIRTiming(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRTiming) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRTimingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRTiming")
		case "ID":
			out.Values[i] = ec._FHIRTiming_ID(ctx, field, obj)
		case "Event":
			out.Values[i] = ec._FHIRTiming_Event(ctx, field, obj)
		case "Repeat":
			out.Values[i] = ec._FHIRTiming_Repeat(ctx, field, obj)
		case "Code":
			out.Values[i] = ec._FHIRTiming_Code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fHIRTimingRepeatImplementors = []string{"FHIRTimingRepeat"}

func (ec *executionContext) _FHIRTimingRepeat(ctx context.Context, sel ast.SelectionSet, obj *domain.FHIRTimingRepeat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fHIRTimingRepeatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FHIRTimingRepeat")
		case "ID":
			out.Values[i] = ec._FHIRTimingRepeat_ID(ctx, field, obj)
		case "BoundsDuration":
			out.Values[i] = ec._FHIRTimingRepeat_BoundsDuration(ctx, field, obj)
		case "BoundsRange":
			out.Values[i] = ec._FHIRTimingRepeat_BoundsRange(ctx, field, obj)
		case "BoundsPeriod":
			out.Values[i] = ec._FHIRTimingRepeat_BoundsPeriod(ctx, field, obj)
		case "Count":
			out.Values[i] = ec._FHIRTimingRepeat_Count(ctx, field, obj)
		case "CountMax":
			out.Values[i] = ec._FHIRTimingRepeat_CountMax(ctx, field, obj)
		case "Duration":
			out.Values[i] = ec._FHIRTimingRepeat_Duration(ctx, field, obj)
		case "DurationMax":
			out.Values[i] = ec._FHIRTimingRepeat_DurationMax(ctx, field, obj)
		case "DurationUnit":
			out.Values[i] = ec._FHIRTimingRepeat_DurationUnit(ctx, field, obj)
		case "Frequency":
			out.Values[i] = ec._FHIRTimingRepeat_Frequency(ctx, field, obj)
		case "FrequencyMax":
			out.Values[i] = ec._FHIRTimingRepeat_FrequencyMax(ctx, field, obj)
		case "Period":
			out.Values[i] = ec._FHIRTimingRepeat_Period(ctx, field, obj)
		case "PeriodMax":
			out.Values[i] = ec._FHIRTimingRepeat_PeriodMax(ctx, field, obj)
		case "PeriodUnit":
			out.Values[i] = ec._FHIRTimingRepeat_PeriodUnit(ctx, field, obj)
		case "DayOfWeek":
			out.Values[i] = ec._FHIRTimingRepeat_DayOfWeek(ctx, field, obj)
		case "TimeOfDay":
			out.Values[i] = ec._FHIRTimingRepeat_TimeOfDay(ctx, field, obj)
		case "When":
			out.Values[i] = ec._FHIRTimingRepeat_When(ctx, field, obj)
		case "Offset":
			out.Values[i] = ec._FHIRTimingRepeat_Offset(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicalDataImplementors = []string{"MedicalData"}

func (ec *executionContext) _MedicalData(ctx context.Context, sel ast.SelectionSet, obj *domain.MedicalData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicalDataImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicalData")
		case "regimen":
			out.Values[i] = ec._MedicalData_regimen(ctx, field, obj)
		case "allergies":
			out.Values[i] = ec._MedicalData_allergies(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._MedicalData_weight(ctx, field, obj)
		case "bmi":
			out.Values[i] = ec._MedicalData_bmi(ctx, field, obj)
		case "viralLoad":
			out.Values[i] = ec._MedicalData_viralLoad(ctx, field, obj)
		case "cd4Count":
			out.Values[i] = ec._MedicalData_cd4Count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicationBatchImplementors = []string{"MedicationBatch"}

func (ec *executionContext) _MedicationBatch(ctx context.Context, sel ast.SelectionSet, obj *domain.MedicationBatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicationBatchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicationBatch")
		case "LotNumber":
			out.Values[i] = ec._MedicationBatch_LotNumber(ctx, field, obj)
		case "ExpirationDate":
			out.Values[i] = ec._MedicationBatch_ExpirationDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var medicationIngredientImplementors = []string{"MedicationIngredient"}

func (ec *executionContext) _MedicationIngredient(ctx context.Context, sel ast.SelectionSet, obj *domain.MedicationIngredient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicationIngredientImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicationIngredient")
		case "ItemCodelabConcept":
			out.Values[i] = ec._MedicationIngredient_ItemCodelabConcept(ctx, field, obj)
		case "ItemReference":
			out.Values[i] = ec._MedicationIngredient_ItemReference(ctx, field, obj)
		case "IsActive":
			out.Values[i] = ec._MedicationIngredient_IsActive(ctx, field, obj)
		case "Strength":
			out.Values[i] = ec._MedicationIngredient_Strength(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "startEpisodeByOTP":
			out.Values[i] = ec._Mutation_startEpisodeByOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startEpisodeByBreakGlass":
			out.Values[i] = ec._Mutation_startEpisodeByBreakGlass(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upgradeEpisode":
			out.Values[i] = ec._Mutation_upgradeEpisode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endEpisode":
			out.Values[i] = ec._Mutation_endEpisode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startEncounter":
			out.Values[i] = ec._Mutation_startEncounter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endEncounter":
			out.Values[i] = ec._Mutation_endEncounter(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerPatient":
			out.Values[i] = ec._Mutation_registerPatient(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registerUser":
			out.Values[i] = ec._Mutation_registerUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePatient":
			out.Values[i] = ec._Mutation_updatePatient(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addNextOfKin":
			out.Values[i] = ec._Mutation_addNextOfKin(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addNHIF":
			out.Values[i] = ec._Mutation_addNHIF(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUpdatePatientExtraInformation":
			out.Values[i] = ec._Mutation_createUpdatePatientExtraInformation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFHIRMedicationRequest":
			out.Values[i] = ec._Mutation_createFHIRMedicationRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFHIRMedicationRequest":
			out.Values[i] = ec._Mutation_updateFHIRMedicationRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFHIRMedicationRequest":
			out.Values[i] = ec._Mutation_deleteFHIRMedicationRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFHIRAllergyIntolerance":
			out.Values[i] = ec._Mutation_createFHIRAllergyIntolerance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFHIRAllergyIntolerance":
			out.Values[i] = ec._Mutation_updateFHIRAllergyIntolerance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFHIRCondition":
			out.Values[i] = ec._Mutation_createFHIRCondition(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFHIRCondition":
			out.Values[i] = ec._Mutation_updateFHIRCondition(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFHIRServiceRequest":
			out.Values[i] = ec._Mutation_createFHIRServiceRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFHIRServiceRequest":
			out.Values[i] = ec._Mutation_deleteFHIRServiceRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFHIRObservation":
			out.Values[i] = ec._Mutation_createFHIRObservation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFHIRComposition":
			out.Values[i] = ec._Mutation_createFHIRComposition(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFHIRComposition":
			out.Values[i] = ec._Mutation_updateFHIRComposition(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFHIRComposition":
			out.Values[i] = ec._Mutation_deleteFHIRComposition(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFHIRPatient":
			out.Values[i] = ec._Mutation_deleteFHIRPatient(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFHIRObservation":
			out.Values[i] = ec._Mutation_deleteFHIRObservation(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *firebasetools.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientConnectionImplementors = []string{"PatientConnection"}

func (ec *executionContext) _PatientConnection(ctx context.Context, sel ast.SelectionSet, obj *domain.PatientConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientConnection")
		case "edges":
			out.Values[i] = ec._PatientConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._PatientConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientEdgeImplementors = []string{"PatientEdge"}

func (ec *executionContext) _PatientEdge(ctx context.Context, sel ast.SelectionSet, obj *domain.PatientEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientEdge")
		case "cursor":
			out.Values[i] = ec._PatientEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "node":
			out.Values[i] = ec._PatientEdge_node(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOpenEpisodes":
			out.Values[i] = ec._PatientEdge_hasOpenEpisodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var patientPayloadImplementors = []string{"PatientPayload"}

func (ec *executionContext) _PatientPayload(ctx context.Context, sel ast.SelectionSet, obj *domain.PatientPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PatientPayload")
		case "patientRecord":
			out.Values[i] = ec._PatientPayload_patientRecord(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasOpenEpisodes":
			out.Values[i] = ec._PatientPayload_hasOpenEpisodes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openEpisodes":
			out.Values[i] = ec._PatientPayload_openEpisodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "findPatientsByMSISDN":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findPatientsByMSISDN(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findPatients":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findPatients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getPatient":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatient(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "openEpisodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_openEpisodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "openOrganizationEpisodes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_openOrganizationEpisodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "problemSummary":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_problemSummary(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "visitSummary":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_visitSummary(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patientTimelineWithCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientTimelineWithCount(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "patientTimeline":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientTimeline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIREncounter":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIREncounter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRCondition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRCondition(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRAllergyIntolerance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRAllergyIntolerance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRObservation":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRObservation(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRMedicationStatement":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRMedicationStatement(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRMedicationRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRMedicationRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRServiceRequest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRServiceRequest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "searchFHIRComposition":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchFHIRComposition(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "allergySummary":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allergySummary(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getMedicalData":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMedicalData(ctx, field)
				return res
			})
		case "listConcepts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listConcepts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_entities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNAllergyIntoleranceCriticalityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCriticalityEnum(ctx context.Context, v interface{}) (domain.AllergyIntoleranceCriticalityEnum, error) {
	var res domain.AllergyIntoleranceCriticalityEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAllergyIntoleranceCriticalityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCriticalityEnum(ctx context.Context, sel ast.SelectionSet, v domain.AllergyIntoleranceCriticalityEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBreakGlassEpisodeCreationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐBreakGlassEpisodeCreationInput(ctx context.Context, v interface{}) (domain.BreakGlassEpisodeCreationInput, error) {
	res, err := ec.unmarshalInputBreakGlassEpisodeCreationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) (scalarutils.Code, error) {
	var res scalarutils.Code
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v scalarutils.Code) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContentType2githubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx context.Context, v interface{}) (enumutils.ContentType, error) {
	var res enumutils.ContentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContentType2githubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx context.Context, sel ast.SelectionSet, v enumutils.ContentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (scalarutils.Date, error) {
	var res scalarutils.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v scalarutils.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) (scalarutils.DateTime, error) {
	var res scalarutils.DateTime
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v scalarutils.DateTime) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNDummy2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDummy(ctx context.Context, sel ast.SelectionSet, v domain.Dummy) graphql.Marshaler {
	return ec._Dummy(ctx, sel, &v)
}

func (ec *executionContext) marshalNDummy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDummy(ctx context.Context, sel ast.SelectionSet, v *domain.Dummy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Dummy(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusEnum(ctx context.Context, v interface{}) (domain.EncounterStatusEnum, error) {
	var res domain.EncounterStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusEnum(ctx context.Context, sel ast.SelectionSet, v domain.EncounterStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNEpisodeOfCarePayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCarePayload(ctx context.Context, sel ast.SelectionSet, v domain.EpisodeOfCarePayload) graphql.Marshaler {
	return ec._EpisodeOfCarePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNEpisodeOfCarePayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCarePayload(ctx context.Context, sel ast.SelectionSet, v *domain.EpisodeOfCarePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EpisodeOfCarePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAllergyIntolerance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRAllergyIntolerance(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRAllergyIntoleranceInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceInput(ctx context.Context, v interface{}) (domain.FHIRAllergyIntoleranceInput, error) {
	res, err := ec.unmarshalInputFHIRAllergyIntoleranceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRAllergyIntoleranceRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRAllergyIntoleranceRelayConnection) graphql.Marshaler {
	return ec._FHIRAllergyIntoleranceRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRAllergyIntoleranceRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAllergyIntoleranceRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRAllergyIntoleranceRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRAllergyIntoleranceRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIRAllergyIntoleranceRelayPayload) graphql.Marshaler {
	return ec._FHIRAllergyIntoleranceRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRAllergyIntoleranceRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAllergyIntoleranceRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRAllergyIntoleranceRelayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRCodeableConcept2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v domain.FHIRCodeableConcept) graphql.Marshaler {
	return ec._FHIRCodeableConcept(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCodeableConcept) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCodeableConcept) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRCodeableConcept(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRCodeableConceptInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) (domain.FHIRCodeableConceptInput, error) {
	res, err := ec.unmarshalInputFHIRCodeableConceptInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInputᚄ(ctx context.Context, v interface{}) ([]*domain.FHIRCodeableConceptInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCodeableConceptInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) (*domain.FHIRCodeableConceptInput, error) {
	res, err := ec.unmarshalInputFHIRCodeableConceptInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRCoding2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx context.Context, sel ast.SelectionSet, v domain.FHIRCoding) graphql.Marshaler {
	return ec._FHIRCoding(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCoding) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFHIRCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFHIRCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCoding(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCoding) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRCoding(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRCodingInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx context.Context, v interface{}) (domain.FHIRCodingInput, error) {
	res, err := ec.unmarshalInputFHIRCodingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFHIRCodingInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInputᚄ(ctx context.Context, v interface{}) ([]*domain.FHIRCodingInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCodingInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFHIRCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFHIRCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodingInput(ctx context.Context, v interface{}) (*domain.FHIRCodingInput, error) {
	res, err := ec.unmarshalInputFHIRCodingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRComposition(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRComposition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRComposition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionInput(ctx context.Context, v interface{}) (domain.FHIRCompositionInput, error) {
	res, err := ec.unmarshalInputFHIRCompositionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRCompositionRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRCompositionRelayConnection) graphql.Marshaler {
	return ec._FHIRCompositionRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRCompositionRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRCompositionRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRCompositionRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIRCompositionRelayPayload) graphql.Marshaler {
	return ec._FHIRCompositionRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRCompositionRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRCompositionRelayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRCondition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCondition(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCondition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRCondition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRConditionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionInput(ctx context.Context, v interface{}) (domain.FHIRConditionInput, error) {
	res, err := ec.unmarshalInputFHIRConditionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRConditionRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRConditionRelayConnection) graphql.Marshaler {
	return ec._FHIRConditionRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRConditionRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRConditionRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRConditionRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRConditionRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIRConditionRelayPayload) graphql.Marshaler {
	return ec._FHIRConditionRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRConditionRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRConditionRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRConditionRelayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIREncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounter(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIREncounter(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIREncounterRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIREncounterRelayConnection) graphql.Marshaler {
	return ec._FHIREncounterRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIREncounterRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIREncounterRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIREpisodeOfCare2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREpisodeOfCare) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREpisodeOfCare) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIREpisodeOfCare(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRIdentifier) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRIdentifier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRIdentifier(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInputᚄ(ctx context.Context, v interface{}) ([]*domain.FHIRIdentifierInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRIdentifierInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx context.Context, v interface{}) (*domain.FHIRIdentifierInput, error) {
	res, err := ec.unmarshalInputFHIRIdentifierInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRMedicationRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequest(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRMedicationRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRMedicationRequestInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestInput(ctx context.Context, v interface{}) (domain.FHIRMedicationRequestInput, error) {
	res, err := ec.unmarshalInputFHIRMedicationRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRMedicationRequestRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRMedicationRequestRelayConnection) graphql.Marshaler {
	return ec._FHIRMedicationRequestRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRMedicationRequestRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationRequestRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRMedicationRequestRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRMedicationRequestRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIRMedicationRequestRelayPayload) graphql.Marshaler {
	return ec._FHIRMedicationRequestRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRMedicationRequestRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationRequestRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRMedicationRequestRelayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRMedicationStatementRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRMedicationStatementRelayConnection) graphql.Marshaler {
	return ec._FHIRMedicationStatementRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRMedicationStatementRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationStatementRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRMedicationStatementRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRObservation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationInput(ctx context.Context, v interface{}) (domain.FHIRObservationInput, error) {
	res, err := ec.unmarshalInputFHIRObservationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRObservationRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRObservationRelayConnection) graphql.Marshaler {
	return ec._FHIRObservationRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRObservationRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservationRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRObservationRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRObservationRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIRObservationRelayPayload) graphql.Marshaler {
	return ec._FHIRObservationRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRObservationRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservationRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRObservationRelayPayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIROrganization(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatient(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPatient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRPatient(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPeriod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRPeriod(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx context.Context, v interface{}) (*domain.FHIRPeriodInput, error) {
	res, err := ec.unmarshalInputFHIRPeriodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx context.Context, sel ast.SelectionSet, v domain.FHIRQuantity) graphql.Marshaler {
	return ec._FHIRQuantity(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRQuantity) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRQuantity(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (domain.FHIRQuantityInput, error) {
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (*domain.FHIRQuantityInput, error) {
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRReference) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRReference) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInputᚄ(ctx context.Context, v interface{}) ([]*domain.FHIRReferenceInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRReferenceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx context.Context, v interface{}) (*domain.FHIRReferenceInput, error) {
	res, err := ec.unmarshalInputFHIRReferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequest(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRServiceRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRServiceRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFHIRServiceRequestInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestInput(ctx context.Context, v interface{}) (domain.FHIRServiceRequestInput, error) {
	res, err := ec.unmarshalInputFHIRServiceRequestInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFHIRServiceRequestRelayConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayConnection(ctx context.Context, sel ast.SelectionSet, v domain.FHIRServiceRequestRelayConnection) graphql.Marshaler {
	return ec._FHIRServiceRequestRelayConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRServiceRequestRelayConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayConnection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRServiceRequestRelayConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRServiceRequestRelayConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNFHIRServiceRequestRelayPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayPayload(ctx context.Context, sel ast.SelectionSet, v domain.FHIRServiceRequestRelayPayload) graphql.Marshaler {
	return ec._FHIRServiceRequestRelayPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFHIRServiceRequestRelayPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayPayload(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRServiceRequestRelayPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FHIRServiceRequestRelayPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx context.Context, v interface{}) (domain.HumanNameUseEnum, error) {
	var res domain.HumanNameUseEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHumanNameUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐHumanNameUseEnum(ctx context.Context, sel ast.SelectionSet, v domain.HumanNameUseEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIDDocumentType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIDDocumentType(ctx context.Context, v interface{}) (domain.IDDocumentType, error) {
	var res domain.IDDocumentType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIDDocumentType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIDDocumentType(ctx context.Context, sel ast.SelectionSet, v domain.IDDocumentType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNIdentificationDocument2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentificationDocument(ctx context.Context, v interface{}) (*domain.IdentificationDocument, error) {
	res, err := ec.unmarshalInputIdentificationDocument(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx context.Context, v interface{}) (domain.IdentifierUseEnum, error) {
	var res domain.IdentifierUseEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifierUseEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentifierUseEnum(ctx context.Context, sel ast.SelectionSet, v domain.IdentifierUseEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNMap2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNMap2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNMap2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNMap2map(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNNameInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNameInputᚄ(ctx context.Context, v interface{}) ([]*domain.NameInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.NameInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNameInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNameInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNNameInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNameInput(ctx context.Context, v interface{}) (*domain.NameInput, error) {
	res, err := ec.unmarshalInputNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOTPEpisodeCreationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐOTPEpisodeCreationInput(ctx context.Context, v interface{}) (domain.OTPEpisodeCreationInput, error) {
	res, err := ec.unmarshalInputOTPEpisodeCreationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOTPEpisodeUpgradeInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐOTPEpisodeUpgradeInput(ctx context.Context, v interface{}) (domain.OTPEpisodeUpgradeInput, error) {
	res, err := ec.unmarshalInputOTPEpisodeUpgradeInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *firebasetools.PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNPatientConnection2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientConnection(ctx context.Context, sel ast.SelectionSet, v domain.PatientConnection) graphql.Marshaler {
	return ec._PatientConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatientConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientConnection(ctx context.Context, sel ast.SelectionSet, v *domain.PatientConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PatientConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPatientExtraInformationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientExtraInformationInput(ctx context.Context, v interface{}) (domain.PatientExtraInformationInput, error) {
	res, err := ec.unmarshalInputPatientExtraInformationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPatientPayload2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx context.Context, sel ast.SelectionSet, v domain.PatientPayload) graphql.Marshaler {
	return ec._PatientPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatientPayload2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientPayload(ctx context.Context, sel ast.SelectionSet, v *domain.PatientPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PatientPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPhoneNumberInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhoneNumberInputᚄ(ctx context.Context, v interface{}) ([]*domain.PhoneNumberInput, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.PhoneNumberInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPhoneNumberInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhoneNumberInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPhoneNumberInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhoneNumberInput(ctx context.Context, v interface{}) (*domain.PhoneNumberInput, error) {
	res, err := ec.unmarshalInputPhoneNumberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRelationshipType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐRelationshipType(ctx context.Context, v interface{}) (domain.RelationshipType, error) {
	var res domain.RelationshipType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRelationshipType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐRelationshipType(ctx context.Context, sel ast.SelectionSet, v domain.RelationshipType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSimpleNextOfKinInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimpleNextOfKinInput(ctx context.Context, v interface{}) (domain.SimpleNextOfKinInput, error) {
	res, err := ec.unmarshalInputSimpleNextOfKinInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSimplePatientRegistrationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimplePatientRegistrationInput(ctx context.Context, v interface{}) (domain.SimplePatientRegistrationInput, error) {
	res, err := ec.unmarshalInputSimplePatientRegistrationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) (scalarutils.URI, error) {
	var res scalarutils.URI
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v scalarutils.URI) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx context.Context, v interface{}) (scalarutils.XHTML, error) {
	var res scalarutils.XHTML
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNXHTML2githubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx context.Context, sel ast.SelectionSet, v scalarutils.XHTML) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx context.Context, v interface{}) (*domain.AddressTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AddressTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddressTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressTypeEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AddressTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx context.Context, v interface{}) (*domain.AddressUseEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AddressUseEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddressUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAddressUseEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AddressUseEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx context.Context, v interface{}) (*domain.AgeComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AgeComparatorEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAgeComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAgeComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AgeComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAllergyIntoleranceCategoryEnum2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx context.Context, v interface{}) ([]*domain.AllergyIntoleranceCategoryEnum, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.AllergyIntoleranceCategoryEnum, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOAllergyIntoleranceCategoryEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOAllergyIntoleranceCategoryEnum2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx context.Context, sel ast.SelectionSet, v []*domain.AllergyIntoleranceCategoryEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllergyIntoleranceCategoryEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOAllergyIntoleranceCategoryEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx context.Context, v interface{}) (*domain.AllergyIntoleranceCategoryEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AllergyIntoleranceCategoryEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAllergyIntoleranceCategoryEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceCategoryEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AllergyIntoleranceCategoryEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAllergyIntoleranceReactionSeverityEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceReactionSeverityEnum(ctx context.Context, v interface{}) (*domain.AllergyIntoleranceReactionSeverityEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AllergyIntoleranceReactionSeverityEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAllergyIntoleranceReactionSeverityEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceReactionSeverityEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AllergyIntoleranceReactionSeverityEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOAllergyIntoleranceTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceTypeEnum(ctx context.Context, v interface{}) (*domain.AllergyIntoleranceTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.AllergyIntoleranceTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAllergyIntoleranceTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐAllergyIntoleranceTypeEnum(ctx context.Context, sel ast.SelectionSet, v *domain.AllergyIntoleranceTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx context.Context, v interface{}) (*scalarutils.Base64Binary, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Base64Binary)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBase64Binary2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Base64Binary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOCanonical2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCanonical(ctx context.Context, v interface{}) (*scalarutils.Canonical, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Canonical)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCanonical2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCanonical(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Canonical) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCode2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) ([]*scalarutils.Code, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*scalarutils.Code, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCode2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v []*scalarutils.Code) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) (*scalarutils.Code, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Code)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Code) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCompositionAttesterModeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionAttesterModeEnum(ctx context.Context, v interface{}) (*domain.CompositionAttesterModeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.CompositionAttesterModeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompositionAttesterModeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionAttesterModeEnum(ctx context.Context, sel ast.SelectionSet, v *domain.CompositionAttesterModeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCompositionStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionStatusEnum(ctx context.Context, v interface{}) (*domain.CompositionStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.CompositionStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompositionStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐCompositionStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.CompositionStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx context.Context, v interface{}) (*domain.ContactPointSystemEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.ContactPointSystemEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContactPointSystemEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointSystemEnum(ctx context.Context, sel ast.SelectionSet, v *domain.ContactPointSystemEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx context.Context, v interface{}) (*domain.ContactPointUseEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.ContactPointUseEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContactPointUseEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐContactPointUseEnum(ctx context.Context, sel ast.SelectionSet, v *domain.ContactPointUseEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContentType2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx context.Context, v interface{}) (*enumutils.ContentType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enumutils.ContentType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOContentType2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐContentType(ctx context.Context, sel ast.SelectionSet, v *enumutils.ContentType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (*scalarutils.Date, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODateTime2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) ([]*scalarutils.DateTime, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*scalarutils.DateTime, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODateTime2ᚕᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v []*scalarutils.DateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) (*scalarutils.DateTime, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.DateTime)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v *scalarutils.DateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx context.Context, v interface{}) (*scalarutils.Decimal, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Decimal)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODecimal2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDecimal(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Decimal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx context.Context, v interface{}) (*domain.DurationComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.DurationComparatorEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODurationComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐDurationComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *domain.DurationComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEmailInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEmailInput(ctx context.Context, v interface{}) ([]*domain.EmailInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.EmailInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOEmailInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEmailInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEmailInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEmailInput(ctx context.Context, v interface{}) (*domain.EmailInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEncounterLocationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterLocationStatusEnum(ctx context.Context, v interface{}) (*domain.EncounterLocationStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.EncounterLocationStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterLocationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterLocationStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.EncounterLocationStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEncounterStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusHistoryStatusEnum(ctx context.Context, v interface{}) (*domain.EncounterStatusHistoryStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.EncounterStatusHistoryStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEncounterStatusHistoryStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.EncounterStatusHistoryStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEpisodeOfCareStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusEnum(ctx context.Context, v interface{}) (*domain.EpisodeOfCareStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.EpisodeOfCareStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEpisodeOfCareStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.EpisodeOfCareStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOEpisodeOfCareStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusHistoryStatusEnum(ctx context.Context, v interface{}) (*domain.EpisodeOfCareStatusHistoryStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.EpisodeOfCareStatusHistoryStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEpisodeOfCareStatusHistoryStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐEpisodeOfCareStatusHistoryStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.EpisodeOfCareStatusHistoryStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFHIRAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddress(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAddress(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRAddressInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx context.Context, v interface{}) ([]*domain.FHIRAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRAddressInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRAddressInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRAddressInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAddressInput(ctx context.Context, v interface{}) (*domain.FHIRAddressInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRAddressInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRAge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRAgeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAgeInput(ctx context.Context, v interface{}) (*domain.FHIRAgeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRAgeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRAllergyIntolerance2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAllergyIntolerance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAllergyIntolerance2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntolerance(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAllergyIntolerance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAllergyIntolerance(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRAllergyIntoleranceRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAllergyIntoleranceRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAllergyIntoleranceRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAllergyIntoleranceRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyIntoleranceRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAllergyIntoleranceRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAllergyIntoleranceRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRAllergyintoleranceReaction2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReaction(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAllergyintoleranceReaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAllergyintoleranceReaction2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReaction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAllergyintoleranceReaction2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReaction(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAllergyintoleranceReaction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAllergyintoleranceReaction(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRAllergyintoleranceReactionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReactionInput(ctx context.Context, v interface{}) ([]*domain.FHIRAllergyintoleranceReactionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRAllergyintoleranceReactionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRAllergyintoleranceReactionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReactionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRAllergyintoleranceReactionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAllergyintoleranceReactionInput(ctx context.Context, v interface{}) (*domain.FHIRAllergyintoleranceReactionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRAllergyintoleranceReactionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRAnnotation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAnnotation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAnnotation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAnnotation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotation(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAnnotation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAnnotation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRAnnotationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx context.Context, v interface{}) ([]*domain.FHIRAnnotationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRAnnotationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRAnnotationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRAnnotationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAnnotationInput(ctx context.Context, v interface{}) (*domain.FHIRAnnotationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRAnnotationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRAttachment2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachment(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRAttachment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRAttachment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachment(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRAttachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRAttachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRAttachmentInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachmentInput(ctx context.Context, v interface{}) ([]*domain.FHIRAttachmentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRAttachmentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRAttachmentInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachmentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRAttachmentInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRAttachmentInput(ctx context.Context, v interface{}) (*domain.FHIRAttachmentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRAttachmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCodeableConcept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConcept(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCodeableConcept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCodeableConcept(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRCodeableConceptInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) ([]*domain.FHIRCodeableConceptInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCodeableConceptInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRCodeableConceptInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCodeableConceptInput(ctx context.Context, v interface{}) (*domain.FHIRCodeableConceptInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRCodeableConceptInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRComposition(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRComposition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRComposition(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRCompositionAttester2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttester(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCompositionAttester) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCompositionAttester2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttester(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCompositionAttester2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttester(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionAttester) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCompositionAttester(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRCompositionAttesterInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttesterInput(ctx context.Context, v interface{}) ([]*domain.FHIRCompositionAttesterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCompositionAttesterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRCompositionAttesterInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttesterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRCompositionAttesterInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionAttesterInput(ctx context.Context, v interface{}) (*domain.FHIRCompositionAttesterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRCompositionAttesterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRCompositionEvent2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEvent(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCompositionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCompositionEvent2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCompositionEvent2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEvent(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCompositionEvent(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRCompositionEventInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEventInput(ctx context.Context, v interface{}) ([]*domain.FHIRCompositionEventInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCompositionEventInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRCompositionEventInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEventInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRCompositionEventInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionEventInput(ctx context.Context, v interface{}) (*domain.FHIRCompositionEventInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRCompositionEventInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRCompositionRelatesto2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatesto(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCompositionRelatesto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCompositionRelatesto2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatesto(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCompositionRelatesto2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatesto(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionRelatesto) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCompositionRelatesto(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRCompositionRelatestoInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatestoInput(ctx context.Context, v interface{}) ([]*domain.FHIRCompositionRelatestoInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCompositionRelatestoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRCompositionRelatestoInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatestoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRCompositionRelatestoInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelatestoInput(ctx context.Context, v interface{}) (*domain.FHIRCompositionRelatestoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRCompositionRelatestoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRCompositionRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCompositionRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCompositionRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCompositionRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCompositionRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRCompositionSection2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSection(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRCompositionSection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRCompositionSection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRCompositionSection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSection(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCompositionSection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCompositionSection(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRCompositionSectionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSectionInput(ctx context.Context, v interface{}) ([]*domain.FHIRCompositionSectionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRCompositionSectionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRCompositionSectionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSectionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRCompositionSectionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCompositionSectionInput(ctx context.Context, v interface{}) (*domain.FHIRCompositionSectionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRCompositionSectionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRCondition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRCondition(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRCondition) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRCondition(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRConditionEvidence2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidence(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRConditionEvidence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRConditionEvidence2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidence(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRConditionEvidence2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidence(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRConditionEvidence) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRConditionEvidence(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRConditionEvidenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidenceInput(ctx context.Context, v interface{}) ([]*domain.FHIRConditionEvidenceInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRConditionEvidenceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRConditionEvidenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidenceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRConditionEvidenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionEvidenceInput(ctx context.Context, v interface{}) (*domain.FHIRConditionEvidenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRConditionEvidenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRConditionRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRConditionRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRConditionRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRConditionRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRConditionRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRConditionRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRConditionStage2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStage(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRConditionStage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRConditionStage2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRConditionStage2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStage(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRConditionStage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRConditionStage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRConditionStageInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStageInput(ctx context.Context, v interface{}) ([]*domain.FHIRConditionStageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRConditionStageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRConditionStageInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRConditionStageInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRConditionStageInput(ctx context.Context, v interface{}) (*domain.FHIRConditionStageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRConditionStageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRContactPoint2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRContactPoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRContactPoint2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRContactPoint2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPoint(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRContactPoint) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRContactPoint(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRContactPointInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx context.Context, v interface{}) ([]*domain.FHIRContactPointInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRContactPointInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRContactPointInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRContactPointInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRContactPointInput(ctx context.Context, v interface{}) (*domain.FHIRContactPointInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRContactPointInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRDosage2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosage(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRDosage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRDosage2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRDosage2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosage(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRDosage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRDosage(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRDosageDoseandrate2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRDosageDoseandrate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRDosageDoseandrate2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRDosageDoseandrate2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrate(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRDosageDoseandrate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRDosageDoseandrate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRDosageDoseandrateInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx context.Context, v interface{}) ([]*domain.FHIRDosageDoseandrateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRDosageDoseandrateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRDosageDoseandrateInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRDosageDoseandrateInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageDoseandrateInput(ctx context.Context, v interface{}) (*domain.FHIRDosageDoseandrateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRDosageDoseandrateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFHIRDosageInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageInput(ctx context.Context, v interface{}) ([]*domain.FHIRDosageInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRDosageInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRDosageInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRDosageInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDosageInput(ctx context.Context, v interface{}) (*domain.FHIRDosageInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRDosageInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRDuration2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDuration(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRDuration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRDuration(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRDurationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRDurationInput(ctx context.Context, v interface{}) (*domain.FHIRDurationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRDurationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounter(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounter(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIREncounterClasshistory2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistory(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREncounterClasshistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREncounterClasshistory2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREncounterClasshistory2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistory(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterClasshistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterClasshistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREncounterClasshistoryInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistoryInput(ctx context.Context, v interface{}) ([]*domain.FHIREncounterClasshistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREncounterClasshistoryInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREncounterClasshistoryInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistoryInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREncounterClasshistoryInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterClasshistoryInput(ctx context.Context, v interface{}) (*domain.FHIREncounterClasshistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREncounterClasshistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREncounterDiagnosis2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosis(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREncounterDiagnosis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREncounterDiagnosis2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREncounterDiagnosis2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosis(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterDiagnosis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterDiagnosis(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREncounterDiagnosisInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosisInput(ctx context.Context, v interface{}) ([]*domain.FHIREncounterDiagnosisInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREncounterDiagnosisInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREncounterDiagnosisInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosisInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREncounterDiagnosisInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterDiagnosisInput(ctx context.Context, v interface{}) (*domain.FHIREncounterDiagnosisInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREncounterDiagnosisInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREncounterHospitalization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterHospitalization(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterHospitalization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterHospitalization(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREncounterHospitalizationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterHospitalizationInput(ctx context.Context, v interface{}) (*domain.FHIREncounterHospitalizationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREncounterHospitalizationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREncounterLocation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocation(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREncounterLocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREncounterLocation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREncounterLocation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocation(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterLocation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterLocation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREncounterLocationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocationInput(ctx context.Context, v interface{}) ([]*domain.FHIREncounterLocationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREncounterLocationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREncounterLocationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREncounterLocationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterLocationInput(ctx context.Context, v interface{}) (*domain.FHIREncounterLocationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREncounterLocationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREncounterParticipant2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipant(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREncounterParticipant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREncounterParticipant2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipant(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREncounterParticipant2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipant(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterParticipant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterParticipant(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREncounterParticipantInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipantInput(ctx context.Context, v interface{}) ([]*domain.FHIREncounterParticipantInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREncounterParticipantInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREncounterParticipantInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipantInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREncounterParticipantInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterParticipantInput(ctx context.Context, v interface{}) (*domain.FHIREncounterParticipantInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREncounterParticipantInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREncounterRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREncounterRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREncounterRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREncounterRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIREncounterStatushistory2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistory(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREncounterStatushistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREncounterStatushistory2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREncounterStatushistory2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistory(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREncounterStatushistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREncounterStatushistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREncounterStatushistoryInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistoryInput(ctx context.Context, v interface{}) ([]*domain.FHIREncounterStatushistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREncounterStatushistoryInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREncounterStatushistoryInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistoryInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREncounterStatushistoryInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREncounterStatushistoryInput(ctx context.Context, v interface{}) (*domain.FHIREncounterStatushistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREncounterStatushistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREpisodeOfCare2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREpisodeOfCare) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREpisodeOfCare) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREpisodeOfCare(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIREpisodeOfCareRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREpisodeOfCareRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREpisodeOfCareRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREpisodeOfCareRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeOfCareRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREpisodeOfCareRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREpisodeOfCareRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIREpisodeofcareDiagnosis2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosis(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREpisodeofcareDiagnosis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREpisodeofcareDiagnosis2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosis(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREpisodeofcareDiagnosis2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosis(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREpisodeofcareDiagnosis) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREpisodeofcareDiagnosis(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREpisodeofcareDiagnosisInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosisInput(ctx context.Context, v interface{}) ([]*domain.FHIREpisodeofcareDiagnosisInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREpisodeofcareDiagnosisInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREpisodeofcareDiagnosisInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosisInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREpisodeofcareDiagnosisInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareDiagnosisInput(ctx context.Context, v interface{}) (*domain.FHIREpisodeofcareDiagnosisInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREpisodeofcareDiagnosisInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIREpisodeofcareStatushistory2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistory(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIREpisodeofcareStatushistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIREpisodeofcareStatushistory2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIREpisodeofcareStatushistory2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistory(ctx context.Context, sel ast.SelectionSet, v *domain.FHIREpisodeofcareStatushistory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIREpisodeofcareStatushistory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIREpisodeofcareStatushistoryInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistoryInput(ctx context.Context, v interface{}) ([]*domain.FHIREpisodeofcareStatushistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIREpisodeofcareStatushistoryInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIREpisodeofcareStatushistoryInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistoryInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIREpisodeofcareStatushistoryInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIREpisodeofcareStatushistoryInput(ctx context.Context, v interface{}) (*domain.FHIREpisodeofcareStatushistoryInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIREpisodeofcareStatushistoryInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRHumanName2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanName(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRHumanName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRHumanName2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanName(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRHumanName2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanName(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRHumanName) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRHumanName(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRHumanNameInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanNameInput(ctx context.Context, v interface{}) ([]*domain.FHIRHumanNameInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRHumanNameInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRHumanNameInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanNameInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRHumanNameInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRHumanNameInput(ctx context.Context, v interface{}) (*domain.FHIRHumanNameInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRHumanNameInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRIdentifier2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRIdentifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifier(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRIdentifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRIdentifier(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRIdentifierInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx context.Context, v interface{}) ([]*domain.FHIRIdentifierInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRIdentifierInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRIdentifierInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRIdentifierInput(ctx context.Context, v interface{}) (*domain.FHIRIdentifierInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRIdentifierInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRMedication2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedication(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedication) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedication(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRMedicationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationInput(ctx context.Context, v interface{}) (*domain.FHIRMedicationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRMedicationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRMedicationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRMedicationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRMedicationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRMedicationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRMedicationRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequest(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRMedicationRequestRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRMedicationRequestRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRMedicationRequestRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRMedicationRequestRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationRequestRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationRequestRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationRequestRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRMedicationStatement2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatement(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRMedicationStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatement(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationStatement(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRMedicationStatementRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRMedicationStatementRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRMedicationStatementRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRMedicationStatementRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationStatementRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationStatementRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationStatementRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRMedicationrequestDispenserequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestDispenserequest(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationrequestDispenserequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationrequestDispenserequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRMedicationrequestDispenserequestInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestDispenserequestInput(ctx context.Context, v interface{}) (*domain.FHIRMedicationrequestDispenserequestInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRMedicationrequestDispenserequestInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRMedicationrequestInitialfill2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestInitialfill(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationrequestInitialfill) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationrequestInitialfill(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRMedicationrequestInitialfillInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestInitialfillInput(ctx context.Context, v interface{}) (*domain.FHIRMedicationrequestInitialfillInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRMedicationrequestInitialfillInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRMedicationrequestSubstitution2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestSubstitution(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRMedicationrequestSubstitution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRMedicationrequestSubstitution(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRMedicationrequestSubstitutionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRMedicationrequestSubstitutionInput(ctx context.Context, v interface{}) (*domain.FHIRMedicationrequestSubstitutionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRMedicationrequestSubstitutionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRNarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrative(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRNarrative) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRNarrative(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRNarrativeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRNarrativeInput(ctx context.Context, v interface{}) (*domain.FHIRNarrativeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRNarrativeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRObservation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservation(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRObservation(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRObservationComponent2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponent(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRObservationComponent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRObservationComponent2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRObservationComponent2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponent(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservationComponent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRObservationComponent(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRObservationComponentInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponentInput(ctx context.Context, v interface{}) ([]*domain.FHIRObservationComponentInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRObservationComponentInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRObservationComponentInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponentInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRObservationComponentInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationComponentInput(ctx context.Context, v interface{}) (*domain.FHIRObservationComponentInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRObservationComponentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRObservationReferencerange2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerange(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRObservationReferencerange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRObservationReferencerange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRObservationReferencerange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerange(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservationReferencerange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRObservationReferencerange(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRObservationReferencerangeInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerangeInput(ctx context.Context, v interface{}) ([]*domain.FHIRObservationReferencerangeInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRObservationReferencerangeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRObservationReferencerangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerangeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRObservationReferencerangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationReferencerangeInput(ctx context.Context, v interface{}) (*domain.FHIRObservationReferencerangeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRObservationReferencerangeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRObservationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRObservationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRObservationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRObservationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRObservationRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRObservationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRObservationRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIROrganization2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganization(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIROrganization(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIROrganizationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationInput(ctx context.Context, v interface{}) (*domain.FHIROrganizationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIROrganizationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIROrganizationRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIROrganizationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIROrganizationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIROrganizationRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIROrganizationRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIROrganizationRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIROrganizationRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatient(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPatient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPatient(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRPatientCommunication2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunication(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRPatientCommunication) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRPatientCommunication2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunication(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRPatientCommunication2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunication(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPatientCommunication) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPatientCommunication(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRPatientCommunicationInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunicationInput(ctx context.Context, v interface{}) ([]*domain.FHIRPatientCommunicationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRPatientCommunicationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRPatientCommunicationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunicationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRPatientCommunicationInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientCommunicationInput(ctx context.Context, v interface{}) (*domain.FHIRPatientCommunicationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRPatientCommunicationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRPatientContact2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContact(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRPatientContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRPatientContact2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRPatientContact2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContact(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPatientContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPatientContact(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRPatientContactInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContactInput(ctx context.Context, v interface{}) ([]*domain.FHIRPatientContactInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRPatientContactInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRPatientContactInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContactInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRPatientContactInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientContactInput(ctx context.Context, v interface{}) (*domain.FHIRPatientContactInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRPatientContactInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRPatientLink2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLink(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRPatientLink) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRPatientLink2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRPatientLink2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLink(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPatientLink) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPatientLink(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRPatientLinkInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLinkInput(ctx context.Context, v interface{}) ([]*domain.FHIRPatientLinkInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRPatientLinkInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRPatientLinkInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLinkInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRPatientLinkInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientLinkInput(ctx context.Context, v interface{}) (*domain.FHIRPatientLinkInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRPatientLinkInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRPatientRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRPatientRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRPatientRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRPatientRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPatientRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPatientRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPatientRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriod(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRPeriod) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRPeriod(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRPeriodInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRPeriodInput(ctx context.Context, v interface{}) (*domain.FHIRPeriodInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRPeriodInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantity(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRQuantity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRQuantity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRQuantityInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (domain.FHIRQuantityInput, error) {
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFHIRQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRQuantityInput(ctx context.Context, v interface{}) (*domain.FHIRQuantityInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRQuantityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRRange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRange(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRRange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRRange(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRRangeInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRangeInput(ctx context.Context, v interface{}) (*domain.FHIRRangeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRRangeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRRatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatio(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRRatio) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRRatio(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRRatioInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRRatioInput(ctx context.Context, v interface{}) (*domain.FHIRRatioInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRRatioInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRReference2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReference(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRReference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRReference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRReferenceInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx context.Context, v interface{}) ([]*domain.FHIRReferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.FHIRReferenceInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFHIRReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRReferenceInput(ctx context.Context, v interface{}) (*domain.FHIRReferenceInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRReferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRSampledData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRSampledData(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRSampledData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRSampledData(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRSampledDataInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRSampledDataInput(ctx context.Context, v interface{}) (*domain.FHIRSampledDataInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRSampledDataInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRServiceRequest2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequest(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRServiceRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRServiceRequest(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRServiceRequestRelayEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.FHIRServiceRequestRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFHIRServiceRequestRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFHIRServiceRequestRelayEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRServiceRequestRelayEdge(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRServiceRequestRelayEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRServiceRequestRelayEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOFHIRTiming2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTiming(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRTiming) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRTiming(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRTimingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingInput(ctx context.Context, v interface{}) (*domain.FHIRTimingInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRTimingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFHIRTimingRepeat2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeat(ctx context.Context, sel ast.SelectionSet, v *domain.FHIRTimingRepeat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FHIRTimingRepeat(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFHIRTimingRepeatInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐFHIRTimingRepeatInput(ctx context.Context, v interface{}) (*domain.FHIRTimingRepeatInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFHIRTimingRepeatInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalID(v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOIdentificationDocument2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentificationDocumentᚄ(ctx context.Context, v interface{}) ([]*domain.IdentificationDocument, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.IdentificationDocument, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIdentificationDocument2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐIdentificationDocument(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx context.Context, v interface{}) (*scalarutils.Instant, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Instant)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInstant2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐInstant(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Instant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v interface{}) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt64(*v)
}

func (ec *executionContext) unmarshalOInteger2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInteger2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOLanguage2githubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, v interface{}) (enumutils.Language, error) {
	var res enumutils.Language
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLanguage2githubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, sel ast.SelectionSet, v enumutils.Language) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOLanguage2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, v interface{}) ([]enumutils.Language, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]enumutils.Language, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLanguage2githubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLanguage2ᚕgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, sel ast.SelectionSet, v []enumutils.Language) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLanguage2githubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOLanguage2ᚕᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, v interface{}) ([]*enumutils.Language, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*enumutils.Language, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOLanguage2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLanguage2ᚕᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, sel ast.SelectionSet, v []*enumutils.Language) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLanguage2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOLanguage2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, v interface{}) (*enumutils.Language, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(enumutils.Language)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLanguage2ᚖgithubᚗcomᚋsavannahghiᚋenumutilsᚐLanguage(ctx context.Context, sel ast.SelectionSet, v *enumutils.Language) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMaritalStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMaritalStatus(ctx context.Context, v interface{}) (domain.MaritalStatus, error) {
	var res domain.MaritalStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMaritalStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMaritalStatus(ctx context.Context, sel ast.SelectionSet, v domain.MaritalStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOMaritalStatus2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMaritalStatus(ctx context.Context, v interface{}) (*domain.MaritalStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.MaritalStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMaritalStatus2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMaritalStatus(ctx context.Context, sel ast.SelectionSet, v *domain.MaritalStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx context.Context, v interface{}) (*scalarutils.Markdown, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Markdown)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMarkdown2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Markdown) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOMedicalData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicalData(ctx context.Context, sel ast.SelectionSet, v *domain.MedicalData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicalData(ctx, sel, v)
}

func (ec *executionContext) marshalOMedicationBatch2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationBatch(ctx context.Context, sel ast.SelectionSet, v *domain.MedicationBatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicationBatch(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMedicationBatchInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationBatchInput(ctx context.Context, v interface{}) (*domain.MedicationBatchInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMedicationBatchInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicationIngredient2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredient(ctx context.Context, sel ast.SelectionSet, v []*domain.MedicationIngredient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMedicationIngredient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMedicationIngredient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredient(ctx context.Context, sel ast.SelectionSet, v *domain.MedicationIngredient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicationIngredient(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMedicationIngredientInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredientInput(ctx context.Context, v interface{}) ([]*domain.MedicationIngredientInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.MedicationIngredientInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMedicationIngredientInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredientInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMedicationIngredientInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationIngredientInput(ctx context.Context, v interface{}) (*domain.MedicationIngredientInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMedicationIngredientInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMedicationStatementStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatementStatusEnum(ctx context.Context, v interface{}) (*domain.MedicationStatementStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.MedicationStatementStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicationStatementStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatementStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.MedicationStatementStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOMedicationStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatusEnum(ctx context.Context, v interface{}) (domain.MedicationStatusEnum, error) {
	var res domain.MedicationStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicationStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐMedicationStatusEnum(ctx context.Context, sel ast.SelectionSet, v domain.MedicationStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx context.Context, v interface{}) (*domain.NarrativeStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.NarrativeStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONarrativeStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐNarrativeStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.NarrativeStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOObservationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐObservationStatusEnum(ctx context.Context, v interface{}) (*domain.ObservationStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.ObservationStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObservationStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐObservationStatusEnum(ctx context.Context, sel ast.SelectionSet, v *domain.ObservationStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPageInfo2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *firebasetools.PageInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPatientContactGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientContactGenderEnum(ctx context.Context, v interface{}) (*domain.PatientContactGenderEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.PatientContactGenderEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPatientContactGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientContactGenderEnum(ctx context.Context, sel ast.SelectionSet, v *domain.PatientContactGenderEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOPatientEdge2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientEdge(ctx context.Context, sel ast.SelectionSet, v []*domain.PatientEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPatientEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPatientEdge2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientEdge(ctx context.Context, sel ast.SelectionSet, v *domain.PatientEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PatientEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPatientGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientGenderEnum(ctx context.Context, v interface{}) (*domain.PatientGenderEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.PatientGenderEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPatientGenderEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientGenderEnum(ctx context.Context, sel ast.SelectionSet, v *domain.PatientGenderEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPatientLinkTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientLinkTypeEnum(ctx context.Context, v interface{}) (*domain.PatientLinkTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.PatientLinkTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPatientLinkTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPatientLinkTypeEnum(ctx context.Context, sel ast.SelectionSet, v *domain.PatientLinkTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPhotoInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhotoInput(ctx context.Context, v interface{}) ([]*domain.PhotoInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.PhotoInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPhotoInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhotoInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPhotoInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhotoInput(ctx context.Context, v interface{}) (*domain.PhotoInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhotoInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhysicalAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhysicalAddress(ctx context.Context, v interface{}) ([]*domain.PhysicalAddress, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.PhysicalAddress, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPhysicalAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhysicalAddress(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPhysicalAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPhysicalAddress(ctx context.Context, v interface{}) (*domain.PhysicalAddress, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhysicalAddress(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPositiveInt2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPositiveInt2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOPostalAddress2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPostalAddress(ctx context.Context, v interface{}) ([]*domain.PostalAddress, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*domain.PostalAddress, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPostalAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPostalAddress(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPostalAddress2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐPostalAddress(ctx context.Context, v interface{}) (*domain.PostalAddress, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPostalAddress(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx context.Context, v interface{}) (*domain.QuantityComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.QuantityComparatorEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐQuantityComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *domain.QuantityComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOSimpleNHIFInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐSimpleNHIFInput(ctx context.Context, v interface{}) (*domain.SimpleNHIFInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSimpleNHIFInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx context.Context, v interface{}) (*domain.TimingRepeatDurationUnitEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.TimingRepeatDurationUnitEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingRepeatDurationUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatDurationUnitEnum(ctx context.Context, sel ast.SelectionSet, v *domain.TimingRepeatDurationUnitEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx context.Context, v interface{}) (*domain.TimingRepeatPeriodUnitEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.TimingRepeatPeriodUnitEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingRepeatPeriodUnitEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatPeriodUnitEnum(ctx context.Context, sel ast.SelectionSet, v *domain.TimingRepeatPeriodUnitEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx context.Context, v interface{}) (*domain.TimingRepeatWhenEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(domain.TimingRepeatWhenEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimingRepeatWhenEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐTimingRepeatWhenEnum(ctx context.Context, sel ast.SelectionSet, v *domain.TimingRepeatWhenEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) (*scalarutils.URI, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.URI)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v *scalarutils.URI) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx context.Context, v interface{}) (*scalarutils.URL, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.URL)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURL2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx context.Context, sel ast.SelectionSet, v *scalarutils.URL) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOUnsignedInt2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUnsignedInt2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
