// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/savannahghi/clinical/pkg/clinical/application/dto"
	"github.com/savannahghi/clinical/pkg/clinical/domain"
	"github.com/savannahghi/scalarutils"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Allergy struct {
		Code              func(childComplexity int) int
		EncounterID       func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		Reaction          func(childComplexity int) int
		System            func(childComplexity int) int
		TerminologySource func(childComplexity int) int
	}

	AllergyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AllergyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Annotation struct {
		AuthorReference func(childComplexity int) int
		AuthorString    func(childComplexity int) int
		ID              func(childComplexity int) int
		Text            func(childComplexity int) int
		Time            func(childComplexity int) int
	}

	Attachment struct {
		ContentType func(childComplexity int) int
		Creation    func(childComplexity int) int
		Data        func(childComplexity int) int
		Hash        func(childComplexity int) int
		ID          func(childComplexity int) int
		Language    func(childComplexity int) int
		Size        func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	CodeableConcept struct {
		Coding func(childComplexity int) int
		ID     func(childComplexity int) int
		Text   func(childComplexity int) int
	}

	Coding struct {
		Code         func(childComplexity int) int
		Display      func(childComplexity int) int
		ID           func(childComplexity int) int
		System       func(childComplexity int) int
		UserSelected func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	Composition struct {
		Category    func(childComplexity int) int
		Date        func(childComplexity int) int
		EncounterID func(childComplexity int) int
		ID          func(childComplexity int) int
		PatientID   func(childComplexity int) int
		Section     func(childComplexity int) int
		Status      func(childComplexity int) int
		Text        func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	CompositionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CompositionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Condition struct {
		Category     func(childComplexity int) int
		Code         func(childComplexity int) int
		EncounterID  func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		Note         func(childComplexity int) int
		OnsetDate    func(childComplexity int) int
		PatientID    func(childComplexity int) int
		RecordedDate func(childComplexity int) int
		Status       func(childComplexity int) int
		System       func(childComplexity int) int
	}

	ConditionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ConditionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Consent struct {
		ID        func(childComplexity int) int
		Patient   func(childComplexity int) int
		Provision func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	ConsentOutput struct {
		Status func(childComplexity int) int
	}

	ConsentProvision struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
	}

	DiagnosticReport struct {
		Conclusion  func(childComplexity int) int
		EncounterID func(childComplexity int) int
		ID          func(childComplexity int) int
		Issued      func(childComplexity int) int
		Media       func(childComplexity int) int
		PatientID   func(childComplexity int) int
		Result      func(childComplexity int) int
		Status      func(childComplexity int) int
	}

	Encounter struct {
		Class           func(childComplexity int) int
		EpisodeOfCareID func(childComplexity int) int
		ID              func(childComplexity int) int
		PatientID       func(childComplexity int) int
		Status          func(childComplexity int) int
	}

	EncounterAssociatedResources struct {
		Consent        func(childComplexity int) int
		RiskAssessment func(childComplexity int) int
	}

	EncounterClass struct {
		Code    func(childComplexity int) int
		Display func(childComplexity int) int
	}

	EncounterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	EncounterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	EpisodeOfCare struct {
		ID        func(childComplexity int) int
		PatientID func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	Extension struct {
		URL                  func(childComplexity int) int
		ValueAnnotation      func(childComplexity int) int
		ValueAttachment      func(childComplexity int) int
		ValueBase64Binary    func(childComplexity int) int
		ValueBoolean         func(childComplexity int) int
		ValueCode            func(childComplexity int) int
		ValueCodeableConcept func(childComplexity int) int
		ValueCoding          func(childComplexity int) int
		ValueDate            func(childComplexity int) int
		ValueDateTime        func(childComplexity int) int
		ValueDecimal         func(childComplexity int) int
		ValueID              func(childComplexity int) int
		ValueIdentifier      func(childComplexity int) int
		ValueInstant         func(childComplexity int) int
		ValueInteger         func(childComplexity int) int
		ValueMarkdown        func(childComplexity int) int
		ValueOid             func(childComplexity int) int
		ValuePeriod          func(childComplexity int) int
		ValuePositiveInt     func(childComplexity int) int
		ValueQuantity        func(childComplexity int) int
		ValueRange           func(childComplexity int) int
		ValueRatio           func(childComplexity int) int
		ValueReference       func(childComplexity int) int
		ValueString          func(childComplexity int) int
		ValueTime            func(childComplexity int) int
		ValueURI             func(childComplexity int) int
		ValueUUID            func(childComplexity int) int
		ValueUnsignedInt     func(childComplexity int) int
	}

	HealthTimeline struct {
		Timeline   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	Identifier struct {
		Assigner func(childComplexity int) int
		ID       func(childComplexity int) int
		Period   func(childComplexity int) int
		System   func(childComplexity int) int
		Type     func(childComplexity int) int
		Use      func(childComplexity int) int
		Value    func(childComplexity int) int
	}

	Media struct {
		ContentType func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	MediaConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MediaEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	MedicalData struct {
		Allergies func(childComplexity int) int
		BMI       func(childComplexity int) int
		CD4Count  func(childComplexity int) int
		Regimen   func(childComplexity int) int
		ViralLoad func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	Medication struct {
		Code func(childComplexity int) int
		Name func(childComplexity int) int
	}

	MedicationStatement struct {
		ID         func(childComplexity int) int
		Medication func(childComplexity int) int
		PatientID  func(childComplexity int) int
		Status     func(childComplexity int) int
	}

	Meta struct {
		Security  func(childComplexity int) int
		Source    func(childComplexity int) int
		Tag       func(childComplexity int) int
		VersionID func(childComplexity int) int
	}

	Mutation struct {
		AppendNoteToComposition            func(childComplexity int, id string, input dto.PatchCompositionInput) int
		CreateAllergyIntolerance           func(childComplexity int, input dto.AllergyInput) int
		CreateComposition                  func(childComplexity int, input dto.CompositionInput) int
		CreateCondition                    func(childComplexity int, input dto.ConditionInput) int
		CreateEpisodeOfCare                func(childComplexity int, episodeOfCare dto.EpisodeOfCareInput) int
		CreatePatient                      func(childComplexity int, input dto.PatientInput) int
		CreateQuestionnaireResponse        func(childComplexity int, questionnaireID string, encounterID string, input dto.QuestionnaireResponse) int
		DeletePatient                      func(childComplexity int, id string) int
		EndEncounter                       func(childComplexity int, encounterID string) int
		EndEpisodeOfCare                   func(childComplexity int, id string) int
		GetEncounterAssociatedResources    func(childComplexity int, encounterID string) int
		PatchEncounter                     func(childComplexity int, encounterID string, input dto.EncounterInput) int
		PatchEpisodeOfCare                 func(childComplexity int, id string, episodeOfCare dto.EpisodeOfCareInput) int
		PatchPatient                       func(childComplexity int, id string, input dto.PatientInput) int
		PatchPatientBloodSugar             func(childComplexity int, id string, value string) int
		PatchPatientBmi                    func(childComplexity int, id string, value string) int
		PatchPatientDiastolicBloodPressure func(childComplexity int, id string, value string) int
		PatchPatientHeight                 func(childComplexity int, id string, value string) int
		PatchPatientLastMenstrualPeriod    func(childComplexity int, id string, value string) int
		PatchPatientMuac                   func(childComplexity int, id string, value string) int
		PatchPatientOxygenSaturation       func(childComplexity int, id string, value string) int
		PatchPatientPulseRate              func(childComplexity int, id string, value string) int
		PatchPatientRespiratoryRate        func(childComplexity int, id string, value string) int
		PatchPatientSystolicBloodPressure  func(childComplexity int, id string, value string) int
		PatchPatientTemperature            func(childComplexity int, id string, value string) int
		PatchPatientViralLoad              func(childComplexity int, id string, value string) int
		PatchPatientWeight                 func(childComplexity int, id string, value string) int
		RecordBiopsy                       func(childComplexity int, input dto.DiagnosticReportInput) int
		RecordBloodPressure                func(childComplexity int, input dto.ObservationInput) int
		RecordBloodSugar                   func(childComplexity int, input dto.ObservationInput) int
		RecordBmi                          func(childComplexity int, input dto.ObservationInput) int
		RecordCbe                          func(childComplexity int, input dto.DiagnosticReportInput) int
		RecordColposcopy                   func(childComplexity int, input dto.ObservationInput) int
		RecordConsent                      func(childComplexity int, input dto.ConsentInput) int
		RecordDiastolicBloodPressure       func(childComplexity int, input dto.ObservationInput) int
		RecordHeight                       func(childComplexity int, input dto.ObservationInput) int
		RecordHpv                          func(childComplexity int, input dto.ObservationInput) int
		RecordLastMenstrualPeriod          func(childComplexity int, input dto.ObservationInput) int
		RecordMammographyResult            func(childComplexity int, input dto.DiagnosticReportInput) int
		RecordMri                          func(childComplexity int, input dto.DiagnosticReportInput) int
		RecordMuac                         func(childComplexity int, input dto.ObservationInput) int
		RecordOxygenSaturation             func(childComplexity int, input dto.ObservationInput) int
		RecordPapSmear                     func(childComplexity int, input dto.ObservationInput) int
		RecordPulseRate                    func(childComplexity int, input dto.ObservationInput) int
		RecordRespiratoryRate              func(childComplexity int, input dto.ObservationInput) int
		RecordTemperature                  func(childComplexity int, input dto.ObservationInput) int
		RecordUltrasound                   func(childComplexity int, input dto.DiagnosticReportInput) int
		RecordVia                          func(childComplexity int, input dto.ObservationInput) int
		RecordViralLoad                    func(childComplexity int, input dto.ObservationInput) int
		RecordWeight                       func(childComplexity int, input dto.ObservationInput) int
		StartEncounter                     func(childComplexity int, episodeID string) int
	}

	Narrative struct {
		Div    func(childComplexity int) int
		ID     func(childComplexity int) int
		Status func(childComplexity int) int
	}

	Observation struct {
		EncounterID    func(childComplexity int) int
		ID             func(childComplexity int) int
		Interpretation func(childComplexity int) int
		Name           func(childComplexity int) int
		Note           func(childComplexity int) int
		PatientID      func(childComplexity int) int
		Status         func(childComplexity int) int
		TimeRecorded   func(childComplexity int) int
		Value          func(childComplexity int) int
	}

	ObservationConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	ObservationEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Patient struct {
		Active      func(childComplexity int) int
		BirthDate   func(childComplexity int) int
		Gender      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
	}

	Period struct {
		End   func(childComplexity int) int
		ID    func(childComplexity int) int
		Start func(childComplexity int) int
	}

	Quantity struct {
		Code       func(childComplexity int) int
		Comparator func(childComplexity int) int
		System     func(childComplexity int) int
		Unit       func(childComplexity int) int
		Value      func(childComplexity int) int
	}

	Query struct {
		GetAllergy                              func(childComplexity int, id string) int
		GetEpisodeOfCare                        func(childComplexity int, id string) int
		GetMedicalData                          func(childComplexity int, patientID string) int
		GetPatientBMIEntries                    func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientBloodPressureEntries          func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientBloodSugarEntries             func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientDiastolicBloodPressureEntries func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientHeightEntries                 func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientLastMenstrualPeriodEntries    func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientMuacEntries                   func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientOxygenSaturationEntries       func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientPulseRateEntries              func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientRespiratoryRateEntries        func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientTemperatureEntries            func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientViralLoad                     func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetPatientWeightEntries                 func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		GetQuestionnaireResponseRiskLevel       func(childComplexity int, encounterID string, screeningType domain.ScreeningTypeEnum) int
		ListPatientAllergies                    func(childComplexity int, patientID string, pagination dto.Pagination) int
		ListPatientCompositions                 func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		ListPatientConditions                   func(childComplexity int, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) int
		ListPatientEncounters                   func(childComplexity int, patientID string, pagination dto.Pagination) int
		ListPatientMedia                        func(childComplexity int, patientID string, pagination dto.Pagination) int
		PatientHealthTimeline                   func(childComplexity int, input dto.HealthTimelineInput) int
		SearchAllergy                           func(childComplexity int, name string, pagination dto.Pagination) int
		__resolve__service                      func(childComplexity int) int
	}

	Questionnaire struct {
		Code              func(childComplexity int) int
		Date              func(childComplexity int) int
		DerivedFrom       func(childComplexity int) int
		Description       func(childComplexity int) int
		EffectivePeriod   func(childComplexity int) int
		Experimental      func(childComplexity int) int
		Extension         func(childComplexity int) int
		ID                func(childComplexity int) int
		Identifier        func(childComplexity int) int
		ImplicitRules     func(childComplexity int) int
		Item              func(childComplexity int) int
		Jurisdiction      func(childComplexity int) int
		Language          func(childComplexity int) int
		Meta              func(childComplexity int) int
		ModifierExtension func(childComplexity int) int
		Name              func(childComplexity int) int
		Publisher         func(childComplexity int) int
		Purpose           func(childComplexity int) int
		ResourceType      func(childComplexity int) int
		Status            func(childComplexity int) int
		Text              func(childComplexity int) int
		Title             func(childComplexity int) int
		URL               func(childComplexity int) int
		UseContext        func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	QuestionnaireConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	QuestionnaireEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	QuestionnaireItem struct {
		AnswerOption      func(childComplexity int) int
		AnswerValueSet    func(childComplexity int) int
		Code              func(childComplexity int) int
		Definition        func(childComplexity int) int
		DisabledDisplay   func(childComplexity int) int
		EnableBehavior    func(childComplexity int) int
		EnableWhen        func(childComplexity int) int
		Extension         func(childComplexity int) int
		ID                func(childComplexity int) int
		Initial           func(childComplexity int) int
		Item              func(childComplexity int) int
		LinkID            func(childComplexity int) int
		MaxLength         func(childComplexity int) int
		Meta              func(childComplexity int) int
		ModifierExtension func(childComplexity int) int
		Prefix            func(childComplexity int) int
		ReadOnly          func(childComplexity int) int
		Repeats           func(childComplexity int) int
		Required          func(childComplexity int) int
		Text              func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	QuestionnaireItemAnswerOption struct {
		Extension         func(childComplexity int) int
		ID                func(childComplexity int) int
		InitialSelected   func(childComplexity int) int
		ModifierExtension func(childComplexity int) int
		ValueCoding       func(childComplexity int) int
		ValueDate         func(childComplexity int) int
		ValueInteger      func(childComplexity int) int
		ValueReference    func(childComplexity int) int
		ValueString       func(childComplexity int) int
	}

	QuestionnaireItemEnableWhen struct {
		AnswerBoolean     func(childComplexity int) int
		AnswerCoding      func(childComplexity int) int
		AnswerDate        func(childComplexity int) int
		AnswerDateTime    func(childComplexity int) int
		AnswerDecimal     func(childComplexity int) int
		AnswerInteger     func(childComplexity int) int
		AnswerQuantity    func(childComplexity int) int
		AnswerReference   func(childComplexity int) int
		AnswerString      func(childComplexity int) int
		AnswerTime        func(childComplexity int) int
		Extension         func(childComplexity int) int
		ID                func(childComplexity int) int
		ModifierExtension func(childComplexity int) int
		Operator          func(childComplexity int) int
		Question          func(childComplexity int) int
	}

	QuestionnaireItemInitial struct {
		Extension         func(childComplexity int) int
		ID                func(childComplexity int) int
		ModifierExtension func(childComplexity int) int
		ValueAttachment   func(childComplexity int) int
		ValueBoolean      func(childComplexity int) int
		ValueCoding       func(childComplexity int) int
		ValueDate         func(childComplexity int) int
		ValueDateTime     func(childComplexity int) int
		ValueDecimal      func(childComplexity int) int
		ValueInteger      func(childComplexity int) int
		ValueQuantity     func(childComplexity int) int
		ValueReference    func(childComplexity int) int
		ValueString       func(childComplexity int) int
		ValueURI          func(childComplexity int) int
	}

	QuestionnaireResponse struct {
		Authored func(childComplexity int) int
		Item     func(childComplexity int) int
		Status   func(childComplexity int) int
	}

	QuestionnaireResponseItem struct {
		Answer func(childComplexity int) int
		Item   func(childComplexity int) int
		LinkID func(childComplexity int) int
		Text   func(childComplexity int) int
	}

	QuestionnaireResponseItemAnswer struct {
		Item            func(childComplexity int) int
		ValueAttachment func(childComplexity int) int
		ValueBoolean    func(childComplexity int) int
		ValueCoding     func(childComplexity int) int
		ValueDate       func(childComplexity int) int
		ValueDateTime   func(childComplexity int) int
		ValueDecimal    func(childComplexity int) int
		ValueInteger    func(childComplexity int) int
		ValueQuantity   func(childComplexity int) int
		ValueReference  func(childComplexity int) int
		ValueString     func(childComplexity int) int
		ValueTime       func(childComplexity int) int
		ValueURI        func(childComplexity int) int
	}

	Range struct {
		High func(childComplexity int) int
		ID   func(childComplexity int) int
		Low  func(childComplexity int) int
	}

	Ratio struct {
		Denominator func(childComplexity int) int
		ID          func(childComplexity int) int
		Numerator   func(childComplexity int) int
	}

	Reaction struct {
		Code     func(childComplexity int) int
		Name     func(childComplexity int) int
		Severity func(childComplexity int) int
		System   func(childComplexity int) int
	}

	Reference struct {
		Display    func(childComplexity int) int
		ID         func(childComplexity int) int
		Identifier func(childComplexity int) int
		Reference  func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	RiskAssessment struct {
		Encounter  func(childComplexity int) int
		ID         func(childComplexity int) int
		Note       func(childComplexity int) int
		Prediction func(childComplexity int) int
		Subject    func(childComplexity int) int
	}

	RiskAssessmentPrediction struct {
		ID                 func(childComplexity int) int
		Outcome            func(childComplexity int) int
		ProbabilityDecimal func(childComplexity int) int
	}

	Section struct {
		Author  func(childComplexity int) int
		Code    func(childComplexity int) int
		ID      func(childComplexity int) int
		Section func(childComplexity int) int
		Text    func(childComplexity int) int
		Title   func(childComplexity int) int
	}

	Terminology struct {
		Code   func(childComplexity int) int
		Name   func(childComplexity int) int
		System func(childComplexity int) int
	}

	TerminologyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TerminologyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	TimelineResource struct {
		Date         func(childComplexity int) int
		ID           func(childComplexity int) int
		Name         func(childComplexity int) int
		ResourceType func(childComplexity int) int
		Status       func(childComplexity int) int
		TimeRecorded func(childComplexity int) int
		Value        func(childComplexity int) int
	}

	UsageContext struct {
		Code                 func(childComplexity int) int
		Extension            func(childComplexity int) int
		ID                   func(childComplexity int) int
		ValueCodeableConcept func(childComplexity int) int
		ValueQuantity        func(childComplexity int) int
		ValueRange           func(childComplexity int) int
		ValueReference       func(childComplexity int) int
	}

	_Service struct {
		SDL func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateEpisodeOfCare(ctx context.Context, episodeOfCare dto.EpisodeOfCareInput) (*dto.EpisodeOfCare, error)
	PatchEpisodeOfCare(ctx context.Context, id string, episodeOfCare dto.EpisodeOfCareInput) (*dto.EpisodeOfCare, error)
	EndEpisodeOfCare(ctx context.Context, id string) (*dto.EpisodeOfCare, error)
	StartEncounter(ctx context.Context, episodeID string) (string, error)
	PatchEncounter(ctx context.Context, encounterID string, input dto.EncounterInput) (*dto.Encounter, error)
	EndEncounter(ctx context.Context, encounterID string) (bool, error)
	RecordTemperature(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordHeight(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordWeight(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordRespiratoryRate(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordPulseRate(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordBloodPressure(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordBmi(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordViralLoad(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordMuac(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordOxygenSaturation(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordBloodSugar(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordLastMenstrualPeriod(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordDiastolicBloodPressure(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordColposcopy(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordHpv(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordVia(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	RecordPapSmear(ctx context.Context, input dto.ObservationInput) (*dto.Observation, error)
	CreatePatient(ctx context.Context, input dto.PatientInput) (*dto.Patient, error)
	PatchPatient(ctx context.Context, id string, input dto.PatientInput) (*dto.Patient, error)
	DeletePatient(ctx context.Context, id string) (bool, error)
	CreateCondition(ctx context.Context, input dto.ConditionInput) (*dto.Condition, error)
	CreateAllergyIntolerance(ctx context.Context, input dto.AllergyInput) (*dto.Allergy, error)
	CreateComposition(ctx context.Context, input dto.CompositionInput) (*dto.Composition, error)
	AppendNoteToComposition(ctx context.Context, id string, input dto.PatchCompositionInput) (*dto.Composition, error)
	PatchPatientHeight(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientWeight(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientBmi(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientTemperature(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientDiastolicBloodPressure(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientSystolicBloodPressure(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientRespiratoryRate(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientOxygenSaturation(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientPulseRate(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientViralLoad(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientMuac(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientLastMenstrualPeriod(ctx context.Context, id string, value string) (*dto.Observation, error)
	PatchPatientBloodSugar(ctx context.Context, id string, value string) (*dto.Observation, error)
	RecordConsent(ctx context.Context, input dto.ConsentInput) (*dto.ConsentOutput, error)
	CreateQuestionnaireResponse(ctx context.Context, questionnaireID string, encounterID string, input dto.QuestionnaireResponse) (string, error)
	RecordMammographyResult(ctx context.Context, input dto.DiagnosticReportInput) (*dto.DiagnosticReport, error)
	RecordBiopsy(ctx context.Context, input dto.DiagnosticReportInput) (*dto.DiagnosticReport, error)
	RecordMri(ctx context.Context, input dto.DiagnosticReportInput) (*dto.DiagnosticReport, error)
	RecordUltrasound(ctx context.Context, input dto.DiagnosticReportInput) (*dto.DiagnosticReport, error)
	RecordCbe(ctx context.Context, input dto.DiagnosticReportInput) (*dto.DiagnosticReport, error)
	GetEncounterAssociatedResources(ctx context.Context, encounterID string) (*dto.EncounterAssociatedResources, error)
}
type QueryResolver interface {
	PatientHealthTimeline(ctx context.Context, input dto.HealthTimelineInput) (*dto.HealthTimeline, error)
	GetMedicalData(ctx context.Context, patientID string) (*dto.MedicalData, error)
	GetEpisodeOfCare(ctx context.Context, id string) (*dto.EpisodeOfCare, error)
	ListPatientConditions(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ConditionConnection, error)
	ListPatientCompositions(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.CompositionConnection, error)
	ListPatientEncounters(ctx context.Context, patientID string, pagination dto.Pagination) (*dto.EncounterConnection, error)
	GetPatientTemperatureEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientBloodPressureEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientHeightEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientRespiratoryRateEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientPulseRateEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientBMIEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientWeightEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientMuacEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientOxygenSaturationEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientViralLoad(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientBloodSugarEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientLastMenstrualPeriodEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	GetPatientDiastolicBloodPressureEntries(ctx context.Context, patientID string, encounterID *string, date *scalarutils.Date, pagination dto.Pagination) (*dto.ObservationConnection, error)
	SearchAllergy(ctx context.Context, name string, pagination dto.Pagination) (*dto.TerminologyConnection, error)
	GetAllergy(ctx context.Context, id string) (*dto.Allergy, error)
	ListPatientAllergies(ctx context.Context, patientID string, pagination dto.Pagination) (*dto.AllergyConnection, error)
	ListPatientMedia(ctx context.Context, patientID string, pagination dto.Pagination) (*dto.MediaConnection, error)
	GetQuestionnaireResponseRiskLevel(ctx context.Context, encounterID string, screeningType domain.ScreeningTypeEnum) (string, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Allergy.code":
		if e.complexity.Allergy.Code == nil {
			break
		}

		return e.complexity.Allergy.Code(childComplexity), true

	case "Allergy.encounterID":
		if e.complexity.Allergy.EncounterID == nil {
			break
		}

		return e.complexity.Allergy.EncounterID(childComplexity), true

	case "Allergy.id":
		if e.complexity.Allergy.ID == nil {
			break
		}

		return e.complexity.Allergy.ID(childComplexity), true

	case "Allergy.name":
		if e.complexity.Allergy.Name == nil {
			break
		}

		return e.complexity.Allergy.Name(childComplexity), true

	case "Allergy.reaction":
		if e.complexity.Allergy.Reaction == nil {
			break
		}

		return e.complexity.Allergy.Reaction(childComplexity), true

	case "Allergy.system":
		if e.complexity.Allergy.System == nil {
			break
		}

		return e.complexity.Allergy.System(childComplexity), true

	case "Allergy.terminologySource":
		if e.complexity.Allergy.TerminologySource == nil {
			break
		}

		return e.complexity.Allergy.TerminologySource(childComplexity), true

	case "AllergyConnection.edges":
		if e.complexity.AllergyConnection.Edges == nil {
			break
		}

		return e.complexity.AllergyConnection.Edges(childComplexity), true

	case "AllergyConnection.pageInfo":
		if e.complexity.AllergyConnection.PageInfo == nil {
			break
		}

		return e.complexity.AllergyConnection.PageInfo(childComplexity), true

	case "AllergyConnection.totalCount":
		if e.complexity.AllergyConnection.TotalCount == nil {
			break
		}

		return e.complexity.AllergyConnection.TotalCount(childComplexity), true

	case "AllergyEdge.cursor":
		if e.complexity.AllergyEdge.Cursor == nil {
			break
		}

		return e.complexity.AllergyEdge.Cursor(childComplexity), true

	case "AllergyEdge.node":
		if e.complexity.AllergyEdge.Node == nil {
			break
		}

		return e.complexity.AllergyEdge.Node(childComplexity), true

	case "Annotation.AuthorReference":
		if e.complexity.Annotation.AuthorReference == nil {
			break
		}

		return e.complexity.Annotation.AuthorReference(childComplexity), true

	case "Annotation.AuthorString":
		if e.complexity.Annotation.AuthorString == nil {
			break
		}

		return e.complexity.Annotation.AuthorString(childComplexity), true

	case "Annotation.id":
		if e.complexity.Annotation.ID == nil {
			break
		}

		return e.complexity.Annotation.ID(childComplexity), true

	case "Annotation.Text":
		if e.complexity.Annotation.Text == nil {
			break
		}

		return e.complexity.Annotation.Text(childComplexity), true

	case "Annotation.Time":
		if e.complexity.Annotation.Time == nil {
			break
		}

		return e.complexity.Annotation.Time(childComplexity), true

	case "Attachment.contentType":
		if e.complexity.Attachment.ContentType == nil {
			break
		}

		return e.complexity.Attachment.ContentType(childComplexity), true

	case "Attachment.creation":
		if e.complexity.Attachment.Creation == nil {
			break
		}

		return e.complexity.Attachment.Creation(childComplexity), true

	case "Attachment.data":
		if e.complexity.Attachment.Data == nil {
			break
		}

		return e.complexity.Attachment.Data(childComplexity), true

	case "Attachment.hash":
		if e.complexity.Attachment.Hash == nil {
			break
		}

		return e.complexity.Attachment.Hash(childComplexity), true

	case "Attachment.id":
		if e.complexity.Attachment.ID == nil {
			break
		}

		return e.complexity.Attachment.ID(childComplexity), true

	case "Attachment.language":
		if e.complexity.Attachment.Language == nil {
			break
		}

		return e.complexity.Attachment.Language(childComplexity), true

	case "Attachment.size":
		if e.complexity.Attachment.Size == nil {
			break
		}

		return e.complexity.Attachment.Size(childComplexity), true

	case "Attachment.title":
		if e.complexity.Attachment.Title == nil {
			break
		}

		return e.complexity.Attachment.Title(childComplexity), true

	case "Attachment.url":
		if e.complexity.Attachment.URL == nil {
			break
		}

		return e.complexity.Attachment.URL(childComplexity), true

	case "CodeableConcept.coding":
		if e.complexity.CodeableConcept.Coding == nil {
			break
		}

		return e.complexity.CodeableConcept.Coding(childComplexity), true

	case "CodeableConcept.id":
		if e.complexity.CodeableConcept.ID == nil {
			break
		}

		return e.complexity.CodeableConcept.ID(childComplexity), true

	case "CodeableConcept.text":
		if e.complexity.CodeableConcept.Text == nil {
			break
		}

		return e.complexity.CodeableConcept.Text(childComplexity), true

	case "Coding.code":
		if e.complexity.Coding.Code == nil {
			break
		}

		return e.complexity.Coding.Code(childComplexity), true

	case "Coding.display":
		if e.complexity.Coding.Display == nil {
			break
		}

		return e.complexity.Coding.Display(childComplexity), true

	case "Coding.id":
		if e.complexity.Coding.ID == nil {
			break
		}

		return e.complexity.Coding.ID(childComplexity), true

	case "Coding.system":
		if e.complexity.Coding.System == nil {
			break
		}

		return e.complexity.Coding.System(childComplexity), true

	case "Coding.userSelected":
		if e.complexity.Coding.UserSelected == nil {
			break
		}

		return e.complexity.Coding.UserSelected(childComplexity), true

	case "Coding.version":
		if e.complexity.Coding.Version == nil {
			break
		}

		return e.complexity.Coding.Version(childComplexity), true

	case "Composition.category":
		if e.complexity.Composition.Category == nil {
			break
		}

		return e.complexity.Composition.Category(childComplexity), true

	case "Composition.date":
		if e.complexity.Composition.Date == nil {
			break
		}

		return e.complexity.Composition.Date(childComplexity), true

	case "Composition.encounterID":
		if e.complexity.Composition.EncounterID == nil {
			break
		}

		return e.complexity.Composition.EncounterID(childComplexity), true

	case "Composition.id":
		if e.complexity.Composition.ID == nil {
			break
		}

		return e.complexity.Composition.ID(childComplexity), true

	case "Composition.patientID":
		if e.complexity.Composition.PatientID == nil {
			break
		}

		return e.complexity.Composition.PatientID(childComplexity), true

	case "Composition.section":
		if e.complexity.Composition.Section == nil {
			break
		}

		return e.complexity.Composition.Section(childComplexity), true

	case "Composition.status":
		if e.complexity.Composition.Status == nil {
			break
		}

		return e.complexity.Composition.Status(childComplexity), true

	case "Composition.text":
		if e.complexity.Composition.Text == nil {
			break
		}

		return e.complexity.Composition.Text(childComplexity), true

	case "Composition.type":
		if e.complexity.Composition.Type == nil {
			break
		}

		return e.complexity.Composition.Type(childComplexity), true

	case "CompositionConnection.edges":
		if e.complexity.CompositionConnection.Edges == nil {
			break
		}

		return e.complexity.CompositionConnection.Edges(childComplexity), true

	case "CompositionConnection.pageInfo":
		if e.complexity.CompositionConnection.PageInfo == nil {
			break
		}

		return e.complexity.CompositionConnection.PageInfo(childComplexity), true

	case "CompositionConnection.totalCount":
		if e.complexity.CompositionConnection.TotalCount == nil {
			break
		}

		return e.complexity.CompositionConnection.TotalCount(childComplexity), true

	case "CompositionEdge.cursor":
		if e.complexity.CompositionEdge.Cursor == nil {
			break
		}

		return e.complexity.CompositionEdge.Cursor(childComplexity), true

	case "CompositionEdge.node":
		if e.complexity.CompositionEdge.Node == nil {
			break
		}

		return e.complexity.CompositionEdge.Node(childComplexity), true

	case "Condition.category":
		if e.complexity.Condition.Category == nil {
			break
		}

		return e.complexity.Condition.Category(childComplexity), true

	case "Condition.code":
		if e.complexity.Condition.Code == nil {
			break
		}

		return e.complexity.Condition.Code(childComplexity), true

	case "Condition.encounterID":
		if e.complexity.Condition.EncounterID == nil {
			break
		}

		return e.complexity.Condition.EncounterID(childComplexity), true

	case "Condition.id":
		if e.complexity.Condition.ID == nil {
			break
		}

		return e.complexity.Condition.ID(childComplexity), true

	case "Condition.name":
		if e.complexity.Condition.Name == nil {
			break
		}

		return e.complexity.Condition.Name(childComplexity), true

	case "Condition.note":
		if e.complexity.Condition.Note == nil {
			break
		}

		return e.complexity.Condition.Note(childComplexity), true

	case "Condition.onsetDate":
		if e.complexity.Condition.OnsetDate == nil {
			break
		}

		return e.complexity.Condition.OnsetDate(childComplexity), true

	case "Condition.patientID":
		if e.complexity.Condition.PatientID == nil {
			break
		}

		return e.complexity.Condition.PatientID(childComplexity), true

	case "Condition.recordedDate":
		if e.complexity.Condition.RecordedDate == nil {
			break
		}

		return e.complexity.Condition.RecordedDate(childComplexity), true

	case "Condition.status":
		if e.complexity.Condition.Status == nil {
			break
		}

		return e.complexity.Condition.Status(childComplexity), true

	case "Condition.system":
		if e.complexity.Condition.System == nil {
			break
		}

		return e.complexity.Condition.System(childComplexity), true

	case "ConditionConnection.edges":
		if e.complexity.ConditionConnection.Edges == nil {
			break
		}

		return e.complexity.ConditionConnection.Edges(childComplexity), true

	case "ConditionConnection.pageInfo":
		if e.complexity.ConditionConnection.PageInfo == nil {
			break
		}

		return e.complexity.ConditionConnection.PageInfo(childComplexity), true

	case "ConditionConnection.totalCount":
		if e.complexity.ConditionConnection.TotalCount == nil {
			break
		}

		return e.complexity.ConditionConnection.TotalCount(childComplexity), true

	case "ConditionEdge.cursor":
		if e.complexity.ConditionEdge.Cursor == nil {
			break
		}

		return e.complexity.ConditionEdge.Cursor(childComplexity), true

	case "ConditionEdge.node":
		if e.complexity.ConditionEdge.Node == nil {
			break
		}

		return e.complexity.ConditionEdge.Node(childComplexity), true

	case "Consent.id":
		if e.complexity.Consent.ID == nil {
			break
		}

		return e.complexity.Consent.ID(childComplexity), true

	case "Consent.patient":
		if e.complexity.Consent.Patient == nil {
			break
		}

		return e.complexity.Consent.Patient(childComplexity), true

	case "Consent.provision":
		if e.complexity.Consent.Provision == nil {
			break
		}

		return e.complexity.Consent.Provision(childComplexity), true

	case "Consent.status":
		if e.complexity.Consent.Status == nil {
			break
		}

		return e.complexity.Consent.Status(childComplexity), true

	case "ConsentOutput.status":
		if e.complexity.ConsentOutput.Status == nil {
			break
		}

		return e.complexity.ConsentOutput.Status(childComplexity), true

	case "ConsentProvision.id":
		if e.complexity.ConsentProvision.ID == nil {
			break
		}

		return e.complexity.ConsentProvision.ID(childComplexity), true

	case "ConsentProvision.type":
		if e.complexity.ConsentProvision.Type == nil {
			break
		}

		return e.complexity.ConsentProvision.Type(childComplexity), true

	case "DiagnosticReport.conclusion":
		if e.complexity.DiagnosticReport.Conclusion == nil {
			break
		}

		return e.complexity.DiagnosticReport.Conclusion(childComplexity), true

	case "DiagnosticReport.encounterID":
		if e.complexity.DiagnosticReport.EncounterID == nil {
			break
		}

		return e.complexity.DiagnosticReport.EncounterID(childComplexity), true

	case "DiagnosticReport.id":
		if e.complexity.DiagnosticReport.ID == nil {
			break
		}

		return e.complexity.DiagnosticReport.ID(childComplexity), true

	case "DiagnosticReport.issued":
		if e.complexity.DiagnosticReport.Issued == nil {
			break
		}

		return e.complexity.DiagnosticReport.Issued(childComplexity), true

	case "DiagnosticReport.media":
		if e.complexity.DiagnosticReport.Media == nil {
			break
		}

		return e.complexity.DiagnosticReport.Media(childComplexity), true

	case "DiagnosticReport.patientID":
		if e.complexity.DiagnosticReport.PatientID == nil {
			break
		}

		return e.complexity.DiagnosticReport.PatientID(childComplexity), true

	case "DiagnosticReport.result":
		if e.complexity.DiagnosticReport.Result == nil {
			break
		}

		return e.complexity.DiagnosticReport.Result(childComplexity), true

	case "DiagnosticReport.status":
		if e.complexity.DiagnosticReport.Status == nil {
			break
		}

		return e.complexity.DiagnosticReport.Status(childComplexity), true

	case "Encounter.class":
		if e.complexity.Encounter.Class == nil {
			break
		}

		return e.complexity.Encounter.Class(childComplexity), true

	case "Encounter.episodeOfCareID":
		if e.complexity.Encounter.EpisodeOfCareID == nil {
			break
		}

		return e.complexity.Encounter.EpisodeOfCareID(childComplexity), true

	case "Encounter.id":
		if e.complexity.Encounter.ID == nil {
			break
		}

		return e.complexity.Encounter.ID(childComplexity), true

	case "Encounter.patientID":
		if e.complexity.Encounter.PatientID == nil {
			break
		}

		return e.complexity.Encounter.PatientID(childComplexity), true

	case "Encounter.status":
		if e.complexity.Encounter.Status == nil {
			break
		}

		return e.complexity.Encounter.Status(childComplexity), true

	case "EncounterAssociatedResources.consent":
		if e.complexity.EncounterAssociatedResources.Consent == nil {
			break
		}

		return e.complexity.EncounterAssociatedResources.Consent(childComplexity), true

	case "EncounterAssociatedResources.riskAssessment":
		if e.complexity.EncounterAssociatedResources.RiskAssessment == nil {
			break
		}

		return e.complexity.EncounterAssociatedResources.RiskAssessment(childComplexity), true

	case "EncounterClass.code":
		if e.complexity.EncounterClass.Code == nil {
			break
		}

		return e.complexity.EncounterClass.Code(childComplexity), true

	case "EncounterClass.display":
		if e.complexity.EncounterClass.Display == nil {
			break
		}

		return e.complexity.EncounterClass.Display(childComplexity), true

	case "EncounterConnection.edges":
		if e.complexity.EncounterConnection.Edges == nil {
			break
		}

		return e.complexity.EncounterConnection.Edges(childComplexity), true

	case "EncounterConnection.pageInfo":
		if e.complexity.EncounterConnection.PageInfo == nil {
			break
		}

		return e.complexity.EncounterConnection.PageInfo(childComplexity), true

	case "EncounterConnection.totalCount":
		if e.complexity.EncounterConnection.TotalCount == nil {
			break
		}

		return e.complexity.EncounterConnection.TotalCount(childComplexity), true

	case "EncounterEdge.cursor":
		if e.complexity.EncounterEdge.Cursor == nil {
			break
		}

		return e.complexity.EncounterEdge.Cursor(childComplexity), true

	case "EncounterEdge.node":
		if e.complexity.EncounterEdge.Node == nil {
			break
		}

		return e.complexity.EncounterEdge.Node(childComplexity), true

	case "EpisodeOfCare.id":
		if e.complexity.EpisodeOfCare.ID == nil {
			break
		}

		return e.complexity.EpisodeOfCare.ID(childComplexity), true

	case "EpisodeOfCare.patientID":
		if e.complexity.EpisodeOfCare.PatientID == nil {
			break
		}

		return e.complexity.EpisodeOfCare.PatientID(childComplexity), true

	case "EpisodeOfCare.status":
		if e.complexity.EpisodeOfCare.Status == nil {
			break
		}

		return e.complexity.EpisodeOfCare.Status(childComplexity), true

	case "Extension.url":
		if e.complexity.Extension.URL == nil {
			break
		}

		return e.complexity.Extension.URL(childComplexity), true

	case "Extension.valueAnnotation":
		if e.complexity.Extension.ValueAnnotation == nil {
			break
		}

		return e.complexity.Extension.ValueAnnotation(childComplexity), true

	case "Extension.valueAttachment":
		if e.complexity.Extension.ValueAttachment == nil {
			break
		}

		return e.complexity.Extension.ValueAttachment(childComplexity), true

	case "Extension.valueBase64Binary":
		if e.complexity.Extension.ValueBase64Binary == nil {
			break
		}

		return e.complexity.Extension.ValueBase64Binary(childComplexity), true

	case "Extension.valueBoolean":
		if e.complexity.Extension.ValueBoolean == nil {
			break
		}

		return e.complexity.Extension.ValueBoolean(childComplexity), true

	case "Extension.valueCode":
		if e.complexity.Extension.ValueCode == nil {
			break
		}

		return e.complexity.Extension.ValueCode(childComplexity), true

	case "Extension.valueCodeableConcept":
		if e.complexity.Extension.ValueCodeableConcept == nil {
			break
		}

		return e.complexity.Extension.ValueCodeableConcept(childComplexity), true

	case "Extension.valueCoding":
		if e.complexity.Extension.ValueCoding == nil {
			break
		}

		return e.complexity.Extension.ValueCoding(childComplexity), true

	case "Extension.valueDate":
		if e.complexity.Extension.ValueDate == nil {
			break
		}

		return e.complexity.Extension.ValueDate(childComplexity), true

	case "Extension.valueDateTime":
		if e.complexity.Extension.ValueDateTime == nil {
			break
		}

		return e.complexity.Extension.ValueDateTime(childComplexity), true

	case "Extension.valueDecimal":
		if e.complexity.Extension.ValueDecimal == nil {
			break
		}

		return e.complexity.Extension.ValueDecimal(childComplexity), true

	case "Extension.valueID":
		if e.complexity.Extension.ValueID == nil {
			break
		}

		return e.complexity.Extension.ValueID(childComplexity), true

	case "Extension.valueIdentifier":
		if e.complexity.Extension.ValueIdentifier == nil {
			break
		}

		return e.complexity.Extension.ValueIdentifier(childComplexity), true

	case "Extension.valueInstant":
		if e.complexity.Extension.ValueInstant == nil {
			break
		}

		return e.complexity.Extension.ValueInstant(childComplexity), true

	case "Extension.valueInteger":
		if e.complexity.Extension.ValueInteger == nil {
			break
		}

		return e.complexity.Extension.ValueInteger(childComplexity), true

	case "Extension.valueMarkdown":
		if e.complexity.Extension.ValueMarkdown == nil {
			break
		}

		return e.complexity.Extension.ValueMarkdown(childComplexity), true

	case "Extension.valueOid":
		if e.complexity.Extension.ValueOid == nil {
			break
		}

		return e.complexity.Extension.ValueOid(childComplexity), true

	case "Extension.valuePeriod":
		if e.complexity.Extension.ValuePeriod == nil {
			break
		}

		return e.complexity.Extension.ValuePeriod(childComplexity), true

	case "Extension.valuePositiveInt":
		if e.complexity.Extension.ValuePositiveInt == nil {
			break
		}

		return e.complexity.Extension.ValuePositiveInt(childComplexity), true

	case "Extension.valueQuantity":
		if e.complexity.Extension.ValueQuantity == nil {
			break
		}

		return e.complexity.Extension.ValueQuantity(childComplexity), true

	case "Extension.valueRange":
		if e.complexity.Extension.ValueRange == nil {
			break
		}

		return e.complexity.Extension.ValueRange(childComplexity), true

	case "Extension.valueRatio":
		if e.complexity.Extension.ValueRatio == nil {
			break
		}

		return e.complexity.Extension.ValueRatio(childComplexity), true

	case "Extension.valueReference":
		if e.complexity.Extension.ValueReference == nil {
			break
		}

		return e.complexity.Extension.ValueReference(childComplexity), true

	case "Extension.valueString":
		if e.complexity.Extension.ValueString == nil {
			break
		}

		return e.complexity.Extension.ValueString(childComplexity), true

	case "Extension.valueTime":
		if e.complexity.Extension.ValueTime == nil {
			break
		}

		return e.complexity.Extension.ValueTime(childComplexity), true

	case "Extension.valueURI":
		if e.complexity.Extension.ValueURI == nil {
			break
		}

		return e.complexity.Extension.ValueURI(childComplexity), true

	case "Extension.valueUUID":
		if e.complexity.Extension.ValueUUID == nil {
			break
		}

		return e.complexity.Extension.ValueUUID(childComplexity), true

	case "Extension.valueUnsignedInt":
		if e.complexity.Extension.ValueUnsignedInt == nil {
			break
		}

		return e.complexity.Extension.ValueUnsignedInt(childComplexity), true

	case "HealthTimeline.timeline":
		if e.complexity.HealthTimeline.Timeline == nil {
			break
		}

		return e.complexity.HealthTimeline.Timeline(childComplexity), true

	case "HealthTimeline.totalCount":
		if e.complexity.HealthTimeline.TotalCount == nil {
			break
		}

		return e.complexity.HealthTimeline.TotalCount(childComplexity), true

	case "Identifier.assigner":
		if e.complexity.Identifier.Assigner == nil {
			break
		}

		return e.complexity.Identifier.Assigner(childComplexity), true

	case "Identifier.id":
		if e.complexity.Identifier.ID == nil {
			break
		}

		return e.complexity.Identifier.ID(childComplexity), true

	case "Identifier.period":
		if e.complexity.Identifier.Period == nil {
			break
		}

		return e.complexity.Identifier.Period(childComplexity), true

	case "Identifier.system":
		if e.complexity.Identifier.System == nil {
			break
		}

		return e.complexity.Identifier.System(childComplexity), true

	case "Identifier.type":
		if e.complexity.Identifier.Type == nil {
			break
		}

		return e.complexity.Identifier.Type(childComplexity), true

	case "Identifier.use":
		if e.complexity.Identifier.Use == nil {
			break
		}

		return e.complexity.Identifier.Use(childComplexity), true

	case "Identifier.value":
		if e.complexity.Identifier.Value == nil {
			break
		}

		return e.complexity.Identifier.Value(childComplexity), true

	case "Media.contentType":
		if e.complexity.Media.ContentType == nil {
			break
		}

		return e.complexity.Media.ContentType(childComplexity), true

	case "Media.id":
		if e.complexity.Media.ID == nil {
			break
		}

		return e.complexity.Media.ID(childComplexity), true

	case "Media.name":
		if e.complexity.Media.Name == nil {
			break
		}

		return e.complexity.Media.Name(childComplexity), true

	case "Media.url":
		if e.complexity.Media.URL == nil {
			break
		}

		return e.complexity.Media.URL(childComplexity), true

	case "MediaConnection.edges":
		if e.complexity.MediaConnection.Edges == nil {
			break
		}

		return e.complexity.MediaConnection.Edges(childComplexity), true

	case "MediaConnection.pageInfo":
		if e.complexity.MediaConnection.PageInfo == nil {
			break
		}

		return e.complexity.MediaConnection.PageInfo(childComplexity), true

	case "MediaConnection.totalCount":
		if e.complexity.MediaConnection.TotalCount == nil {
			break
		}

		return e.complexity.MediaConnection.TotalCount(childComplexity), true

	case "MediaEdge.cursor":
		if e.complexity.MediaEdge.Cursor == nil {
			break
		}

		return e.complexity.MediaEdge.Cursor(childComplexity), true

	case "MediaEdge.node":
		if e.complexity.MediaEdge.Node == nil {
			break
		}

		return e.complexity.MediaEdge.Node(childComplexity), true

	case "MedicalData.allergies":
		if e.complexity.MedicalData.Allergies == nil {
			break
		}

		return e.complexity.MedicalData.Allergies(childComplexity), true

	case "MedicalData.bmi":
		if e.complexity.MedicalData.BMI == nil {
			break
		}

		return e.complexity.MedicalData.BMI(childComplexity), true

	case "MedicalData.cd4Count":
		if e.complexity.MedicalData.CD4Count == nil {
			break
		}

		return e.complexity.MedicalData.CD4Count(childComplexity), true

	case "MedicalData.regimen":
		if e.complexity.MedicalData.Regimen == nil {
			break
		}

		return e.complexity.MedicalData.Regimen(childComplexity), true

	case "MedicalData.viralLoad":
		if e.complexity.MedicalData.ViralLoad == nil {
			break
		}

		return e.complexity.MedicalData.ViralLoad(childComplexity), true

	case "MedicalData.weight":
		if e.complexity.MedicalData.Weight == nil {
			break
		}

		return e.complexity.MedicalData.Weight(childComplexity), true

	case "Medication.code":
		if e.complexity.Medication.Code == nil {
			break
		}

		return e.complexity.Medication.Code(childComplexity), true

	case "Medication.name":
		if e.complexity.Medication.Name == nil {
			break
		}

		return e.complexity.Medication.Name(childComplexity), true

	case "MedicationStatement.id":
		if e.complexity.MedicationStatement.ID == nil {
			break
		}

		return e.complexity.MedicationStatement.ID(childComplexity), true

	case "MedicationStatement.medication":
		if e.complexity.MedicationStatement.Medication == nil {
			break
		}

		return e.complexity.MedicationStatement.Medication(childComplexity), true

	case "MedicationStatement.patientID":
		if e.complexity.MedicationStatement.PatientID == nil {
			break
		}

		return e.complexity.MedicationStatement.PatientID(childComplexity), true

	case "MedicationStatement.status":
		if e.complexity.MedicationStatement.Status == nil {
			break
		}

		return e.complexity.MedicationStatement.Status(childComplexity), true

	case "Meta.security":
		if e.complexity.Meta.Security == nil {
			break
		}

		return e.complexity.Meta.Security(childComplexity), true

	case "Meta.source":
		if e.complexity.Meta.Source == nil {
			break
		}

		return e.complexity.Meta.Source(childComplexity), true

	case "Meta.tag":
		if e.complexity.Meta.Tag == nil {
			break
		}

		return e.complexity.Meta.Tag(childComplexity), true

	case "Meta.versionId":
		if e.complexity.Meta.VersionID == nil {
			break
		}

		return e.complexity.Meta.VersionID(childComplexity), true

	case "Mutation.appendNoteToComposition":
		if e.complexity.Mutation.AppendNoteToComposition == nil {
			break
		}

		args, err := ec.field_Mutation_appendNoteToComposition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AppendNoteToComposition(childComplexity, args["id"].(string), args["input"].(dto.PatchCompositionInput)), true

	case "Mutation.createAllergyIntolerance":
		if e.complexity.Mutation.CreateAllergyIntolerance == nil {
			break
		}

		args, err := ec.field_Mutation_createAllergyIntolerance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAllergyIntolerance(childComplexity, args["input"].(dto.AllergyInput)), true

	case "Mutation.createComposition":
		if e.complexity.Mutation.CreateComposition == nil {
			break
		}

		args, err := ec.field_Mutation_createComposition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateComposition(childComplexity, args["input"].(dto.CompositionInput)), true

	case "Mutation.createCondition":
		if e.complexity.Mutation.CreateCondition == nil {
			break
		}

		args, err := ec.field_Mutation_createCondition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCondition(childComplexity, args["input"].(dto.ConditionInput)), true

	case "Mutation.createEpisodeOfCare":
		if e.complexity.Mutation.CreateEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Mutation_createEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEpisodeOfCare(childComplexity, args["episodeOfCare"].(dto.EpisodeOfCareInput)), true

	case "Mutation.createPatient":
		if e.complexity.Mutation.CreatePatient == nil {
			break
		}

		args, err := ec.field_Mutation_createPatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePatient(childComplexity, args["input"].(dto.PatientInput)), true

	case "Mutation.createQuestionnaireResponse":
		if e.complexity.Mutation.CreateQuestionnaireResponse == nil {
			break
		}

		args, err := ec.field_Mutation_createQuestionnaireResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateQuestionnaireResponse(childComplexity, args["questionnaireID"].(string), args["encounterID"].(string), args["input"].(dto.QuestionnaireResponse)), true

	case "Mutation.deletePatient":
		if e.complexity.Mutation.DeletePatient == nil {
			break
		}

		args, err := ec.field_Mutation_deletePatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePatient(childComplexity, args["id"].(string)), true

	case "Mutation.endEncounter":
		if e.complexity.Mutation.EndEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_endEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndEncounter(childComplexity, args["encounterID"].(string)), true

	case "Mutation.endEpisodeOfCare":
		if e.complexity.Mutation.EndEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Mutation_endEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EndEpisodeOfCare(childComplexity, args["id"].(string)), true

	case "Mutation.getEncounterAssociatedResources":
		if e.complexity.Mutation.GetEncounterAssociatedResources == nil {
			break
		}

		args, err := ec.field_Mutation_getEncounterAssociatedResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GetEncounterAssociatedResources(childComplexity, args["encounterID"].(string)), true

	case "Mutation.patchEncounter":
		if e.complexity.Mutation.PatchEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_patchEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchEncounter(childComplexity, args["encounterID"].(string), args["input"].(dto.EncounterInput)), true

	case "Mutation.patchEpisodeOfCare":
		if e.complexity.Mutation.PatchEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Mutation_patchEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchEpisodeOfCare(childComplexity, args["id"].(string), args["episodeOfCare"].(dto.EpisodeOfCareInput)), true

	case "Mutation.patchPatient":
		if e.complexity.Mutation.PatchPatient == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatient(childComplexity, args["id"].(string), args["input"].(dto.PatientInput)), true

	case "Mutation.patchPatientBloodSugar":
		if e.complexity.Mutation.PatchPatientBloodSugar == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientBloodSugar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientBloodSugar(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientBMI":
		if e.complexity.Mutation.PatchPatientBmi == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientBMI_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientBmi(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientDiastolicBloodPressure":
		if e.complexity.Mutation.PatchPatientDiastolicBloodPressure == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientDiastolicBloodPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientDiastolicBloodPressure(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientHeight":
		if e.complexity.Mutation.PatchPatientHeight == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientHeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientHeight(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientLastMenstrualPeriod":
		if e.complexity.Mutation.PatchPatientLastMenstrualPeriod == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientLastMenstrualPeriod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientLastMenstrualPeriod(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientMuac":
		if e.complexity.Mutation.PatchPatientMuac == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientMuac_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientMuac(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientOxygenSaturation":
		if e.complexity.Mutation.PatchPatientOxygenSaturation == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientOxygenSaturation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientOxygenSaturation(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientPulseRate":
		if e.complexity.Mutation.PatchPatientPulseRate == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientPulseRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientPulseRate(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientRespiratoryRate":
		if e.complexity.Mutation.PatchPatientRespiratoryRate == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientRespiratoryRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientRespiratoryRate(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientSystolicBloodPressure":
		if e.complexity.Mutation.PatchPatientSystolicBloodPressure == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientSystolicBloodPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientSystolicBloodPressure(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientTemperature":
		if e.complexity.Mutation.PatchPatientTemperature == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientTemperature_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientTemperature(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientViralLoad":
		if e.complexity.Mutation.PatchPatientViralLoad == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientViralLoad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientViralLoad(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.patchPatientWeight":
		if e.complexity.Mutation.PatchPatientWeight == nil {
			break
		}

		args, err := ec.field_Mutation_patchPatientWeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchPatientWeight(childComplexity, args["id"].(string), args["value"].(string)), true

	case "Mutation.recordBiopsy":
		if e.complexity.Mutation.RecordBiopsy == nil {
			break
		}

		args, err := ec.field_Mutation_recordBiopsy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordBiopsy(childComplexity, args["input"].(dto.DiagnosticReportInput)), true

	case "Mutation.recordBloodPressure":
		if e.complexity.Mutation.RecordBloodPressure == nil {
			break
		}

		args, err := ec.field_Mutation_recordBloodPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordBloodPressure(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordBloodSugar":
		if e.complexity.Mutation.RecordBloodSugar == nil {
			break
		}

		args, err := ec.field_Mutation_recordBloodSugar_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordBloodSugar(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordBMI":
		if e.complexity.Mutation.RecordBmi == nil {
			break
		}

		args, err := ec.field_Mutation_recordBMI_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordBmi(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordCBE":
		if e.complexity.Mutation.RecordCbe == nil {
			break
		}

		args, err := ec.field_Mutation_recordCBE_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordCbe(childComplexity, args["input"].(dto.DiagnosticReportInput)), true

	case "Mutation.recordColposcopy":
		if e.complexity.Mutation.RecordColposcopy == nil {
			break
		}

		args, err := ec.field_Mutation_recordColposcopy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordColposcopy(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordConsent":
		if e.complexity.Mutation.RecordConsent == nil {
			break
		}

		args, err := ec.field_Mutation_recordConsent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordConsent(childComplexity, args["input"].(dto.ConsentInput)), true

	case "Mutation.recordDiastolicBloodPressure":
		if e.complexity.Mutation.RecordDiastolicBloodPressure == nil {
			break
		}

		args, err := ec.field_Mutation_recordDiastolicBloodPressure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordDiastolicBloodPressure(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordHeight":
		if e.complexity.Mutation.RecordHeight == nil {
			break
		}

		args, err := ec.field_Mutation_recordHeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordHeight(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordHPV":
		if e.complexity.Mutation.RecordHpv == nil {
			break
		}

		args, err := ec.field_Mutation_recordHPV_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordHpv(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordLastMenstrualPeriod":
		if e.complexity.Mutation.RecordLastMenstrualPeriod == nil {
			break
		}

		args, err := ec.field_Mutation_recordLastMenstrualPeriod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordLastMenstrualPeriod(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordMammographyResult":
		if e.complexity.Mutation.RecordMammographyResult == nil {
			break
		}

		args, err := ec.field_Mutation_recordMammographyResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordMammographyResult(childComplexity, args["input"].(dto.DiagnosticReportInput)), true

	case "Mutation.recordMRI":
		if e.complexity.Mutation.RecordMri == nil {
			break
		}

		args, err := ec.field_Mutation_recordMRI_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordMri(childComplexity, args["input"].(dto.DiagnosticReportInput)), true

	case "Mutation.recordMUAC":
		if e.complexity.Mutation.RecordMuac == nil {
			break
		}

		args, err := ec.field_Mutation_recordMUAC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordMuac(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordOxygenSaturation":
		if e.complexity.Mutation.RecordOxygenSaturation == nil {
			break
		}

		args, err := ec.field_Mutation_recordOxygenSaturation_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordOxygenSaturation(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordPapSmear":
		if e.complexity.Mutation.RecordPapSmear == nil {
			break
		}

		args, err := ec.field_Mutation_recordPapSmear_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordPapSmear(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordPulseRate":
		if e.complexity.Mutation.RecordPulseRate == nil {
			break
		}

		args, err := ec.field_Mutation_recordPulseRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordPulseRate(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordRespiratoryRate":
		if e.complexity.Mutation.RecordRespiratoryRate == nil {
			break
		}

		args, err := ec.field_Mutation_recordRespiratoryRate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordRespiratoryRate(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordTemperature":
		if e.complexity.Mutation.RecordTemperature == nil {
			break
		}

		args, err := ec.field_Mutation_recordTemperature_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordTemperature(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordUltrasound":
		if e.complexity.Mutation.RecordUltrasound == nil {
			break
		}

		args, err := ec.field_Mutation_recordUltrasound_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordUltrasound(childComplexity, args["input"].(dto.DiagnosticReportInput)), true

	case "Mutation.recordVIA":
		if e.complexity.Mutation.RecordVia == nil {
			break
		}

		args, err := ec.field_Mutation_recordVIA_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordVia(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordViralLoad":
		if e.complexity.Mutation.RecordViralLoad == nil {
			break
		}

		args, err := ec.field_Mutation_recordViralLoad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordViralLoad(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.recordWeight":
		if e.complexity.Mutation.RecordWeight == nil {
			break
		}

		args, err := ec.field_Mutation_recordWeight_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordWeight(childComplexity, args["input"].(dto.ObservationInput)), true

	case "Mutation.startEncounter":
		if e.complexity.Mutation.StartEncounter == nil {
			break
		}

		args, err := ec.field_Mutation_startEncounter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartEncounter(childComplexity, args["episodeID"].(string)), true

	case "Narrative.div":
		if e.complexity.Narrative.Div == nil {
			break
		}

		return e.complexity.Narrative.Div(childComplexity), true

	case "Narrative.id":
		if e.complexity.Narrative.ID == nil {
			break
		}

		return e.complexity.Narrative.ID(childComplexity), true

	case "Narrative.status":
		if e.complexity.Narrative.Status == nil {
			break
		}

		return e.complexity.Narrative.Status(childComplexity), true

	case "Observation.encounterID":
		if e.complexity.Observation.EncounterID == nil {
			break
		}

		return e.complexity.Observation.EncounterID(childComplexity), true

	case "Observation.id":
		if e.complexity.Observation.ID == nil {
			break
		}

		return e.complexity.Observation.ID(childComplexity), true

	case "Observation.interpretation":
		if e.complexity.Observation.Interpretation == nil {
			break
		}

		return e.complexity.Observation.Interpretation(childComplexity), true

	case "Observation.name":
		if e.complexity.Observation.Name == nil {
			break
		}

		return e.complexity.Observation.Name(childComplexity), true

	case "Observation.note":
		if e.complexity.Observation.Note == nil {
			break
		}

		return e.complexity.Observation.Note(childComplexity), true

	case "Observation.patientID":
		if e.complexity.Observation.PatientID == nil {
			break
		}

		return e.complexity.Observation.PatientID(childComplexity), true

	case "Observation.status":
		if e.complexity.Observation.Status == nil {
			break
		}

		return e.complexity.Observation.Status(childComplexity), true

	case "Observation.timeRecorded":
		if e.complexity.Observation.TimeRecorded == nil {
			break
		}

		return e.complexity.Observation.TimeRecorded(childComplexity), true

	case "Observation.value":
		if e.complexity.Observation.Value == nil {
			break
		}

		return e.complexity.Observation.Value(childComplexity), true

	case "ObservationConnection.edges":
		if e.complexity.ObservationConnection.Edges == nil {
			break
		}

		return e.complexity.ObservationConnection.Edges(childComplexity), true

	case "ObservationConnection.pageInfo":
		if e.complexity.ObservationConnection.PageInfo == nil {
			break
		}

		return e.complexity.ObservationConnection.PageInfo(childComplexity), true

	case "ObservationConnection.totalCount":
		if e.complexity.ObservationConnection.TotalCount == nil {
			break
		}

		return e.complexity.ObservationConnection.TotalCount(childComplexity), true

	case "ObservationEdge.cursor":
		if e.complexity.ObservationEdge.Cursor == nil {
			break
		}

		return e.complexity.ObservationEdge.Cursor(childComplexity), true

	case "ObservationEdge.node":
		if e.complexity.ObservationEdge.Node == nil {
			break
		}

		return e.complexity.ObservationEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Patient.active":
		if e.complexity.Patient.Active == nil {
			break
		}

		return e.complexity.Patient.Active(childComplexity), true

	case "Patient.birthDate":
		if e.complexity.Patient.BirthDate == nil {
			break
		}

		return e.complexity.Patient.BirthDate(childComplexity), true

	case "Patient.gender":
		if e.complexity.Patient.Gender == nil {
			break
		}

		return e.complexity.Patient.Gender(childComplexity), true

	case "Patient.id":
		if e.complexity.Patient.ID == nil {
			break
		}

		return e.complexity.Patient.ID(childComplexity), true

	case "Patient.name":
		if e.complexity.Patient.Name == nil {
			break
		}

		return e.complexity.Patient.Name(childComplexity), true

	case "Patient.phoneNumber":
		if e.complexity.Patient.PhoneNumber == nil {
			break
		}

		return e.complexity.Patient.PhoneNumber(childComplexity), true

	case "Period.end":
		if e.complexity.Period.End == nil {
			break
		}

		return e.complexity.Period.End(childComplexity), true

	case "Period.id":
		if e.complexity.Period.ID == nil {
			break
		}

		return e.complexity.Period.ID(childComplexity), true

	case "Period.start":
		if e.complexity.Period.Start == nil {
			break
		}

		return e.complexity.Period.Start(childComplexity), true

	case "Quantity.code":
		if e.complexity.Quantity.Code == nil {
			break
		}

		return e.complexity.Quantity.Code(childComplexity), true

	case "Quantity.comparator":
		if e.complexity.Quantity.Comparator == nil {
			break
		}

		return e.complexity.Quantity.Comparator(childComplexity), true

	case "Quantity.system":
		if e.complexity.Quantity.System == nil {
			break
		}

		return e.complexity.Quantity.System(childComplexity), true

	case "Quantity.unit":
		if e.complexity.Quantity.Unit == nil {
			break
		}

		return e.complexity.Quantity.Unit(childComplexity), true

	case "Quantity.value":
		if e.complexity.Quantity.Value == nil {
			break
		}

		return e.complexity.Quantity.Value(childComplexity), true

	case "Query.getAllergy":
		if e.complexity.Query.GetAllergy == nil {
			break
		}

		args, err := ec.field_Query_getAllergy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllergy(childComplexity, args["id"].(string)), true

	case "Query.getEpisodeOfCare":
		if e.complexity.Query.GetEpisodeOfCare == nil {
			break
		}

		args, err := ec.field_Query_getEpisodeOfCare_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetEpisodeOfCare(childComplexity, args["id"].(string)), true

	case "Query.getMedicalData":
		if e.complexity.Query.GetMedicalData == nil {
			break
		}

		args, err := ec.field_Query_getMedicalData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMedicalData(childComplexity, args["patientID"].(string)), true

	case "Query.getPatientBMIEntries":
		if e.complexity.Query.GetPatientBMIEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientBMIEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientBMIEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientBloodPressureEntries":
		if e.complexity.Query.GetPatientBloodPressureEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientBloodPressureEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientBloodPressureEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientBloodSugarEntries":
		if e.complexity.Query.GetPatientBloodSugarEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientBloodSugarEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientBloodSugarEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientDiastolicBloodPressureEntries":
		if e.complexity.Query.GetPatientDiastolicBloodPressureEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientDiastolicBloodPressureEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientDiastolicBloodPressureEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientHeightEntries":
		if e.complexity.Query.GetPatientHeightEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientHeightEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientHeightEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientLastMenstrualPeriodEntries":
		if e.complexity.Query.GetPatientLastMenstrualPeriodEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientLastMenstrualPeriodEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientLastMenstrualPeriodEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientMuacEntries":
		if e.complexity.Query.GetPatientMuacEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientMuacEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientMuacEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientOxygenSaturationEntries":
		if e.complexity.Query.GetPatientOxygenSaturationEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientOxygenSaturationEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientOxygenSaturationEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientPulseRateEntries":
		if e.complexity.Query.GetPatientPulseRateEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientPulseRateEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientPulseRateEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientRespiratoryRateEntries":
		if e.complexity.Query.GetPatientRespiratoryRateEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientRespiratoryRateEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientRespiratoryRateEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientTemperatureEntries":
		if e.complexity.Query.GetPatientTemperatureEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientTemperatureEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientTemperatureEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientViralLoad":
		if e.complexity.Query.GetPatientViralLoad == nil {
			break
		}

		args, err := ec.field_Query_getPatientViralLoad_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientViralLoad(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getPatientWeightEntries":
		if e.complexity.Query.GetPatientWeightEntries == nil {
			break
		}

		args, err := ec.field_Query_getPatientWeightEntries_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetPatientWeightEntries(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.getQuestionnaireResponseRiskLevel":
		if e.complexity.Query.GetQuestionnaireResponseRiskLevel == nil {
			break
		}

		args, err := ec.field_Query_getQuestionnaireResponseRiskLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetQuestionnaireResponseRiskLevel(childComplexity, args["encounterID"].(string), args["screeningType"].(domain.ScreeningTypeEnum)), true

	case "Query.listPatientAllergies":
		if e.complexity.Query.ListPatientAllergies == nil {
			break
		}

		args, err := ec.field_Query_listPatientAllergies_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPatientAllergies(childComplexity, args["patientID"].(string), args["pagination"].(dto.Pagination)), true

	case "Query.listPatientCompositions":
		if e.complexity.Query.ListPatientCompositions == nil {
			break
		}

		args, err := ec.field_Query_listPatientCompositions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPatientCompositions(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.listPatientConditions":
		if e.complexity.Query.ListPatientConditions == nil {
			break
		}

		args, err := ec.field_Query_listPatientConditions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPatientConditions(childComplexity, args["patientID"].(string), args["encounterID"].(*string), args["date"].(*scalarutils.Date), args["pagination"].(dto.Pagination)), true

	case "Query.listPatientEncounters":
		if e.complexity.Query.ListPatientEncounters == nil {
			break
		}

		args, err := ec.field_Query_listPatientEncounters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPatientEncounters(childComplexity, args["patientID"].(string), args["pagination"].(dto.Pagination)), true

	case "Query.listPatientMedia":
		if e.complexity.Query.ListPatientMedia == nil {
			break
		}

		args, err := ec.field_Query_listPatientMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListPatientMedia(childComplexity, args["patientID"].(string), args["pagination"].(dto.Pagination)), true

	case "Query.patientHealthTimeline":
		if e.complexity.Query.PatientHealthTimeline == nil {
			break
		}

		args, err := ec.field_Query_patientHealthTimeline_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PatientHealthTimeline(childComplexity, args["input"].(dto.HealthTimelineInput)), true

	case "Query.searchAllergy":
		if e.complexity.Query.SearchAllergy == nil {
			break
		}

		args, err := ec.field_Query_searchAllergy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchAllergy(childComplexity, args["name"].(string), args["pagination"].(dto.Pagination)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Questionnaire.code":
		if e.complexity.Questionnaire.Code == nil {
			break
		}

		return e.complexity.Questionnaire.Code(childComplexity), true

	case "Questionnaire.date":
		if e.complexity.Questionnaire.Date == nil {
			break
		}

		return e.complexity.Questionnaire.Date(childComplexity), true

	case "Questionnaire.derivedFrom":
		if e.complexity.Questionnaire.DerivedFrom == nil {
			break
		}

		return e.complexity.Questionnaire.DerivedFrom(childComplexity), true

	case "Questionnaire.description":
		if e.complexity.Questionnaire.Description == nil {
			break
		}

		return e.complexity.Questionnaire.Description(childComplexity), true

	case "Questionnaire.effectivePeriod":
		if e.complexity.Questionnaire.EffectivePeriod == nil {
			break
		}

		return e.complexity.Questionnaire.EffectivePeriod(childComplexity), true

	case "Questionnaire.experimental":
		if e.complexity.Questionnaire.Experimental == nil {
			break
		}

		return e.complexity.Questionnaire.Experimental(childComplexity), true

	case "Questionnaire.extension":
		if e.complexity.Questionnaire.Extension == nil {
			break
		}

		return e.complexity.Questionnaire.Extension(childComplexity), true

	case "Questionnaire.id":
		if e.complexity.Questionnaire.ID == nil {
			break
		}

		return e.complexity.Questionnaire.ID(childComplexity), true

	case "Questionnaire.identifier":
		if e.complexity.Questionnaire.Identifier == nil {
			break
		}

		return e.complexity.Questionnaire.Identifier(childComplexity), true

	case "Questionnaire.implicitRules":
		if e.complexity.Questionnaire.ImplicitRules == nil {
			break
		}

		return e.complexity.Questionnaire.ImplicitRules(childComplexity), true

	case "Questionnaire.item":
		if e.complexity.Questionnaire.Item == nil {
			break
		}

		return e.complexity.Questionnaire.Item(childComplexity), true

	case "Questionnaire.jurisdiction":
		if e.complexity.Questionnaire.Jurisdiction == nil {
			break
		}

		return e.complexity.Questionnaire.Jurisdiction(childComplexity), true

	case "Questionnaire.language":
		if e.complexity.Questionnaire.Language == nil {
			break
		}

		return e.complexity.Questionnaire.Language(childComplexity), true

	case "Questionnaire.meta":
		if e.complexity.Questionnaire.Meta == nil {
			break
		}

		return e.complexity.Questionnaire.Meta(childComplexity), true

	case "Questionnaire.modifierExtension":
		if e.complexity.Questionnaire.ModifierExtension == nil {
			break
		}

		return e.complexity.Questionnaire.ModifierExtension(childComplexity), true

	case "Questionnaire.name":
		if e.complexity.Questionnaire.Name == nil {
			break
		}

		return e.complexity.Questionnaire.Name(childComplexity), true

	case "Questionnaire.publisher":
		if e.complexity.Questionnaire.Publisher == nil {
			break
		}

		return e.complexity.Questionnaire.Publisher(childComplexity), true

	case "Questionnaire.purpose":
		if e.complexity.Questionnaire.Purpose == nil {
			break
		}

		return e.complexity.Questionnaire.Purpose(childComplexity), true

	case "Questionnaire.resourceType":
		if e.complexity.Questionnaire.ResourceType == nil {
			break
		}

		return e.complexity.Questionnaire.ResourceType(childComplexity), true

	case "Questionnaire.status":
		if e.complexity.Questionnaire.Status == nil {
			break
		}

		return e.complexity.Questionnaire.Status(childComplexity), true

	case "Questionnaire.text":
		if e.complexity.Questionnaire.Text == nil {
			break
		}

		return e.complexity.Questionnaire.Text(childComplexity), true

	case "Questionnaire.title":
		if e.complexity.Questionnaire.Title == nil {
			break
		}

		return e.complexity.Questionnaire.Title(childComplexity), true

	case "Questionnaire.url":
		if e.complexity.Questionnaire.URL == nil {
			break
		}

		return e.complexity.Questionnaire.URL(childComplexity), true

	case "Questionnaire.useContext":
		if e.complexity.Questionnaire.UseContext == nil {
			break
		}

		return e.complexity.Questionnaire.UseContext(childComplexity), true

	case "Questionnaire.version":
		if e.complexity.Questionnaire.Version == nil {
			break
		}

		return e.complexity.Questionnaire.Version(childComplexity), true

	case "QuestionnaireConnection.edges":
		if e.complexity.QuestionnaireConnection.Edges == nil {
			break
		}

		return e.complexity.QuestionnaireConnection.Edges(childComplexity), true

	case "QuestionnaireConnection.pageInfo":
		if e.complexity.QuestionnaireConnection.PageInfo == nil {
			break
		}

		return e.complexity.QuestionnaireConnection.PageInfo(childComplexity), true

	case "QuestionnaireConnection.totalCount":
		if e.complexity.QuestionnaireConnection.TotalCount == nil {
			break
		}

		return e.complexity.QuestionnaireConnection.TotalCount(childComplexity), true

	case "QuestionnaireEdge.cursor":
		if e.complexity.QuestionnaireEdge.Cursor == nil {
			break
		}

		return e.complexity.QuestionnaireEdge.Cursor(childComplexity), true

	case "QuestionnaireEdge.node":
		if e.complexity.QuestionnaireEdge.Node == nil {
			break
		}

		return e.complexity.QuestionnaireEdge.Node(childComplexity), true

	case "QuestionnaireItem.answerOption":
		if e.complexity.QuestionnaireItem.AnswerOption == nil {
			break
		}

		return e.complexity.QuestionnaireItem.AnswerOption(childComplexity), true

	case "QuestionnaireItem.answerValueSet":
		if e.complexity.QuestionnaireItem.AnswerValueSet == nil {
			break
		}

		return e.complexity.QuestionnaireItem.AnswerValueSet(childComplexity), true

	case "QuestionnaireItem.code":
		if e.complexity.QuestionnaireItem.Code == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Code(childComplexity), true

	case "QuestionnaireItem.definition":
		if e.complexity.QuestionnaireItem.Definition == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Definition(childComplexity), true

	case "QuestionnaireItem.disabledDisplay":
		if e.complexity.QuestionnaireItem.DisabledDisplay == nil {
			break
		}

		return e.complexity.QuestionnaireItem.DisabledDisplay(childComplexity), true

	case "QuestionnaireItem.enableBehavior":
		if e.complexity.QuestionnaireItem.EnableBehavior == nil {
			break
		}

		return e.complexity.QuestionnaireItem.EnableBehavior(childComplexity), true

	case "QuestionnaireItem.enableWhen":
		if e.complexity.QuestionnaireItem.EnableWhen == nil {
			break
		}

		return e.complexity.QuestionnaireItem.EnableWhen(childComplexity), true

	case "QuestionnaireItem.extension":
		if e.complexity.QuestionnaireItem.Extension == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Extension(childComplexity), true

	case "QuestionnaireItem.id":
		if e.complexity.QuestionnaireItem.ID == nil {
			break
		}

		return e.complexity.QuestionnaireItem.ID(childComplexity), true

	case "QuestionnaireItem.initial":
		if e.complexity.QuestionnaireItem.Initial == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Initial(childComplexity), true

	case "QuestionnaireItem.item":
		if e.complexity.QuestionnaireItem.Item == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Item(childComplexity), true

	case "QuestionnaireItem.linkId":
		if e.complexity.QuestionnaireItem.LinkID == nil {
			break
		}

		return e.complexity.QuestionnaireItem.LinkID(childComplexity), true

	case "QuestionnaireItem.maxLength":
		if e.complexity.QuestionnaireItem.MaxLength == nil {
			break
		}

		return e.complexity.QuestionnaireItem.MaxLength(childComplexity), true

	case "QuestionnaireItem.meta":
		if e.complexity.QuestionnaireItem.Meta == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Meta(childComplexity), true

	case "QuestionnaireItem.modifierExtension":
		if e.complexity.QuestionnaireItem.ModifierExtension == nil {
			break
		}

		return e.complexity.QuestionnaireItem.ModifierExtension(childComplexity), true

	case "QuestionnaireItem.prefix":
		if e.complexity.QuestionnaireItem.Prefix == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Prefix(childComplexity), true

	case "QuestionnaireItem.readOnly":
		if e.complexity.QuestionnaireItem.ReadOnly == nil {
			break
		}

		return e.complexity.QuestionnaireItem.ReadOnly(childComplexity), true

	case "QuestionnaireItem.repeats":
		if e.complexity.QuestionnaireItem.Repeats == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Repeats(childComplexity), true

	case "QuestionnaireItem.required":
		if e.complexity.QuestionnaireItem.Required == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Required(childComplexity), true

	case "QuestionnaireItem.text":
		if e.complexity.QuestionnaireItem.Text == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Text(childComplexity), true

	case "QuestionnaireItem.type":
		if e.complexity.QuestionnaireItem.Type == nil {
			break
		}

		return e.complexity.QuestionnaireItem.Type(childComplexity), true

	case "QuestionnaireItemAnswerOption.extension":
		if e.complexity.QuestionnaireItemAnswerOption.Extension == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.Extension(childComplexity), true

	case "QuestionnaireItemAnswerOption.id":
		if e.complexity.QuestionnaireItemAnswerOption.ID == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ID(childComplexity), true

	case "QuestionnaireItemAnswerOption.initialSelected":
		if e.complexity.QuestionnaireItemAnswerOption.InitialSelected == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.InitialSelected(childComplexity), true

	case "QuestionnaireItemAnswerOption.modifierExtension":
		if e.complexity.QuestionnaireItemAnswerOption.ModifierExtension == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ModifierExtension(childComplexity), true

	case "QuestionnaireItemAnswerOption.valueCoding":
		if e.complexity.QuestionnaireItemAnswerOption.ValueCoding == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ValueCoding(childComplexity), true

	case "QuestionnaireItemAnswerOption.valueDate":
		if e.complexity.QuestionnaireItemAnswerOption.ValueDate == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ValueDate(childComplexity), true

	case "QuestionnaireItemAnswerOption.valueInteger":
		if e.complexity.QuestionnaireItemAnswerOption.ValueInteger == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ValueInteger(childComplexity), true

	case "QuestionnaireItemAnswerOption.valueReference":
		if e.complexity.QuestionnaireItemAnswerOption.ValueReference == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ValueReference(childComplexity), true

	case "QuestionnaireItemAnswerOption.valueString":
		if e.complexity.QuestionnaireItemAnswerOption.ValueString == nil {
			break
		}

		return e.complexity.QuestionnaireItemAnswerOption.ValueString(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerBoolean":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerBoolean == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerBoolean(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerCoding":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerCoding == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerCoding(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerDate":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerDate == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerDate(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerDateTime":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerDateTime == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerDateTime(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerDecimal":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerDecimal == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerDecimal(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerInteger":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerInteger == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerInteger(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerQuantity":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerQuantity == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerQuantity(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerReference":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerReference == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerReference(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerString":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerString == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerString(childComplexity), true

	case "QuestionnaireItemEnableWhen.answerTime":
		if e.complexity.QuestionnaireItemEnableWhen.AnswerTime == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.AnswerTime(childComplexity), true

	case "QuestionnaireItemEnableWhen.extension":
		if e.complexity.QuestionnaireItemEnableWhen.Extension == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.Extension(childComplexity), true

	case "QuestionnaireItemEnableWhen.id":
		if e.complexity.QuestionnaireItemEnableWhen.ID == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.ID(childComplexity), true

	case "QuestionnaireItemEnableWhen.modifierExtension":
		if e.complexity.QuestionnaireItemEnableWhen.ModifierExtension == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.ModifierExtension(childComplexity), true

	case "QuestionnaireItemEnableWhen.operator":
		if e.complexity.QuestionnaireItemEnableWhen.Operator == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.Operator(childComplexity), true

	case "QuestionnaireItemEnableWhen.question":
		if e.complexity.QuestionnaireItemEnableWhen.Question == nil {
			break
		}

		return e.complexity.QuestionnaireItemEnableWhen.Question(childComplexity), true

	case "QuestionnaireItemInitial.extension":
		if e.complexity.QuestionnaireItemInitial.Extension == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.Extension(childComplexity), true

	case "QuestionnaireItemInitial.id":
		if e.complexity.QuestionnaireItemInitial.ID == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ID(childComplexity), true

	case "QuestionnaireItemInitial.modifierExtension":
		if e.complexity.QuestionnaireItemInitial.ModifierExtension == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ModifierExtension(childComplexity), true

	case "QuestionnaireItemInitial.valueAttachment":
		if e.complexity.QuestionnaireItemInitial.ValueAttachment == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueAttachment(childComplexity), true

	case "QuestionnaireItemInitial.valueBoolean":
		if e.complexity.QuestionnaireItemInitial.ValueBoolean == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueBoolean(childComplexity), true

	case "QuestionnaireItemInitial.valueCoding":
		if e.complexity.QuestionnaireItemInitial.ValueCoding == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueCoding(childComplexity), true

	case "QuestionnaireItemInitial.valueDate":
		if e.complexity.QuestionnaireItemInitial.ValueDate == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueDate(childComplexity), true

	case "QuestionnaireItemInitial.valueDateTime":
		if e.complexity.QuestionnaireItemInitial.ValueDateTime == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueDateTime(childComplexity), true

	case "QuestionnaireItemInitial.valueDecimal":
		if e.complexity.QuestionnaireItemInitial.ValueDecimal == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueDecimal(childComplexity), true

	case "QuestionnaireItemInitial.valueInteger":
		if e.complexity.QuestionnaireItemInitial.ValueInteger == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueInteger(childComplexity), true

	case "QuestionnaireItemInitial.valueQuantity":
		if e.complexity.QuestionnaireItemInitial.ValueQuantity == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueQuantity(childComplexity), true

	case "QuestionnaireItemInitial.valueReference":
		if e.complexity.QuestionnaireItemInitial.ValueReference == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueReference(childComplexity), true

	case "QuestionnaireItemInitial.valueString":
		if e.complexity.QuestionnaireItemInitial.ValueString == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueString(childComplexity), true

	case "QuestionnaireItemInitial.valueUri":
		if e.complexity.QuestionnaireItemInitial.ValueURI == nil {
			break
		}

		return e.complexity.QuestionnaireItemInitial.ValueURI(childComplexity), true

	case "QuestionnaireResponse.authored":
		if e.complexity.QuestionnaireResponse.Authored == nil {
			break
		}

		return e.complexity.QuestionnaireResponse.Authored(childComplexity), true

	case "QuestionnaireResponse.item":
		if e.complexity.QuestionnaireResponse.Item == nil {
			break
		}

		return e.complexity.QuestionnaireResponse.Item(childComplexity), true

	case "QuestionnaireResponse.status":
		if e.complexity.QuestionnaireResponse.Status == nil {
			break
		}

		return e.complexity.QuestionnaireResponse.Status(childComplexity), true

	case "QuestionnaireResponseItem.answer":
		if e.complexity.QuestionnaireResponseItem.Answer == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItem.Answer(childComplexity), true

	case "QuestionnaireResponseItem.item":
		if e.complexity.QuestionnaireResponseItem.Item == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItem.Item(childComplexity), true

	case "QuestionnaireResponseItem.linkId":
		if e.complexity.QuestionnaireResponseItem.LinkID == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItem.LinkID(childComplexity), true

	case "QuestionnaireResponseItem.text":
		if e.complexity.QuestionnaireResponseItem.Text == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItem.Text(childComplexity), true

	case "QuestionnaireResponseItemAnswer.item":
		if e.complexity.QuestionnaireResponseItemAnswer.Item == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.Item(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueAttachment":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueAttachment == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueAttachment(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueBoolean":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueBoolean == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueBoolean(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueCoding":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueCoding == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueCoding(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueDate":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueDate == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueDate(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueDateTime":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueDateTime == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueDateTime(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueDecimal":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueDecimal == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueDecimal(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueInteger":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueInteger == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueInteger(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueQuantity":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueQuantity == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueQuantity(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueReference":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueReference == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueReference(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueString":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueString == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueString(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueTime":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueTime == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueTime(childComplexity), true

	case "QuestionnaireResponseItemAnswer.valueUri":
		if e.complexity.QuestionnaireResponseItemAnswer.ValueURI == nil {
			break
		}

		return e.complexity.QuestionnaireResponseItemAnswer.ValueURI(childComplexity), true

	case "Range.high":
		if e.complexity.Range.High == nil {
			break
		}

		return e.complexity.Range.High(childComplexity), true

	case "Range.id":
		if e.complexity.Range.ID == nil {
			break
		}

		return e.complexity.Range.ID(childComplexity), true

	case "Range.low":
		if e.complexity.Range.Low == nil {
			break
		}

		return e.complexity.Range.Low(childComplexity), true

	case "Ratio.denominator":
		if e.complexity.Ratio.Denominator == nil {
			break
		}

		return e.complexity.Ratio.Denominator(childComplexity), true

	case "Ratio.id":
		if e.complexity.Ratio.ID == nil {
			break
		}

		return e.complexity.Ratio.ID(childComplexity), true

	case "Ratio.numerator":
		if e.complexity.Ratio.Numerator == nil {
			break
		}

		return e.complexity.Ratio.Numerator(childComplexity), true

	case "Reaction.code":
		if e.complexity.Reaction.Code == nil {
			break
		}

		return e.complexity.Reaction.Code(childComplexity), true

	case "Reaction.name":
		if e.complexity.Reaction.Name == nil {
			break
		}

		return e.complexity.Reaction.Name(childComplexity), true

	case "Reaction.severity":
		if e.complexity.Reaction.Severity == nil {
			break
		}

		return e.complexity.Reaction.Severity(childComplexity), true

	case "Reaction.system":
		if e.complexity.Reaction.System == nil {
			break
		}

		return e.complexity.Reaction.System(childComplexity), true

	case "Reference.display":
		if e.complexity.Reference.Display == nil {
			break
		}

		return e.complexity.Reference.Display(childComplexity), true

	case "Reference.id":
		if e.complexity.Reference.ID == nil {
			break
		}

		return e.complexity.Reference.ID(childComplexity), true

	case "Reference.identifier":
		if e.complexity.Reference.Identifier == nil {
			break
		}

		return e.complexity.Reference.Identifier(childComplexity), true

	case "Reference.reference":
		if e.complexity.Reference.Reference == nil {
			break
		}

		return e.complexity.Reference.Reference(childComplexity), true

	case "Reference.type":
		if e.complexity.Reference.Type == nil {
			break
		}

		return e.complexity.Reference.Type(childComplexity), true

	case "RiskAssessment.encounter":
		if e.complexity.RiskAssessment.Encounter == nil {
			break
		}

		return e.complexity.RiskAssessment.Encounter(childComplexity), true

	case "RiskAssessment.id":
		if e.complexity.RiskAssessment.ID == nil {
			break
		}

		return e.complexity.RiskAssessment.ID(childComplexity), true

	case "RiskAssessment.note":
		if e.complexity.RiskAssessment.Note == nil {
			break
		}

		return e.complexity.RiskAssessment.Note(childComplexity), true

	case "RiskAssessment.prediction":
		if e.complexity.RiskAssessment.Prediction == nil {
			break
		}

		return e.complexity.RiskAssessment.Prediction(childComplexity), true

	case "RiskAssessment.subject":
		if e.complexity.RiskAssessment.Subject == nil {
			break
		}

		return e.complexity.RiskAssessment.Subject(childComplexity), true

	case "RiskAssessmentPrediction.id":
		if e.complexity.RiskAssessmentPrediction.ID == nil {
			break
		}

		return e.complexity.RiskAssessmentPrediction.ID(childComplexity), true

	case "RiskAssessmentPrediction.outcome":
		if e.complexity.RiskAssessmentPrediction.Outcome == nil {
			break
		}

		return e.complexity.RiskAssessmentPrediction.Outcome(childComplexity), true

	case "RiskAssessmentPrediction.probabilityDecimal":
		if e.complexity.RiskAssessmentPrediction.ProbabilityDecimal == nil {
			break
		}

		return e.complexity.RiskAssessmentPrediction.ProbabilityDecimal(childComplexity), true

	case "Section.author":
		if e.complexity.Section.Author == nil {
			break
		}

		return e.complexity.Section.Author(childComplexity), true

	case "Section.code":
		if e.complexity.Section.Code == nil {
			break
		}

		return e.complexity.Section.Code(childComplexity), true

	case "Section.id":
		if e.complexity.Section.ID == nil {
			break
		}

		return e.complexity.Section.ID(childComplexity), true

	case "Section.section":
		if e.complexity.Section.Section == nil {
			break
		}

		return e.complexity.Section.Section(childComplexity), true

	case "Section.text":
		if e.complexity.Section.Text == nil {
			break
		}

		return e.complexity.Section.Text(childComplexity), true

	case "Section.title":
		if e.complexity.Section.Title == nil {
			break
		}

		return e.complexity.Section.Title(childComplexity), true

	case "Terminology.code":
		if e.complexity.Terminology.Code == nil {
			break
		}

		return e.complexity.Terminology.Code(childComplexity), true

	case "Terminology.name":
		if e.complexity.Terminology.Name == nil {
			break
		}

		return e.complexity.Terminology.Name(childComplexity), true

	case "Terminology.system":
		if e.complexity.Terminology.System == nil {
			break
		}

		return e.complexity.Terminology.System(childComplexity), true

	case "TerminologyConnection.edges":
		if e.complexity.TerminologyConnection.Edges == nil {
			break
		}

		return e.complexity.TerminologyConnection.Edges(childComplexity), true

	case "TerminologyConnection.pageInfo":
		if e.complexity.TerminologyConnection.PageInfo == nil {
			break
		}

		return e.complexity.TerminologyConnection.PageInfo(childComplexity), true

	case "TerminologyConnection.totalCount":
		if e.complexity.TerminologyConnection.TotalCount == nil {
			break
		}

		return e.complexity.TerminologyConnection.TotalCount(childComplexity), true

	case "TerminologyEdge.cursor":
		if e.complexity.TerminologyEdge.Cursor == nil {
			break
		}

		return e.complexity.TerminologyEdge.Cursor(childComplexity), true

	case "TerminologyEdge.node":
		if e.complexity.TerminologyEdge.Node == nil {
			break
		}

		return e.complexity.TerminologyEdge.Node(childComplexity), true

	case "TimelineResource.date":
		if e.complexity.TimelineResource.Date == nil {
			break
		}

		return e.complexity.TimelineResource.Date(childComplexity), true

	case "TimelineResource.id":
		if e.complexity.TimelineResource.ID == nil {
			break
		}

		return e.complexity.TimelineResource.ID(childComplexity), true

	case "TimelineResource.name":
		if e.complexity.TimelineResource.Name == nil {
			break
		}

		return e.complexity.TimelineResource.Name(childComplexity), true

	case "TimelineResource.resourceType":
		if e.complexity.TimelineResource.ResourceType == nil {
			break
		}

		return e.complexity.TimelineResource.ResourceType(childComplexity), true

	case "TimelineResource.status":
		if e.complexity.TimelineResource.Status == nil {
			break
		}

		return e.complexity.TimelineResource.Status(childComplexity), true

	case "TimelineResource.timeRecorded":
		if e.complexity.TimelineResource.TimeRecorded == nil {
			break
		}

		return e.complexity.TimelineResource.TimeRecorded(childComplexity), true

	case "TimelineResource.value":
		if e.complexity.TimelineResource.Value == nil {
			break
		}

		return e.complexity.TimelineResource.Value(childComplexity), true

	case "UsageContext.code":
		if e.complexity.UsageContext.Code == nil {
			break
		}

		return e.complexity.UsageContext.Code(childComplexity), true

	case "UsageContext.extension":
		if e.complexity.UsageContext.Extension == nil {
			break
		}

		return e.complexity.UsageContext.Extension(childComplexity), true

	case "UsageContext.id":
		if e.complexity.UsageContext.ID == nil {
			break
		}

		return e.complexity.UsageContext.ID(childComplexity), true

	case "UsageContext.valueCodeableConcept":
		if e.complexity.UsageContext.ValueCodeableConcept == nil {
			break
		}

		return e.complexity.UsageContext.ValueCodeableConcept(childComplexity), true

	case "UsageContext.valueQuantity":
		if e.complexity.UsageContext.ValueQuantity == nil {
			break
		}

		return e.complexity.UsageContext.ValueQuantity(childComplexity), true

	case "UsageContext.valueRange":
		if e.complexity.UsageContext.ValueRange == nil {
			break
		}

		return e.complexity.UsageContext.ValueRange(childComplexity), true

	case "UsageContext.valueReference":
		if e.complexity.UsageContext.ValueReference == nil {
			break
		}

		return e.complexity.UsageContext.ValueReference(childComplexity), true

	case "_Service.sdl":
		if e.complexity._Service.SDL == nil {
			break
		}

		return e.complexity._Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAllergyInput,
		ec.unmarshalInputAttachmentInput,
		ec.unmarshalInputCodingInput,
		ec.unmarshalInputCompositionInput,
		ec.unmarshalInputConditionInput,
		ec.unmarshalInputConsentInput,
		ec.unmarshalInputContactInput,
		ec.unmarshalInputDiagnosticReportInput,
		ec.unmarshalInputEncounterInput,
		ec.unmarshalInputEpisodeOfCareInput,
		ec.unmarshalInputHealthTimelineInput,
		ec.unmarshalInputIdentifierInput,
		ec.unmarshalInputMediaInput,
		ec.unmarshalInputMetaInput,
		ec.unmarshalInputObservationInput,
		ec.unmarshalInputPagination,
		ec.unmarshalInputPatchCompositionInput,
		ec.unmarshalInputPatchPatientInput,
		ec.unmarshalInputPatientInput,
		ec.unmarshalInputQuantityInput,
		ec.unmarshalInputQuestionnaireResponseInput,
		ec.unmarshalInputQuestionnaireResponseItemAnswerInput,
		ec.unmarshalInputQuestionnaireResponseItemInput,
		ec.unmarshalInputReactionInput,
		ec.unmarshalInputReferenceInput,
		ec.unmarshalInputSectionInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../clinical.graphql", Input: `extend type Query {
  patientHealthTimeline(input: HealthTimelineInput!): HealthTimeline!
  getMedicalData(patientID: String!): MedicalData

  getEpisodeOfCare(id: ID!): EpisodeOfCare

  # Conditions
  listPatientConditions(
    patientID: ID!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ConditionConnection

  # Compositions
  listPatientCompositions(
    patientID: ID!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): CompositionConnection

  # Encounter
  listPatientEncounters(
    patientID: String!
    pagination: Pagination!
  ): EncounterConnection

  # Observation
  getPatientTemperatureEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientBloodPressureEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientHeightEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientRespiratoryRateEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientPulseRateEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientBMIEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientWeightEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientMuacEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientOxygenSaturationEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientViralLoad(
    patientID: ID!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientBloodSugarEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientLastMenstrualPeriodEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  getPatientDiastolicBloodPressureEntries(
    patientID: String!
    encounterID: String
    date: Date
    pagination: Pagination!
  ): ObservationConnection

  # Allergy
  searchAllergy(name: String!, pagination: Pagination!): TerminologyConnection
  getAllergy(id: ID!): Allergy!
  listPatientAllergies(
    patientID: ID!
    pagination: Pagination!
  ): AllergyConnection

  # Media
  listPatientMedia(patientID: ID!, pagination: Pagination!): MediaConnection

  getQuestionnaireResponseRiskLevel(
    encounterID: String!
    screeningType: ScreeningTypeEnum!
  ): String!
}

extend type Mutation {
  # EpisodeOfCare
  createEpisodeOfCare(episodeOfCare: EpisodeOfCareInput!): EpisodeOfCare
  patchEpisodeOfCare(
    id: String!
    episodeOfCare: EpisodeOfCareInput!
  ): EpisodeOfCare!
  endEpisodeOfCare(id: ID!): EpisodeOfCare

  # Encounter
  startEncounter(episodeID: String!): String!
  patchEncounter(encounterID: String!, input: EncounterInput!): Encounter!
  endEncounter(encounterID: String!): Boolean!

  # Observation
  recordTemperature(input: ObservationInput!): Observation!
  recordHeight(input: ObservationInput!): Observation!
  recordWeight(input: ObservationInput!): Observation!
  recordRespiratoryRate(input: ObservationInput!): Observation!
  recordPulseRate(input: ObservationInput!): Observation!
  recordBloodPressure(input: ObservationInput!): Observation!
  recordBMI(input: ObservationInput!): Observation!
  recordViralLoad(input: ObservationInput!): Observation!
  recordMUAC(input: ObservationInput!): Observation!
  recordOxygenSaturation(input: ObservationInput!): Observation!
  recordBloodSugar(input: ObservationInput!): Observation!
  recordLastMenstrualPeriod(input: ObservationInput!): Observation!
  recordDiastolicBloodPressure(input: ObservationInput!): Observation!
  recordColposcopy(input: ObservationInput!): Observation!
  recordHPV(input: ObservationInput!): Observation!
  # Visual Inspection with Acetic Acid
  recordVIA(input: ObservationInput!): Observation!

  recordPapSmear(input: ObservationInput!): Observation!

  # Patient
  createPatient(input: PatientInput!): Patient!
  patchPatient(id: String!, input: PatchPatientInput!): Patient!
  deletePatient(id: String!): Boolean!

  # Conditions
  createCondition(input: ConditionInput!): Condition!

  # Allergy Intolerance
  createAllergyIntolerance(input: AllergyInput!): Allergy

  # Clinical notes(composition)
  createComposition(input: CompositionInput!): Composition!
  appendNoteToComposition(
    id: String!
    input: PatchCompositionInput!
  ): Composition!

  # Observation
  patchPatientHeight(id: String!, value: String!): Observation!
  patchPatientWeight(id: String!, value: String!): Observation!
  patchPatientBMI(id: String!, value: String!): Observation!
  patchPatientTemperature(id: String!, value: String!): Observation!
  patchPatientDiastolicBloodPressure(id: String!, value: String!): Observation!
  patchPatientSystolicBloodPressure(id: String!, value: String!): Observation!
  patchPatientRespiratoryRate(id: String!, value: String!): Observation!
  patchPatientOxygenSaturation(id: String!, value: String!): Observation!
  patchPatientPulseRate(id: String!, value: String!): Observation!
  patchPatientViralLoad(id: String!, value: String!): Observation!
  patchPatientMuac(id: String!, value: String!): Observation!
  patchPatientLastMenstrualPeriod(id: String!, value: String!): Observation!
  patchPatientBloodSugar(id: String!, value: String!): Observation!

  # Consent
  recordConsent(input: ConsentInput!): ConsentOutput!

  # questionnaireResponse
  createQuestionnaireResponse(
    questionnaireID: String!
    encounterID: String!
    input: QuestionnaireResponseInput!
  ): String!

  # Diagnostic Report
  recordMammographyResult(input: DiagnosticReportInput!): DiagnosticReport!
  recordBiopsy(input: DiagnosticReportInput!): DiagnosticReport!
  recordMRI(input: DiagnosticReportInput!): DiagnosticReport!
  recordUltrasound(input: DiagnosticReportInput!): DiagnosticReport!
  recordCBE(input: DiagnosticReportInput!): DiagnosticReport!

  getEncounterAssociatedResources(encounterID: String!): EncounterAssociatedResources!
}
`, BuiltIn: false},
	{Name: "../enums.graphql", Input: `enum EpisodeOfCareStatusEnum {
  PLANNED
  ACTIVE
  FINISHED
  CANCELLED
}

enum EncounterStatusEnum {
  PLANNED
  ARRIVED
  TRIAGED
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum EncounterClassEnum {
  AMBULATORY
}

enum ResourceType {
  AllergyIntolerance
  Observation
  Condition
  MedicationStatement
}

enum AllergyIntoleranceReactionSeverityEnum {
  MILD
  MODERATE
  SEVERE
}

enum ObservationStatus {
  FINAL
  CANCELLED
}

enum MedicationStatementStatusEnum {
  ACTIVE
  INACTIVE
  UNKNOWN
}

enum Gender {
  male
  female
  other
}

enum IdentifierType {
  NATIONAL_ID
  PASSPORT
  ALIEN_ID
  CCC_NUMBER
}

enum ContactType {
  PHONE_NUMBER
}

enum ConditionStatus {
  ACTIVE
  INACTIVE
  RESOLVED
  UNKNOWN
  RECURRENCE
  RELAPSE
  REMISSSION
}

enum CompositionStatusEnum {
  PRELIMINARY
  FINAL
  AMENDED
  ENTERED_IN_ERROR
}

enum CompositionCategory {
  ASSESSMENT_PLAN
  HISTORY_OF_PRESENTING_ILLNESS
  SOCIAL_HISTORY
  FAMILY_HISTORY
  EXAMINATION
  PLAN_OF_CARE
}

enum CompositionType {
  PROGRESS_NOTE
}

enum TerminologySource {
  ICD10
  CIEL
  SNOMED_CT
  LOINC
}

enum ConditionCategory {
  PROBLEM_LIST_ITEM
  ENCOUNTER_DIAGNOSIS
}

enum ConsentProvisionTypeEnum {
  permit
  deny
}

enum ConsentStatusEnum{
  active
  inactive
}

enum QuantityComparatorEnum{
  less_than
  less_than_or_equal_to
  greater_than_or_equal_to
  greater_than
}

enum QuestionnaireResponseStatusEnum{
  completed
}

enum ScreeningTypeEnum{
  BREAST_CANCER_SCREENING
  CERVICAL_CANCER_SCREENING
}`, BuiltIn: false},
	{Name: "../external.graphql", Input: `scalar Map
scalar Any
scalar Time
scalar Date
scalar Markdown
scalar Decimal
scalar URL
scalar ResourceList
scalar Base64Binary
scalar Canonical
scalar Code
scalar DateTime
scalar Instant
scalar Integer
scalar OID
scalar PositiveInt
scalar UnsignedInt
scalar URI
scalar UUID
scalar XHTML

`, BuiltIn: false},
	{Name: "../inputs.graphql", Input: `input HealthTimelineInput {
  patientID: String!
  offset: Int!
  limit: Int!
}

input EpisodeOfCareInput {
  status: EpisodeOfCareStatusEnum!
  patientID: String!
}

input EncounterInput {
  status: EncounterStatusEnum
}

input ObservationInput {
  status: ObservationStatus!
  encounterID: String!
  value: String!
  note: String
}

input PatientInput {
  firstName: String!
  lastName: String
  otherNames: String
  birthDate: Date!
  gender: Gender!
  identifiers: [IdentifierInput!]
  contacts: [ContactInput!]
}

input PatchPatientInput {
  firstName: String
  lastName: String
  otherNames: String
  birthDate: Date
  gender: Gender
  identifiers: [IdentifierInput!]
  contacts: [ContactInput!]
}

input IdentifierInput {
  type: IdentifierType!
  value: String!
}

input ContactInput {
  type: ContactType!
  value: String!
}

input ConditionInput {
  code: String!
  system: TerminologySource!
  status: ConditionStatus!
  category: ConditionCategory!
  encounterID: String!
  onsetDate: Date
  note: String
}

input AllergyInput {
  code: String!
  terminologySource: TerminologySource!
  encounterID: String!
  reaction: ReactionInput
}

input CompositionInput {
  type: CompositionType!
  status: CompositionStatusEnum!
  category: CompositionCategory!
  encounterID: String!
  note: String!
}

input PatchCompositionInput {
  type: CompositionType
  status: CompositionStatusEnum
  category: CompositionCategory
  note: String
  section: [SectionInput!]
}

input SectionInput {
  id: String
  title: String
  code: String
  author: String
  text: String
  section: [SectionInput!]
}

input ReactionInput {
  code: String
  system: String
  severity: AllergyIntoleranceReactionSeverityEnum
}

input Pagination {
  first: Int
  after: String

  last: Int
  before: String
}

input ConsentInput{
  provision: ConsentProvisionTypeEnum!
  encounterID: String!
  denyReason: String
}

input ReferenceInput {
	reference: String
	type: URI
	display: String
}

input QuantityInput {
	value: Float
	comparator: QuantityComparatorEnum
	unit: String
	system: URI
	code: Code
}

input AttachmentInput {
	contentType: Code
	data: Base64Binary
	URL: URL
	size: Int
	hash: Base64Binary
	title: String
}

input CodingInput {
	system: URI
	version: String
	code: Code
	display: String
}
input QuestionnaireResponseItemInput {
	linkId: String
	text: String
	answer: [QuestionnaireResponseItemAnswerInput]
	item: [QuestionnaireResponseItemInput]
}
input QuestionnaireResponseItemAnswerInput {
	valueBoolean: Boolean
	valueDecimal: Float
	valueInteger: Int
	valueDate: String
	valueDateTime: String
	valueTime: String
	valueString: String
	valueUri: String
	valueAttachment: AttachmentInput
	valueCoding: CodingInput
	valueQuantity: QuantityInput
	valueReference: ReferenceInput
	item: [QuestionnaireResponseItemInput]
}

input QuestionnaireResponseInput {
  resourceType: String!
  meta: MetaInput!
	status: QuestionnaireResponseStatusEnum!
	authored: String!
	item: [QuestionnaireResponseItemInput]
}

input MetaInput {
  versionId: String
  lastUpdated: Time
  source: String
  tag: [CodingInput]
  security: [CodingInput]
  profile: [URI]
}

input DiagnosticReportInput {
  encounterID: String!
  note: String
  findings: String!
  media: MediaInput
}

input MediaInput {
  id: ID!
  name: String!
  url: String!
}`, BuiltIn: false},
	{Name: "../types.graphql", Input: `type Allergy {
  id: ID
  code: String!
  name: String
  system: String
  terminologySource: TerminologySource
  encounterID: String!
  reaction: Reaction
}

type Reaction {
  code: String
  name: String
  system: String
  severity: AllergyIntoleranceReactionSeverityEnum
}

type Observation {
  id: String!
  status: ObservationStatus!
  patientID: String!
  encounterID: String!
  name: String!
  value: String!
  timeRecorded: String!
  interpretation: [String!]
  note: String
}

type Medication {
  name: String!
  code: String!
}

type MedicationStatement {
  id: ID!

  status: MedicationStatementStatusEnum

  medication: Medication!

  patientID: String
}

type MedicalData {
  regimen: [MedicationStatement]
  allergies: [Allergy]
  weight: [Observation]
  bmi: [Observation]
  viralLoad: [Observation]
  cd4Count: [Observation]
}

type TimelineResource {
  id: ID!
  resourceType: ResourceType
  name: String
  value: String
  status: String
  date: Date
  timeRecorded: Time
}

type HealthTimeline {
  timeline: [TimelineResource]
  totalCount: Int!
}

type EpisodeOfCare {
  id: ID!
  status: EpisodeOfCareStatusEnum!
  patientID: String!
}

type Encounter {
  id: String
  class: EncounterClass
  episodeOfCareID: String
  status: EncounterStatusEnum
  patientID: String
}
type EncounterClass {
	code: String
	display: EncounterClassEnum
}

type Patient {
  id: ID!
  active: Boolean!
  name: String!
  phoneNumber: [String!]!
  gender: Gender!
  birthDate: Date
}

type Condition {
  id: ID
  status: ConditionStatus
  name: String
  code: String!
  system: String!
  category: ConditionCategory!
  onsetDate: Date
  recordedDate: Date
  note: String

  patientID: String
  encounterID: String
}

type ConditionEdge {
  node: Condition
  cursor: String
}

type PageInfo {
  hasNextPage: Boolean
  startCursor: String

  hasPreviousPage: Boolean
  endCursor: String
}

type ConditionConnection {
  totalCount: Int
  edges: [ConditionEdge]
  pageInfo: PageInfo
}

type Terminology {
  code: String!
  system: TerminologySource!
  name: String!
}

type AllergyEdge {
  node: Allergy
  cursor: String
}

type AllergyConnection {
  totalCount: Int
  edges: [AllergyEdge]
  pageInfo: PageInfo
}

type EncounterEdge {
  node: Encounter
  cursor: String
}

type EncounterConnection {
  totalCount: Int
  edges: [EncounterEdge]
  pageInfo: PageInfo
}

type TerminologyEdge {
  node: Terminology
  cursor: String
}

type TerminologyConnection {
  totalCount: Int
  edges: [TerminologyEdge]
  pageInfo: PageInfo
}

type ObservationEdge {
  node: Observation
  cursor: String
}

type ObservationConnection {
  totalCount: Int
  edges: [ObservationEdge]
  pageInfo: PageInfo
}

type Media {
  id: String!
  name: String!
  url: String!
  contentType: String!
}

type MediaEdge {
  node: Media
  cursor: String
}

type MediaConnection {
  totalCount: Int
  edges: [MediaEdge]
  pageInfo: PageInfo
}

type Composition {
  id: String!
  text: String!
  type: CompositionType!
  category: CompositionCategory!
  status: CompositionStatusEnum!
  date: Date
  section: [Section]
  patientID: String
  encounterID: String
}

type Section {
  id: String
  title: String
  code: String
  author: String
  text: String
  section: [Section]
}

type CompositionEdge {
  node: Composition
  cursor: String
}

type CompositionConnection {
  totalCount: Int
  edges: [CompositionEdge]
  pageInfo: PageInfo
}

type ConsentOutput {
  status: ConsentStatusEnum!
}

type QuestionnaireEdge {
  node: Questionnaire
  cursor: String
}

type QuestionnaireConnection {
  totalCount: Int
  edges: [QuestionnaireEdge]
  pageInfo: PageInfo
}

type Questionnaire {
  id: String
  resourceType: String!
  meta: Meta
  implicitRules: String
  language: String
  text: Narrative
  extension: [Extension]
  modifierExtension: [Extension]
  url: URI
  identifier: [Identifier]
  version: String
  name: String
  title: String
  derivedFrom: [String]
  status: Code
  experimental: Boolean
  date: DateTime
  publisher: String
  description: String
  useContext: UsageContext
  jurisdiction: [CodeableConcept]
  purpose: String
  effectivePeriod: Period
  code: [Coding]
  item: [QuestionnaireItem]
}

type Narrative {
  id: String
  status: String
  div: XHTML
}

type Meta {
  versionId: String
  source: String
  tag: [Coding]
  security: [Coding]
}

type Coding {
  id: String
  system: URI
  version: String
  code: Code
  display: String
  userSelected: Boolean
}

type UsageContext {
  id: String
  extension: [Extension]
  code: Coding
  valueCodeableConcept: CodeableConcept
  valueQuantity: Quantity
  valueRange: Range
  valueReference: Reference
}

type Extension {
  url: String
  valueBoolean: Boolean
  valueInteger: Int
  valueDecimal: Float
  valueBase64Binary: String
  valueInstant: String
  valueString: String
  valueURI: String
  valueDate: String
  valueDateTime: String
  valueTime: String
  valueCode: String
  valueOid: String
  valueUUID: String
  valueID: String
  valueUnsignedInt: Int
  valuePositiveInt: Int
  valueMarkdown: String
  valueAnnotation: Annotation
  valueAttachment: Attachment
  valueIdentifier: Identifier
  valueCodeableConcept: CodeableConcept
  valueCoding: Coding
  valueQuantity: Quantity
  valueRange: Range
  valuePeriod: Period
  valueRatio: Ratio
  valueReference: Reference
}

type Annotation {
  id: ID
  AuthorReference: Reference
  AuthorString: String
  Time: DateTime
  Text: Markdown
}

type Range {
  id: String
  low: Quantity
  high: Quantity
}

type Ratio {
  id: String
  numerator: Quantity
  denominator: Quantity
}

type QuestionnaireItem {
  id: String
  meta: Meta
  extension: [Extension]
  modifierExtension: [Extension]
  linkId: String
  definition: URI
  code: [Coding]
  prefix: String
  text: String
  type: Code
  enableWhen: [QuestionnaireItemEnableWhen]
  enableBehavior: Code
  disabledDisplay: Code
  required: Boolean
  repeats: Boolean
  readOnly: Boolean
  maxLength: Int
  answerValueSet: String
  answerOption: [QuestionnaireItemAnswerOption]
  initial: [QuestionnaireItemInitial]
  item: [QuestionnaireItem]
}

type QuestionnaireItemEnableWhen {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  question: String
  operator: Code
  answerBoolean: Boolean
  answerDecimal: Float
  answerInteger: Int
  answerDate: Date
  answerDateTime: DateTime
  answerTime: DateTime
  answerString: String
  answerCoding: Coding
  answerQuantity: Quantity
  answerReference: Reference
}

type QuestionnaireItemAnswerOption {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  valueInteger: Int
  valueDate: Date
  valueString: String
  valueCoding: Coding
  valueReference: Reference
  initialSelected: Boolean
}

type QuestionnaireItemInitial {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  valueBoolean: Boolean
  valueDecimal: Float
  valueInteger: Int
  valueDate: Date
  valueDateTime: DateTime
  valueString: String
  valueUri: URI
  valueAttachment: Attachment
  valueCoding: Coding
  valueQuantity: Quantity
  valueReference: Reference
}

type Attachment {
  id: String
  contentType: Code
  language: Code
  data: Base64Binary
  url: URL
  size: Int
  hash: Base64Binary
  title: String
  creation: DateTime
}

type Reference {
  id: String
  reference: String
  type: URI
  identifier: Identifier
  display: String
}

type Identifier {
  id: String
  use: String
  type: CodeableConcept
  system: URI
  value: String
  period: Period
  assigner: Reference
}

type CodeableConcept {
  id: String
  coding: [Coding]
  text: String
}

type Period {
  id: String
  start: DateTime
  end: DateTime
}

type Quantity {
  value: Float
  comparator: QuantityComparatorEnum
  unit: String
  system: URI
  code: Code
}

type QuestionnaireResponseItem {
  linkId: String
  text: String
  answer: [QuestionnaireResponseItemAnswer]
  item: [QuestionnaireResponseItem]
}

type QuestionnaireResponseItemAnswer {
  valueBoolean: Boolean
  valueDecimal: Float
  valueInteger: Int
  valueDate: String
  valueDateTime: String
  valueTime: String
  valueString: String
  valueUri: String
  valueAttachment: Attachment
  valueCoding: Coding
  valueQuantity: Quantity
  valueReference: Reference
  item: [QuestionnaireResponseItem]
}

type QuestionnaireResponse {
  status: QuestionnaireResponseStatusEnum!
  authored: String!
  item: [QuestionnaireResponseItem]
}

type DiagnosticReport {
  id: ID!
  status: ObservationStatus!
  patientID: String!
  encounterID: String!
  issued: String!
  result: [Observation!]
  media: [Media!]
  conclusion: String!
}


type Consent {
	id: String!
	status: ConsentStatusEnum
	provision: ConsentProvision
	patient: Reference
}


type ConsentProvision {
	id: String
	type: ConsentProvisionTypeEnum
}

type RiskAssessment {
	id: String
	subject: Reference
	encounter: Reference
	prediction: [RiskAssessmentPrediction]
  note: [Annotation]
}


type RiskAssessmentPrediction {
	id: String
	outcome: CodeableConcept
	probabilityDecimal: Float
}

type EncounterAssociatedResources {
  riskAssessment: RiskAssessment
  consent: Consent
}`, BuiltIn: false},
	{Name: "../../../../../federation/directives.graphql", Input: `
	directive @key(fields: _FieldSet!) repeatable on OBJECT | INTERFACE
	directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
	directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
	directive @extends on OBJECT | INTERFACE
	directive @external on FIELD_DEFINITION
	scalar _Any
	scalar _FieldSet
`, BuiltIn: true},
	{Name: "../../../../../federation/entity.graphql", Input: `
type _Service {
  sdl: String
}

extend type Query {
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_appendNoteToComposition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 dto.PatchCompositionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPatchCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatchCompositionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createAllergyIntolerance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.AllergyInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAllergyInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createComposition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.CompositionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createCondition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ConditionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConditionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.EpisodeOfCareInput
	if tmp, ok := rawArgs["episodeOfCare"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeOfCare"))
		arg0, err = ec.unmarshalNEpisodeOfCareInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeOfCare"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createPatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.PatientInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPatientInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatientInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createQuestionnaireResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["questionnaireID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("questionnaireID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["questionnaireID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 dto.QuestionnaireResponse
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg2, err = ec.unmarshalNQuestionnaireResponseInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponse(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_endEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_getEncounterAssociatedResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_patchEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	var arg1 dto.EncounterInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNEncounterInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 dto.EpisodeOfCareInput
	if tmp, ok := rawArgs["episodeOfCare"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeOfCare"))
		arg1, err = ec.unmarshalNEpisodeOfCareInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeOfCare"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientBMI_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientBloodSugar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientDiastolicBloodPressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientHeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientLastMenstrualPeriod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientMuac_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientOxygenSaturation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientPulseRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientRespiratoryRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientSystolicBloodPressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientTemperature_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientViralLoad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatientWeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_patchPatient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 dto.PatientInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPatchPatientInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatientInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_recordBMI_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordBiopsy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.DiagnosticReportInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiagnosticReportInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordBloodPressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordBloodSugar_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordCBE_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.DiagnosticReportInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiagnosticReportInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordColposcopy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordConsent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ConsentInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConsentInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordDiastolicBloodPressure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordHPV_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordHeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordLastMenstrualPeriod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordMRI_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.DiagnosticReportInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiagnosticReportInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordMUAC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordMammographyResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.DiagnosticReportInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiagnosticReportInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordOxygenSaturation_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordPapSmear_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordPulseRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordRespiratoryRate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordTemperature_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordUltrasound_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.DiagnosticReportInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDiagnosticReportInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReportInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordVIA_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordViralLoad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_recordWeight_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.ObservationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_startEncounter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["episodeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("episodeID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["episodeID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAllergy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getEpisodeOfCare_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getMedicalData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getPatientBMIEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientBloodPressureEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientBloodSugarEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientDiastolicBloodPressureEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientHeightEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientLastMenstrualPeriodEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientMuacEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientOxygenSaturationEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientPulseRateEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientRespiratoryRateEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientTemperatureEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientViralLoad_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getPatientWeightEntries_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_getQuestionnaireResponseRiskLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg0
	var arg1 domain.ScreeningTypeEnum
	if tmp, ok := rawArgs["screeningType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("screeningType"))
		arg1, err = ec.unmarshalNScreeningTypeEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐScreeningTypeEnum(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["screeningType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listPatientAllergies_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listPatientCompositions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_listPatientConditions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["encounterID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["encounterID"] = arg1
	var arg2 *scalarutils.Date
	if tmp, ok := rawArgs["date"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("date"))
		arg2, err = ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["date"] = arg2
	var arg3 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg3, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_listPatientEncounters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listPatientMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["patientID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["patientID"] = arg0
	var arg1 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_patientHealthTimeline_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.HealthTimelineInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNHealthTimelineInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimelineInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_searchAllergy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 dto.Pagination
	if tmp, ok := rawArgs["pagination"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pagination"))
		arg1, err = ec.unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["pagination"] = arg1
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Allergy_id(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Allergy_code(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Allergy_name(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Allergy_system(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Allergy_terminologySource(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_terminologySource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TerminologySource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.TerminologySource)
	fc.Result = res
	return ec.marshalOTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_terminologySource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TerminologySource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Allergy_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Allergy_reaction(ctx context.Context, field graphql.CollectedField, obj *dto.Allergy) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Allergy_reaction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reaction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Reaction)
	fc.Result = res
	return ec.marshalOReaction2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReaction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Allergy_reaction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Allergy",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Reaction_code(ctx, field)
			case "name":
				return ec.fieldContext_Reaction_name(ctx, field)
			case "system":
				return ec.fieldContext_Reaction_system(ctx, field)
			case "severity":
				return ec.fieldContext_Reaction_severity(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reaction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.AllergyEdge)
	fc.Result = res
	return ec.marshalOAllergyEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_AllergyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_AllergyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AllergyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Allergy)
	fc.Result = res
	return ec.marshalOAllergy2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Allergy_id(ctx, field)
			case "code":
				return ec.fieldContext_Allergy_code(ctx, field)
			case "name":
				return ec.fieldContext_Allergy_name(ctx, field)
			case "system":
				return ec.fieldContext_Allergy_system(ctx, field)
			case "terminologySource":
				return ec.fieldContext_Allergy_terminologySource(ctx, field)
			case "encounterID":
				return ec.fieldContext_Allergy_encounterID(ctx, field)
			case "reaction":
				return ec.fieldContext_Allergy_reaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Allergy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AllergyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.AllergyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AllergyEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AllergyEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AllergyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annotation_id(ctx context.Context, field graphql.CollectedField, obj *dto.Annotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annotation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annotation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annotation_AuthorReference(ctx context.Context, field graphql.CollectedField, obj *dto.Annotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annotation_AuthorReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annotation_AuthorReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annotation_AuthorString(ctx context.Context, field graphql.CollectedField, obj *dto.Annotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annotation_AuthorString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthorString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annotation_AuthorString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annotation_Time(ctx context.Context, field graphql.CollectedField, obj *dto.Annotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annotation_Time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annotation_Time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Annotation_Text(ctx context.Context, field graphql.CollectedField, obj *dto.Annotation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Annotation_Text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Markdown)
	fc.Result = res
	return ec.marshalOMarkdown2githubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Annotation_Text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Annotation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Markdown does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_id(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_contentType(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_language(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_data(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Base64Binary)
	fc.Result = res
	return ec.marshalOBase64Binary2githubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Base64Binary does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_url(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.URL)
	fc.Result = res
	return ec.marshalOURL2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URL does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_size(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_size(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_size(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_hash(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_hash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Base64Binary)
	fc.Result = res
	return ec.marshalOBase64Binary2githubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_hash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Base64Binary does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_title(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Attachment_creation(ctx context.Context, field graphql.CollectedField, obj *dto.Attachment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Attachment_creation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Attachment_creation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Attachment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CodeableConcept_id(ctx context.Context, field graphql.CollectedField, obj *dto.CodeableConcept) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CodeableConcept_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CodeableConcept_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CodeableConcept",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CodeableConcept_coding(ctx context.Context, field graphql.CollectedField, obj *dto.CodeableConcept) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CodeableConcept_coding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Coding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CodeableConcept_coding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CodeableConcept",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CodeableConcept_text(ctx context.Context, field graphql.CollectedField, obj *dto.CodeableConcept) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CodeableConcept_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CodeableConcept_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CodeableConcept",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coding_id(ctx context.Context, field graphql.CollectedField, obj *dto.Coding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coding_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coding_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coding_system(ctx context.Context, field graphql.CollectedField, obj *dto.Coding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coding_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coding_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coding_version(ctx context.Context, field graphql.CollectedField, obj *dto.Coding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coding_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coding_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coding_code(ctx context.Context, field graphql.CollectedField, obj *dto.Coding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coding_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coding_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coding_display(ctx context.Context, field graphql.CollectedField, obj *dto.Coding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coding_display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coding_display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Coding_userSelected(ctx context.Context, field graphql.CollectedField, obj *dto.Coding) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Coding_userSelected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserSelected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Coding_userSelected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Coding",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_id(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_text(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_type(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.CompositionType)
	fc.Result = res
	return ec.marshalNCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompositionType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_category(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.CompositionCategory)
	fc.Result = res
	return ec.marshalNCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompositionCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_status(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.CompositionStatusEnum)
	fc.Result = res
	return ec.marshalNCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type CompositionStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_date(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_section(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Section)
	fc.Result = res
	return ec.marshalOSection2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_section(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Section_id(ctx, field)
			case "title":
				return ec.fieldContext_Section_title(ctx, field)
			case "code":
				return ec.fieldContext_Section_code(ctx, field)
			case "author":
				return ec.fieldContext_Section_author(ctx, field)
			case "text":
				return ec.fieldContext_Section_text(ctx, field)
			case "section":
				return ec.fieldContext_Section_section(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Section", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Composition_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.Composition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Composition_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Composition_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Composition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompositionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.CompositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompositionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompositionConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompositionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.CompositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompositionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.CompositionEdge)
	fc.Result = res
	return ec.marshalOCompositionEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompositionConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CompositionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CompositionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompositionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompositionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.CompositionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompositionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompositionConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompositionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompositionEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.CompositionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompositionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Composition)
	fc.Result = res
	return ec.marshalOComposition2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompositionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompositionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Composition_id(ctx, field)
			case "text":
				return ec.fieldContext_Composition_text(ctx, field)
			case "type":
				return ec.fieldContext_Composition_type(ctx, field)
			case "category":
				return ec.fieldContext_Composition_category(ctx, field)
			case "status":
				return ec.fieldContext_Composition_status(ctx, field)
			case "date":
				return ec.fieldContext_Composition_date(ctx, field)
			case "section":
				return ec.fieldContext_Composition_section(ctx, field)
			case "patientID":
				return ec.fieldContext_Composition_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Composition_encounterID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Composition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompositionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.CompositionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompositionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompositionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompositionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_id(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_status(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ConditionStatus)
	fc.Result = res
	return ec.marshalOConditionStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConditionStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_name(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_code(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_system(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_category(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.ConditionCategory)
	fc.Result = res
	return ec.marshalNConditionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionCategory(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConditionCategory does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_onsetDate(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_onsetDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnsetDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_onsetDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_recordedDate(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_recordedDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordedDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_recordedDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_note(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Condition_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.Condition) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Condition_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Condition_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Condition",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConditionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.ConditionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConditionConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConditionConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConditionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConditionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.ConditionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConditionConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.ConditionEdge)
	fc.Result = res
	return ec.marshalOConditionEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConditionConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConditionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ConditionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ConditionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConditionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConditionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.ConditionConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConditionConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConditionConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConditionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConditionEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.ConditionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConditionEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Condition)
	fc.Result = res
	return ec.marshalOCondition2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCondition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConditionEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConditionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Condition_id(ctx, field)
			case "status":
				return ec.fieldContext_Condition_status(ctx, field)
			case "name":
				return ec.fieldContext_Condition_name(ctx, field)
			case "code":
				return ec.fieldContext_Condition_code(ctx, field)
			case "system":
				return ec.fieldContext_Condition_system(ctx, field)
			case "category":
				return ec.fieldContext_Condition_category(ctx, field)
			case "onsetDate":
				return ec.fieldContext_Condition_onsetDate(ctx, field)
			case "recordedDate":
				return ec.fieldContext_Condition_recordedDate(ctx, field)
			case "note":
				return ec.fieldContext_Condition_note(ctx, field)
			case "patientID":
				return ec.fieldContext_Condition_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Condition_encounterID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Condition", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConditionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.ConditionEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConditionEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConditionEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConditionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Consent_id(ctx context.Context, field graphql.CollectedField, obj *dto.Consent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Consent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Consent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Consent_status(ctx context.Context, field graphql.CollectedField, obj *dto.Consent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Consent_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ConsentStatusEnum)
	fc.Result = res
	return ec.marshalOConsentStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Consent_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConsentStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Consent_provision(ctx context.Context, field graphql.CollectedField, obj *dto.Consent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Consent_provision(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ConsentProvision)
	fc.Result = res
	return ec.marshalOConsentProvision2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvision(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Consent_provision(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConsentProvision_id(ctx, field)
			case "type":
				return ec.fieldContext_ConsentProvision_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConsentProvision", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Consent_patient(ctx context.Context, field graphql.CollectedField, obj *dto.Consent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Consent_patient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Patient, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Consent_patient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConsentOutput_status(ctx context.Context, field graphql.CollectedField, obj *dto.ConsentOutput) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsentOutput_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.ConsentStatusEnum)
	fc.Result = res
	return ec.marshalNConsentStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsentOutput_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsentOutput",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConsentStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConsentProvision_id(ctx context.Context, field graphql.CollectedField, obj *dto.ConsentProvision) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsentProvision_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsentProvision_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsentProvision",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConsentProvision_type(ctx context.Context, field graphql.CollectedField, obj *dto.ConsentProvision) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConsentProvision_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ConsentProvisionTypeEnum)
	fc.Result = res
	return ec.marshalOConsentProvisionTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvisionTypeEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConsentProvision_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConsentProvision",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ConsentProvisionTypeEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_id(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_status(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.ObservationStatus)
	fc.Result = res
	return ec.marshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObservationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_issued(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_issued(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_issued(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_result(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_media(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_media(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Media, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_media(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "name":
				return ec.fieldContext_Media_name(ctx, field)
			case "url":
				return ec.fieldContext_Media_url(ctx, field)
			case "contentType":
				return ec.fieldContext_Media_contentType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DiagnosticReport_conclusion(ctx context.Context, field graphql.CollectedField, obj *dto.DiagnosticReport) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DiagnosticReport_conclusion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conclusion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DiagnosticReport_conclusion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DiagnosticReport",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_id(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_class(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_class(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EncounterClass)
	fc.Result = res
	return ec.marshalOEncounterClass2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClass(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_class(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_EncounterClass_code(ctx, field)
			case "display":
				return ec.fieldContext_EncounterClass_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EncounterClass", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_episodeOfCareID(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_episodeOfCareID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EpisodeOfCareID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_episodeOfCareID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_status(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EncounterStatusEnum)
	fc.Result = res
	return ec.marshalOEncounterStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EncounterStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Encounter_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.Encounter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Encounter_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Encounter_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Encounter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterAssociatedResources_riskAssessment(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterAssociatedResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterAssociatedResources_riskAssessment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RiskAssessment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.RiskAssessment)
	fc.Result = res
	return ec.marshalORiskAssessment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRiskAssessment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterAssociatedResources_riskAssessment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterAssociatedResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RiskAssessment_id(ctx, field)
			case "subject":
				return ec.fieldContext_RiskAssessment_subject(ctx, field)
			case "encounter":
				return ec.fieldContext_RiskAssessment_encounter(ctx, field)
			case "prediction":
				return ec.fieldContext_RiskAssessment_prediction(ctx, field)
			case "note":
				return ec.fieldContext_RiskAssessment_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskAssessment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterAssociatedResources_consent(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterAssociatedResources) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterAssociatedResources_consent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Consent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Consent)
	fc.Result = res
	return ec.marshalOConsent2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterAssociatedResources_consent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterAssociatedResources",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Consent_id(ctx, field)
			case "status":
				return ec.fieldContext_Consent_status(ctx, field)
			case "provision":
				return ec.fieldContext_Consent_provision(ctx, field)
			case "patient":
				return ec.fieldContext_Consent_patient(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Consent", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterClass_code(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterClass) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterClass_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterClass_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterClass",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterClass_display(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterClass) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterClass_display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EncounterClassEnum)
	fc.Result = res
	return ec.marshalOEncounterClassEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClassEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterClass_display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterClass",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EncounterClassEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.EncounterEdge)
	fc.Result = res
	return ec.marshalOEncounterEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_EncounterEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_EncounterEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EncounterEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Encounter)
	fc.Result = res
	return ec.marshalOEncounter2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Encounter_id(ctx, field)
			case "class":
				return ec.fieldContext_Encounter_class(ctx, field)
			case "episodeOfCareID":
				return ec.fieldContext_Encounter_episodeOfCareID(ctx, field)
			case "status":
				return ec.fieldContext_Encounter_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Encounter_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Encounter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _EncounterEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.EncounterEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EncounterEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EncounterEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EncounterEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EpisodeOfCare_id(ctx context.Context, field graphql.CollectedField, obj *dto.EpisodeOfCare) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EpisodeOfCare_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EpisodeOfCare_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EpisodeOfCare",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EpisodeOfCare_status(ctx context.Context, field graphql.CollectedField, obj *dto.EpisodeOfCare) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EpisodeOfCare_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.EpisodeOfCareStatusEnum)
	fc.Result = res
	return ec.marshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EpisodeOfCare_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EpisodeOfCare",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EpisodeOfCareStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EpisodeOfCare_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.EpisodeOfCare) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EpisodeOfCare_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EpisodeOfCare",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_url(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueBoolean(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueBoolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueBoolean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueInteger(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueInteger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueDecimal(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueDecimal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDecimal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueDecimal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueBase64Binary(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueBase64Binary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueBase64Binary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueBase64Binary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueInstant(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueInstant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInstant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueInstant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueString(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueURI(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueURI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueURI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueDate(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueDateTime(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueDateTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueDateTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueTime(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueCode(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueOid(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueOid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueOid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueOid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueUUID(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueUUID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueUUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueUUID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueID(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueUnsignedInt(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueUnsignedInt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueUnsignedInt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valuePositiveInt(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valuePositiveInt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValuePositiveInt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valuePositiveInt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueMarkdown(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueMarkdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueMarkdown, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueMarkdown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueAnnotation(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueAnnotation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueAnnotation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Annotation)
	fc.Result = res
	return ec.marshalOAnnotation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueAnnotation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Annotation_id(ctx, field)
			case "AuthorReference":
				return ec.fieldContext_Annotation_AuthorReference(ctx, field)
			case "AuthorString":
				return ec.fieldContext_Annotation_AuthorString(ctx, field)
			case "Time":
				return ec.fieldContext_Annotation_Time(ctx, field)
			case "Text":
				return ec.fieldContext_Annotation_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Annotation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueAttachment(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueAttachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "contentType":
				return ec.fieldContext_Attachment_contentType(ctx, field)
			case "language":
				return ec.fieldContext_Attachment_language(ctx, field)
			case "data":
				return ec.fieldContext_Attachment_data(ctx, field)
			case "url":
				return ec.fieldContext_Attachment_url(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "hash":
				return ec.fieldContext_Attachment_hash(ctx, field)
			case "title":
				return ec.fieldContext_Attachment_title(ctx, field)
			case "creation":
				return ec.fieldContext_Attachment_creation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueIdentifier(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Identifier)
	fc.Result = res
	return ec.marshalOIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Identifier_id(ctx, field)
			case "use":
				return ec.fieldContext_Identifier_use(ctx, field)
			case "type":
				return ec.fieldContext_Identifier_type(ctx, field)
			case "system":
				return ec.fieldContext_Identifier_system(ctx, field)
			case "value":
				return ec.fieldContext_Identifier_value(ctx, field)
			case "period":
				return ec.fieldContext_Identifier_period(ctx, field)
			case "assigner":
				return ec.fieldContext_Identifier_assigner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Identifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.CodeableConcept)
	fc.Result = res
	return ec.marshalOCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueCodeableConcept(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CodeableConcept_id(ctx, field)
			case "coding":
				return ec.fieldContext_CodeableConcept_coding(ctx, field)
			case "text":
				return ec.fieldContext_CodeableConcept_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueCoding(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueCoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueCoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueQuantity(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueRange(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Range)
	fc.Result = res
	return ec.marshalORange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Range_id(ctx, field)
			case "low":
				return ec.fieldContext_Range_low(ctx, field)
			case "high":
				return ec.fieldContext_Range_high(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Range", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valuePeriod(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valuePeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValuePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Period)
	fc.Result = res
	return ec.marshalOPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valuePeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Period_id(ctx, field)
			case "start":
				return ec.fieldContext_Period_start(ctx, field)
			case "end":
				return ec.fieldContext_Period_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Period", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueRatio(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueRatio(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRatio, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Ratio)
	fc.Result = res
	return ec.marshalORatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRatio(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueRatio(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Ratio_id(ctx, field)
			case "numerator":
				return ec.fieldContext_Ratio_numerator(ctx, field)
			case "denominator":
				return ec.fieldContext_Ratio_denominator(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Ratio", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Extension_valueReference(ctx context.Context, field graphql.CollectedField, obj *dto.Extension) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Extension_valueReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Extension_valueReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Extension",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthTimeline_timeline(ctx context.Context, field graphql.CollectedField, obj *dto.HealthTimeline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HealthTimeline_timeline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.TimelineResource)
	fc.Result = res
	return ec.marshalOTimelineResource2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HealthTimeline_timeline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthTimeline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_TimelineResource_id(ctx, field)
			case "resourceType":
				return ec.fieldContext_TimelineResource_resourceType(ctx, field)
			case "name":
				return ec.fieldContext_TimelineResource_name(ctx, field)
			case "value":
				return ec.fieldContext_TimelineResource_value(ctx, field)
			case "status":
				return ec.fieldContext_TimelineResource_status(ctx, field)
			case "date":
				return ec.fieldContext_TimelineResource_date(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_TimelineResource_timeRecorded(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TimelineResource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _HealthTimeline_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.HealthTimeline) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_HealthTimeline_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_HealthTimeline_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "HealthTimeline",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_id(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_use(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_use(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Use, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_use(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_type(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.CodeableConcept)
	fc.Result = res
	return ec.marshalOCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CodeableConcept_id(ctx, field)
			case "coding":
				return ec.fieldContext_CodeableConcept_coding(ctx, field)
			case "text":
				return ec.fieldContext_CodeableConcept_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_system(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_value(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_period(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_period(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Period, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Period)
	fc.Result = res
	return ec.marshalOPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_period(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Period_id(ctx, field)
			case "start":
				return ec.fieldContext_Period_start(ctx, field)
			case "end":
				return ec.fieldContext_Period_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Period", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Identifier_assigner(ctx context.Context, field graphql.CollectedField, obj *dto.Identifier) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Identifier_assigner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Assigner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Identifier_assigner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Identifier",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_id(ctx context.Context, field graphql.CollectedField, obj *dto.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_name(ctx context.Context, field graphql.CollectedField, obj *dto.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_url(ctx context.Context, field graphql.CollectedField, obj *dto.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Media_contentType(ctx context.Context, field graphql.CollectedField, obj *dto.Media) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Media_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Media_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Media",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.MediaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.MediaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.MediaEdge)
	fc.Result = res
	return ec.marshalOMediaEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_MediaEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_MediaEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.MediaConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.MediaEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Media)
	fc.Result = res
	return ec.marshalOMedia2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Media_id(ctx, field)
			case "name":
				return ec.fieldContext_Media_name(ctx, field)
			case "url":
				return ec.fieldContext_Media_url(ctx, field)
			case "contentType":
				return ec.fieldContext_Media_contentType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Media", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MediaEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.MediaEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MediaEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MediaEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MediaEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_regimen(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_regimen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regimen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.MedicationStatement)
	fc.Result = res
	return ec.marshalOMedicationStatement2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_regimen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MedicationStatement_id(ctx, field)
			case "status":
				return ec.fieldContext_MedicationStatement_status(ctx, field)
			case "medication":
				return ec.fieldContext_MedicationStatement_medication(ctx, field)
			case "patientID":
				return ec.fieldContext_MedicationStatement_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MedicationStatement", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_allergies(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_allergies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allergies, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Allergy)
	fc.Result = res
	return ec.marshalOAllergy2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_allergies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Allergy_id(ctx, field)
			case "code":
				return ec.fieldContext_Allergy_code(ctx, field)
			case "name":
				return ec.fieldContext_Allergy_name(ctx, field)
			case "system":
				return ec.fieldContext_Allergy_system(ctx, field)
			case "terminologySource":
				return ec.fieldContext_Allergy_terminologySource(ctx, field)
			case "encounterID":
				return ec.fieldContext_Allergy_encounterID(ctx, field)
			case "reaction":
				return ec.fieldContext_Allergy_reaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Allergy", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_weight(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_weight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_weight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_bmi(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_bmi(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BMI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_bmi(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_viralLoad(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_viralLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViralLoad, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_viralLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicalData_cd4Count(ctx context.Context, field graphql.CollectedField, obj *dto.MedicalData) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicalData_cd4Count(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CD4Count, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicalData_cd4Count(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicalData",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Medication_name(ctx context.Context, field graphql.CollectedField, obj *dto.Medication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Medication_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Medication_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Medication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Medication_code(ctx context.Context, field graphql.CollectedField, obj *dto.Medication) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Medication_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Medication_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Medication",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_id(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_status(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.MedicationStatementStatusEnum)
	fc.Result = res
	return ec.marshalOMedicationStatementStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatementStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MedicationStatementStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_medication(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_medication(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medication, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.Medication)
	fc.Result = res
	return ec.marshalNMedication2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedication(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_medication(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_Medication_name(ctx, field)
			case "code":
				return ec.fieldContext_Medication_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Medication", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MedicationStatement_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.MedicationStatement) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MedicationStatement_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MedicationStatement_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MedicationStatement",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_versionId(ctx context.Context, field graphql.CollectedField, obj *dto.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_versionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_versionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_source(ctx context.Context, field graphql.CollectedField, obj *dto.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_tag(ctx context.Context, field graphql.CollectedField, obj *dto.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_tag(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_tag(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Meta_security(ctx context.Context, field graphql.CollectedField, obj *dto.Meta) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Meta_security(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Security, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Meta_security(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEpisodeOfCare(rctx, fc.Args["episodeOfCare"].(dto.EpisodeOfCareInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchEpisodeOfCare(rctx, fc.Args["id"].(string), fc.Args["episodeOfCare"].(dto.EpisodeOfCareInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalNEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_endEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_endEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EndEpisodeOfCare(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_endEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_endEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_startEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_startEncounter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartEncounter(rctx, fc.Args["episodeID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_startEncounter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_startEncounter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchEncounter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchEncounter(rctx, fc.Args["encounterID"].(string), fc.Args["input"].(dto.EncounterInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Encounter)
	fc.Result = res
	return ec.marshalNEncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchEncounter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Encounter_id(ctx, field)
			case "class":
				return ec.fieldContext_Encounter_class(ctx, field)
			case "episodeOfCareID":
				return ec.fieldContext_Encounter_episodeOfCareID(ctx, field)
			case "status":
				return ec.fieldContext_Encounter_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Encounter_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Encounter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchEncounter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_endEncounter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_endEncounter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EndEncounter(rctx, fc.Args["encounterID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_endEncounter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_endEncounter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordTemperature(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordTemperature(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordTemperature_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordHeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordHeight(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordHeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordHeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordWeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordWeight(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordWeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordRespiratoryRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordRespiratoryRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordRespiratoryRate(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordRespiratoryRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordRespiratoryRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordPulseRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordPulseRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordPulseRate(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordPulseRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordPulseRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordBloodPressure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordBloodPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordBloodPressure(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordBloodPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordBloodPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordBMI(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordBMI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordBmi(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordBMI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordBMI_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordViralLoad(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordViralLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordViralLoad(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordViralLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordViralLoad_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordMUAC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordMUAC(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordMuac(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordMUAC(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordMUAC_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordOxygenSaturation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordOxygenSaturation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordOxygenSaturation(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordOxygenSaturation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordOxygenSaturation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordBloodSugar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordBloodSugar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordBloodSugar(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordBloodSugar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordBloodSugar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordLastMenstrualPeriod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordLastMenstrualPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordLastMenstrualPeriod(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordLastMenstrualPeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordLastMenstrualPeriod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordDiastolicBloodPressure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordDiastolicBloodPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordDiastolicBloodPressure(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordDiastolicBloodPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordDiastolicBloodPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordColposcopy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordColposcopy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordColposcopy(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordColposcopy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordColposcopy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordHPV(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordHPV(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordHpv(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordHPV(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordHPV_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordVIA(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordVIA(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordVia(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordVIA(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordVIA_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordPapSmear(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordPapSmear(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordPapSmear(rctx, fc.Args["input"].(dto.ObservationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordPapSmear(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordPapSmear_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createPatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createPatient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePatient(rctx, fc.Args["input"].(dto.PatientInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Patient)
	fc.Result = res
	return ec.marshalNPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createPatient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Patient_id(ctx, field)
			case "active":
				return ec.fieldContext_Patient_active(ctx, field)
			case "name":
				return ec.fieldContext_Patient_name(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Patient_phoneNumber(ctx, field)
			case "gender":
				return ec.fieldContext_Patient_gender(ctx, field)
			case "birthDate":
				return ec.fieldContext_Patient_birthDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Patient", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createPatient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatient(rctx, fc.Args["id"].(string), fc.Args["input"].(dto.PatientInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Patient)
	fc.Result = res
	return ec.marshalNPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Patient_id(ctx, field)
			case "active":
				return ec.fieldContext_Patient_active(ctx, field)
			case "name":
				return ec.fieldContext_Patient_name(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Patient_phoneNumber(ctx, field)
			case "gender":
				return ec.fieldContext_Patient_gender(ctx, field)
			case "birthDate":
				return ec.fieldContext_Patient_birthDate(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Patient", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deletePatient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deletePatient(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePatient(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deletePatient(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deletePatient_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createCondition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createCondition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCondition(rctx, fc.Args["input"].(dto.ConditionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Condition)
	fc.Result = res
	return ec.marshalNCondition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCondition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createCondition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Condition_id(ctx, field)
			case "status":
				return ec.fieldContext_Condition_status(ctx, field)
			case "name":
				return ec.fieldContext_Condition_name(ctx, field)
			case "code":
				return ec.fieldContext_Condition_code(ctx, field)
			case "system":
				return ec.fieldContext_Condition_system(ctx, field)
			case "category":
				return ec.fieldContext_Condition_category(ctx, field)
			case "onsetDate":
				return ec.fieldContext_Condition_onsetDate(ctx, field)
			case "recordedDate":
				return ec.fieldContext_Condition_recordedDate(ctx, field)
			case "note":
				return ec.fieldContext_Condition_note(ctx, field)
			case "patientID":
				return ec.fieldContext_Condition_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Condition_encounterID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Condition", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createCondition_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAllergyIntolerance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAllergyIntolerance(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAllergyIntolerance(rctx, fc.Args["input"].(dto.AllergyInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Allergy)
	fc.Result = res
	return ec.marshalOAllergy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAllergyIntolerance(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Allergy_id(ctx, field)
			case "code":
				return ec.fieldContext_Allergy_code(ctx, field)
			case "name":
				return ec.fieldContext_Allergy_name(ctx, field)
			case "system":
				return ec.fieldContext_Allergy_system(ctx, field)
			case "terminologySource":
				return ec.fieldContext_Allergy_terminologySource(ctx, field)
			case "encounterID":
				return ec.fieldContext_Allergy_encounterID(ctx, field)
			case "reaction":
				return ec.fieldContext_Allergy_reaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Allergy", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAllergyIntolerance_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createComposition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createComposition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateComposition(rctx, fc.Args["input"].(dto.CompositionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Composition)
	fc.Result = res
	return ec.marshalNComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createComposition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Composition_id(ctx, field)
			case "text":
				return ec.fieldContext_Composition_text(ctx, field)
			case "type":
				return ec.fieldContext_Composition_type(ctx, field)
			case "category":
				return ec.fieldContext_Composition_category(ctx, field)
			case "status":
				return ec.fieldContext_Composition_status(ctx, field)
			case "date":
				return ec.fieldContext_Composition_date(ctx, field)
			case "section":
				return ec.fieldContext_Composition_section(ctx, field)
			case "patientID":
				return ec.fieldContext_Composition_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Composition_encounterID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Composition", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createComposition_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_appendNoteToComposition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_appendNoteToComposition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AppendNoteToComposition(rctx, fc.Args["id"].(string), fc.Args["input"].(dto.PatchCompositionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Composition)
	fc.Result = res
	return ec.marshalNComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐComposition(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_appendNoteToComposition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Composition_id(ctx, field)
			case "text":
				return ec.fieldContext_Composition_text(ctx, field)
			case "type":
				return ec.fieldContext_Composition_type(ctx, field)
			case "category":
				return ec.fieldContext_Composition_category(ctx, field)
			case "status":
				return ec.fieldContext_Composition_status(ctx, field)
			case "date":
				return ec.fieldContext_Composition_date(ctx, field)
			case "section":
				return ec.fieldContext_Composition_section(ctx, field)
			case "patientID":
				return ec.fieldContext_Composition_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Composition_encounterID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Composition", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_appendNoteToComposition_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientHeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientHeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientHeight(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientHeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientHeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientWeight(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientWeight(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientWeight(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientWeight(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientWeight_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientBMI(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientBMI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientBmi(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientBMI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientBMI_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientTemperature(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientTemperature(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientTemperature(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientTemperature(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientTemperature_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientDiastolicBloodPressure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientDiastolicBloodPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientDiastolicBloodPressure(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientDiastolicBloodPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientDiastolicBloodPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientSystolicBloodPressure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientSystolicBloodPressure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientSystolicBloodPressure(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientSystolicBloodPressure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientSystolicBloodPressure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientRespiratoryRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientRespiratoryRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientRespiratoryRate(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientRespiratoryRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientRespiratoryRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientOxygenSaturation(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientOxygenSaturation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientOxygenSaturation(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientOxygenSaturation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientOxygenSaturation_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientPulseRate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientPulseRate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientPulseRate(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientPulseRate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientPulseRate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientViralLoad(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientViralLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientViralLoad(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientViralLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientViralLoad_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientMuac(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientMuac(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientMuac(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientMuac(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientMuac_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientLastMenstrualPeriod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientLastMenstrualPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientLastMenstrualPeriod(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientLastMenstrualPeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientLastMenstrualPeriod_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchPatientBloodSugar(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchPatientBloodSugar(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PatchPatientBloodSugar(rctx, fc.Args["id"].(string), fc.Args["value"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Observation)
	fc.Result = res
	return ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchPatientBloodSugar(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchPatientBloodSugar_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordConsent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordConsent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordConsent(rctx, fc.Args["input"].(dto.ConsentInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.ConsentOutput)
	fc.Result = res
	return ec.marshalNConsentOutput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentOutput(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordConsent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "status":
				return ec.fieldContext_ConsentOutput_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConsentOutput", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordConsent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createQuestionnaireResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createQuestionnaireResponse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateQuestionnaireResponse(rctx, fc.Args["questionnaireID"].(string), fc.Args["encounterID"].(string), fc.Args["input"].(dto.QuestionnaireResponse))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createQuestionnaireResponse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createQuestionnaireResponse_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordMammographyResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordMammographyResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordMammographyResult(rctx, fc.Args["input"].(dto.DiagnosticReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DiagnosticReport)
	fc.Result = res
	return ec.marshalNDiagnosticReport2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordMammographyResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiagnosticReport_id(ctx, field)
			case "status":
				return ec.fieldContext_DiagnosticReport_status(ctx, field)
			case "patientID":
				return ec.fieldContext_DiagnosticReport_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_DiagnosticReport_encounterID(ctx, field)
			case "issued":
				return ec.fieldContext_DiagnosticReport_issued(ctx, field)
			case "result":
				return ec.fieldContext_DiagnosticReport_result(ctx, field)
			case "media":
				return ec.fieldContext_DiagnosticReport_media(ctx, field)
			case "conclusion":
				return ec.fieldContext_DiagnosticReport_conclusion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiagnosticReport", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordMammographyResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordBiopsy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordBiopsy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordBiopsy(rctx, fc.Args["input"].(dto.DiagnosticReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DiagnosticReport)
	fc.Result = res
	return ec.marshalNDiagnosticReport2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordBiopsy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiagnosticReport_id(ctx, field)
			case "status":
				return ec.fieldContext_DiagnosticReport_status(ctx, field)
			case "patientID":
				return ec.fieldContext_DiagnosticReport_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_DiagnosticReport_encounterID(ctx, field)
			case "issued":
				return ec.fieldContext_DiagnosticReport_issued(ctx, field)
			case "result":
				return ec.fieldContext_DiagnosticReport_result(ctx, field)
			case "media":
				return ec.fieldContext_DiagnosticReport_media(ctx, field)
			case "conclusion":
				return ec.fieldContext_DiagnosticReport_conclusion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiagnosticReport", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordBiopsy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordMRI(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordMRI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordMri(rctx, fc.Args["input"].(dto.DiagnosticReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DiagnosticReport)
	fc.Result = res
	return ec.marshalNDiagnosticReport2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordMRI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiagnosticReport_id(ctx, field)
			case "status":
				return ec.fieldContext_DiagnosticReport_status(ctx, field)
			case "patientID":
				return ec.fieldContext_DiagnosticReport_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_DiagnosticReport_encounterID(ctx, field)
			case "issued":
				return ec.fieldContext_DiagnosticReport_issued(ctx, field)
			case "result":
				return ec.fieldContext_DiagnosticReport_result(ctx, field)
			case "media":
				return ec.fieldContext_DiagnosticReport_media(ctx, field)
			case "conclusion":
				return ec.fieldContext_DiagnosticReport_conclusion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiagnosticReport", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordMRI_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordUltrasound(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordUltrasound(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordUltrasound(rctx, fc.Args["input"].(dto.DiagnosticReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DiagnosticReport)
	fc.Result = res
	return ec.marshalNDiagnosticReport2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordUltrasound(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiagnosticReport_id(ctx, field)
			case "status":
				return ec.fieldContext_DiagnosticReport_status(ctx, field)
			case "patientID":
				return ec.fieldContext_DiagnosticReport_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_DiagnosticReport_encounterID(ctx, field)
			case "issued":
				return ec.fieldContext_DiagnosticReport_issued(ctx, field)
			case "result":
				return ec.fieldContext_DiagnosticReport_result(ctx, field)
			case "media":
				return ec.fieldContext_DiagnosticReport_media(ctx, field)
			case "conclusion":
				return ec.fieldContext_DiagnosticReport_conclusion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiagnosticReport", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordUltrasound_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_recordCBE(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_recordCBE(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordCbe(rctx, fc.Args["input"].(dto.DiagnosticReportInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.DiagnosticReport)
	fc.Result = res
	return ec.marshalNDiagnosticReport2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_recordCBE(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DiagnosticReport_id(ctx, field)
			case "status":
				return ec.fieldContext_DiagnosticReport_status(ctx, field)
			case "patientID":
				return ec.fieldContext_DiagnosticReport_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_DiagnosticReport_encounterID(ctx, field)
			case "issued":
				return ec.fieldContext_DiagnosticReport_issued(ctx, field)
			case "result":
				return ec.fieldContext_DiagnosticReport_result(ctx, field)
			case "media":
				return ec.fieldContext_DiagnosticReport_media(ctx, field)
			case "conclusion":
				return ec.fieldContext_DiagnosticReport_conclusion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DiagnosticReport", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_recordCBE_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_getEncounterAssociatedResources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_getEncounterAssociatedResources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().GetEncounterAssociatedResources(rctx, fc.Args["encounterID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.EncounterAssociatedResources)
	fc.Result = res
	return ec.marshalNEncounterAssociatedResources2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterAssociatedResources(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_getEncounterAssociatedResources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "riskAssessment":
				return ec.fieldContext_EncounterAssociatedResources_riskAssessment(ctx, field)
			case "consent":
				return ec.fieldContext_EncounterAssociatedResources_consent(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EncounterAssociatedResources", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_getEncounterAssociatedResources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Narrative_id(ctx context.Context, field graphql.CollectedField, obj *dto.Narrative) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Narrative_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Narrative_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Narrative",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Narrative_status(ctx context.Context, field graphql.CollectedField, obj *dto.Narrative) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Narrative_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Narrative_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Narrative",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Narrative_div(ctx context.Context, field graphql.CollectedField, obj *dto.Narrative) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Narrative_div(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Div, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.XHTML)
	fc.Result = res
	return ec.marshalOXHTML2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Narrative_div(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Narrative",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type XHTML does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_id(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_status(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.ObservationStatus)
	fc.Result = res
	return ec.marshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObservationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_patientID(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_patientID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_patientID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_encounterID(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_encounterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EncounterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_encounterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_name(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_value(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_timeRecorded(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_timeRecorded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeRecorded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_timeRecorded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_interpretation(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_interpretation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interpretation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_interpretation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Observation_note(ctx context.Context, field graphql.CollectedField, obj *dto.Observation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Observation_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Observation_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Observation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObservationConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.ObservationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObservationConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObservationConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObservationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObservationConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.ObservationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObservationConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.ObservationEdge)
	fc.Result = res
	return ec.marshalOObservationEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObservationConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObservationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_ObservationEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_ObservationEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObservationConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.ObservationConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObservationConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObservationConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObservationEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.ObservationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObservationEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Observation)
	fc.Result = res
	return ec.marshalOObservation2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObservationEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObservationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Observation_id(ctx, field)
			case "status":
				return ec.fieldContext_Observation_status(ctx, field)
			case "patientID":
				return ec.fieldContext_Observation_patientID(ctx, field)
			case "encounterID":
				return ec.fieldContext_Observation_encounterID(ctx, field)
			case "name":
				return ec.fieldContext_Observation_name(ctx, field)
			case "value":
				return ec.fieldContext_Observation_value(ctx, field)
			case "timeRecorded":
				return ec.fieldContext_Observation_timeRecorded(ctx, field)
			case "interpretation":
				return ec.fieldContext_Observation_interpretation(ctx, field)
			case "note":
				return ec.fieldContext_Observation_note(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Observation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObservationEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.ObservationEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObservationEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObservationEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObservationEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *dto.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *dto.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *dto.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalOBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *dto.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_id(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_active(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_active(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_active(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_name(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_gender(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_gender(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.Gender)
	fc.Result = res
	return ec.marshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_gender(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Gender does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Patient_birthDate(ctx context.Context, field graphql.CollectedField, obj *dto.Patient) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Patient_birthDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BirthDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Patient_birthDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Patient",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Period_id(ctx context.Context, field graphql.CollectedField, obj *dto.Period) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Period_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Period_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Period",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Period_start(ctx context.Context, field graphql.CollectedField, obj *dto.Period) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Period_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Period_start(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Period",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Period_end(ctx context.Context, field graphql.CollectedField, obj *dto.Period) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Period_end(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Period_end(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Period",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quantity_value(ctx context.Context, field graphql.CollectedField, obj *dto.Quantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quantity_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalOFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quantity_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quantity_comparator(ctx context.Context, field graphql.CollectedField, obj *dto.Quantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quantity_comparator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.QuantityComparatorEnum)
	fc.Result = res
	return ec.marshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantityComparatorEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quantity_comparator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuantityComparatorEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quantity_unit(ctx context.Context, field graphql.CollectedField, obj *dto.Quantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quantity_unit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quantity_unit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quantity_system(ctx context.Context, field graphql.CollectedField, obj *dto.Quantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quantity_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quantity_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quantity_code(ctx context.Context, field graphql.CollectedField, obj *dto.Quantity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quantity_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quantity_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quantity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_patientHealthTimeline(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_patientHealthTimeline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PatientHealthTimeline(rctx, fc.Args["input"].(dto.HealthTimelineInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.HealthTimeline)
	fc.Result = res
	return ec.marshalNHealthTimeline2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimeline(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_patientHealthTimeline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "timeline":
				return ec.fieldContext_HealthTimeline_timeline(ctx, field)
			case "totalCount":
				return ec.fieldContext_HealthTimeline_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type HealthTimeline", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_patientHealthTimeline_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getMedicalData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getMedicalData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMedicalData(rctx, fc.Args["patientID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.MedicalData)
	fc.Result = res
	return ec.marshalOMedicalData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicalData(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getMedicalData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "regimen":
				return ec.fieldContext_MedicalData_regimen(ctx, field)
			case "allergies":
				return ec.fieldContext_MedicalData_allergies(ctx, field)
			case "weight":
				return ec.fieldContext_MedicalData_weight(ctx, field)
			case "bmi":
				return ec.fieldContext_MedicalData_bmi(ctx, field)
			case "viralLoad":
				return ec.fieldContext_MedicalData_viralLoad(ctx, field)
			case "cd4Count":
				return ec.fieldContext_MedicalData_cd4Count(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MedicalData", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getMedicalData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getEpisodeOfCare(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetEpisodeOfCare(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EpisodeOfCare)
	fc.Result = res
	return ec.marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getEpisodeOfCare(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EpisodeOfCare_id(ctx, field)
			case "status":
				return ec.fieldContext_EpisodeOfCare_status(ctx, field)
			case "patientID":
				return ec.fieldContext_EpisodeOfCare_patientID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EpisodeOfCare", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getEpisodeOfCare_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPatientConditions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPatientConditions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPatientConditions(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ConditionConnection)
	fc.Result = res
	return ec.marshalOConditionConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPatientConditions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ConditionConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ConditionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ConditionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConditionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPatientConditions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPatientCompositions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPatientCompositions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPatientCompositions(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.CompositionConnection)
	fc.Result = res
	return ec.marshalOCompositionConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPatientCompositions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_CompositionConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_CompositionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CompositionConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompositionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPatientCompositions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPatientEncounters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPatientEncounters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPatientEncounters(rctx, fc.Args["patientID"].(string), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.EncounterConnection)
	fc.Result = res
	return ec.marshalOEncounterConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPatientEncounters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_EncounterConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_EncounterConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_EncounterConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EncounterConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPatientEncounters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientTemperatureEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientTemperatureEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientTemperatureEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientTemperatureEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientTemperatureEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientBloodPressureEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientBloodPressureEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientBloodPressureEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientBloodPressureEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientBloodPressureEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientHeightEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientHeightEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientHeightEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientHeightEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientHeightEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientRespiratoryRateEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientRespiratoryRateEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientRespiratoryRateEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientRespiratoryRateEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientRespiratoryRateEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientPulseRateEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientPulseRateEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientPulseRateEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientPulseRateEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientPulseRateEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientBMIEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientBMIEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientBMIEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientBMIEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientBMIEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientWeightEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientWeightEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientWeightEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientWeightEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientWeightEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientMuacEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientMuacEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientMuacEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientMuacEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientMuacEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientOxygenSaturationEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientOxygenSaturationEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientOxygenSaturationEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientOxygenSaturationEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientOxygenSaturationEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientViralLoad(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientViralLoad(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientViralLoad(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientViralLoad(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientViralLoad_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientBloodSugarEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientBloodSugarEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientBloodSugarEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientBloodSugarEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientBloodSugarEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientLastMenstrualPeriodEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientLastMenstrualPeriodEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientLastMenstrualPeriodEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientLastMenstrualPeriodEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientLastMenstrualPeriodEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getPatientDiastolicBloodPressureEntries(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getPatientDiastolicBloodPressureEntries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetPatientDiastolicBloodPressureEntries(rctx, fc.Args["patientID"].(string), fc.Args["encounterID"].(*string), fc.Args["date"].(*scalarutils.Date), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.ObservationConnection)
	fc.Result = res
	return ec.marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getPatientDiastolicBloodPressureEntries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_ObservationConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_ObservationConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_ObservationConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObservationConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getPatientDiastolicBloodPressureEntries_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchAllergy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchAllergy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchAllergy(rctx, fc.Args["name"].(string), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.TerminologyConnection)
	fc.Result = res
	return ec.marshalOTerminologyConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchAllergy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_TerminologyConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_TerminologyConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TerminologyConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerminologyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchAllergy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getAllergy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getAllergy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllergy(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Allergy)
	fc.Result = res
	return ec.marshalNAllergy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getAllergy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Allergy_id(ctx, field)
			case "code":
				return ec.fieldContext_Allergy_code(ctx, field)
			case "name":
				return ec.fieldContext_Allergy_name(ctx, field)
			case "system":
				return ec.fieldContext_Allergy_system(ctx, field)
			case "terminologySource":
				return ec.fieldContext_Allergy_terminologySource(ctx, field)
			case "encounterID":
				return ec.fieldContext_Allergy_encounterID(ctx, field)
			case "reaction":
				return ec.fieldContext_Allergy_reaction(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Allergy", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getAllergy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPatientAllergies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPatientAllergies(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPatientAllergies(rctx, fc.Args["patientID"].(string), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.AllergyConnection)
	fc.Result = res
	return ec.marshalOAllergyConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPatientAllergies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_AllergyConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_AllergyConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AllergyConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AllergyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPatientAllergies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPatientMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPatientMedia(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPatientMedia(rctx, fc.Args["patientID"].(string), fc.Args["pagination"].(dto.Pagination))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.MediaConnection)
	fc.Result = res
	return ec.marshalOMediaConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPatientMedia(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "totalCount":
				return ec.fieldContext_MediaConnection_totalCount(ctx, field)
			case "edges":
				return ec.fieldContext_MediaConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_MediaConnection_pageInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MediaConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listPatientMedia_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_getQuestionnaireResponseRiskLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getQuestionnaireResponseRiskLevel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetQuestionnaireResponseRiskLevel(rctx, fc.Args["encounterID"].(string), fc.Args["screeningType"].(domain.ScreeningTypeEnum))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getQuestionnaireResponseRiskLevel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getQuestionnaireResponseRiskLevel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query__service(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query__service(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sdl":
				return ec.fieldContext__Service_sdl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type _Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_id(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_resourceType(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_resourceType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_resourceType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_meta(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Meta)
	fc.Result = res
	return ec.marshalOMeta2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "versionId":
				return ec.fieldContext_Meta_versionId(ctx, field)
			case "source":
				return ec.fieldContext_Meta_source(ctx, field)
			case "tag":
				return ec.fieldContext_Meta_tag(ctx, field)
			case "security":
				return ec.fieldContext_Meta_security(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_implicitRules(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_implicitRules(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImplicitRules, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_implicitRules(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_language(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_language(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_language(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_text(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Narrative)
	fc.Result = res
	return ec.marshalONarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐNarrative(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Narrative_id(ctx, field)
			case "status":
				return ec.fieldContext_Narrative_status(ctx, field)
			case "div":
				return ec.fieldContext_Narrative_div(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Narrative", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_extension(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_modifierExtension(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_modifierExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifierExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_modifierExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_url(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_identifier(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*[]dto.Identifier)
	fc.Result = res
	return ec.marshalOIdentifier2ᚖᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Identifier_id(ctx, field)
			case "use":
				return ec.fieldContext_Identifier_use(ctx, field)
			case "type":
				return ec.fieldContext_Identifier_type(ctx, field)
			case "system":
				return ec.fieldContext_Identifier_system(ctx, field)
			case "value":
				return ec.fieldContext_Identifier_value(ctx, field)
			case "period":
				return ec.fieldContext_Identifier_period(ctx, field)
			case "assigner":
				return ec.fieldContext_Identifier_assigner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Identifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_version(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_name(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_title(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_derivedFrom(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_derivedFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DerivedFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_derivedFrom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_status(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_experimental(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_experimental(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Experimental, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_experimental(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_date(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_publisher(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_publisher(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Publisher, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_publisher(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_description(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_useContext(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_useContext(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseContext, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.UsageContext)
	fc.Result = res
	return ec.marshalOUsageContext2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐUsageContext(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_useContext(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_UsageContext_id(ctx, field)
			case "extension":
				return ec.fieldContext_UsageContext_extension(ctx, field)
			case "code":
				return ec.fieldContext_UsageContext_code(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_UsageContext_valueCodeableConcept(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_UsageContext_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_UsageContext_valueRange(ctx, field)
			case "valueReference":
				return ec.fieldContext_UsageContext_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UsageContext", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_jurisdiction(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_jurisdiction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Jurisdiction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.CodeableConcept)
	fc.Result = res
	return ec.marshalOCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_jurisdiction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CodeableConcept_id(ctx, field)
			case "coding":
				return ec.fieldContext_CodeableConcept_coding(ctx, field)
			case "text":
				return ec.fieldContext_CodeableConcept_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_purpose(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_purpose(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Purpose, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_purpose(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_effectivePeriod(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_effectivePeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EffectivePeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Period)
	fc.Result = res
	return ec.marshalOPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPeriod(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_effectivePeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Period_id(ctx, field)
			case "start":
				return ec.fieldContext_Period_start(ctx, field)
			case "end":
				return ec.fieldContext_Period_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Period", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_code(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Questionnaire_item(ctx context.Context, field graphql.CollectedField, obj *dto.Questionnaire) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Questionnaire_item(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.QuestionnaireItem)
	fc.Result = res
	return ec.marshalOQuestionnaireItem2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Questionnaire_item(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Questionnaire",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireItem_id(ctx, field)
			case "meta":
				return ec.fieldContext_QuestionnaireItem_meta(ctx, field)
			case "extension":
				return ec.fieldContext_QuestionnaireItem_extension(ctx, field)
			case "modifierExtension":
				return ec.fieldContext_QuestionnaireItem_modifierExtension(ctx, field)
			case "linkId":
				return ec.fieldContext_QuestionnaireItem_linkId(ctx, field)
			case "definition":
				return ec.fieldContext_QuestionnaireItem_definition(ctx, field)
			case "code":
				return ec.fieldContext_QuestionnaireItem_code(ctx, field)
			case "prefix":
				return ec.fieldContext_QuestionnaireItem_prefix(ctx, field)
			case "text":
				return ec.fieldContext_QuestionnaireItem_text(ctx, field)
			case "type":
				return ec.fieldContext_QuestionnaireItem_type(ctx, field)
			case "enableWhen":
				return ec.fieldContext_QuestionnaireItem_enableWhen(ctx, field)
			case "enableBehavior":
				return ec.fieldContext_QuestionnaireItem_enableBehavior(ctx, field)
			case "disabledDisplay":
				return ec.fieldContext_QuestionnaireItem_disabledDisplay(ctx, field)
			case "required":
				return ec.fieldContext_QuestionnaireItem_required(ctx, field)
			case "repeats":
				return ec.fieldContext_QuestionnaireItem_repeats(ctx, field)
			case "readOnly":
				return ec.fieldContext_QuestionnaireItem_readOnly(ctx, field)
			case "maxLength":
				return ec.fieldContext_QuestionnaireItem_maxLength(ctx, field)
			case "answerValueSet":
				return ec.fieldContext_QuestionnaireItem_answerValueSet(ctx, field)
			case "answerOption":
				return ec.fieldContext_QuestionnaireItem_answerOption(ctx, field)
			case "initial":
				return ec.fieldContext_QuestionnaireItem_initial(ctx, field)
			case "item":
				return ec.fieldContext_QuestionnaireItem_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.QuestionnaireEdge)
	fc.Result = res
	return ec.marshalOQuestionnaireEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_QuestionnaireEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_QuestionnaireEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Questionnaire)
	fc.Result = res
	return ec.marshalOQuestionnaire2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaire(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Questionnaire_id(ctx, field)
			case "resourceType":
				return ec.fieldContext_Questionnaire_resourceType(ctx, field)
			case "meta":
				return ec.fieldContext_Questionnaire_meta(ctx, field)
			case "implicitRules":
				return ec.fieldContext_Questionnaire_implicitRules(ctx, field)
			case "language":
				return ec.fieldContext_Questionnaire_language(ctx, field)
			case "text":
				return ec.fieldContext_Questionnaire_text(ctx, field)
			case "extension":
				return ec.fieldContext_Questionnaire_extension(ctx, field)
			case "modifierExtension":
				return ec.fieldContext_Questionnaire_modifierExtension(ctx, field)
			case "url":
				return ec.fieldContext_Questionnaire_url(ctx, field)
			case "identifier":
				return ec.fieldContext_Questionnaire_identifier(ctx, field)
			case "version":
				return ec.fieldContext_Questionnaire_version(ctx, field)
			case "name":
				return ec.fieldContext_Questionnaire_name(ctx, field)
			case "title":
				return ec.fieldContext_Questionnaire_title(ctx, field)
			case "derivedFrom":
				return ec.fieldContext_Questionnaire_derivedFrom(ctx, field)
			case "status":
				return ec.fieldContext_Questionnaire_status(ctx, field)
			case "experimental":
				return ec.fieldContext_Questionnaire_experimental(ctx, field)
			case "date":
				return ec.fieldContext_Questionnaire_date(ctx, field)
			case "publisher":
				return ec.fieldContext_Questionnaire_publisher(ctx, field)
			case "description":
				return ec.fieldContext_Questionnaire_description(ctx, field)
			case "useContext":
				return ec.fieldContext_Questionnaire_useContext(ctx, field)
			case "jurisdiction":
				return ec.fieldContext_Questionnaire_jurisdiction(ctx, field)
			case "purpose":
				return ec.fieldContext_Questionnaire_purpose(ctx, field)
			case "effectivePeriod":
				return ec.fieldContext_Questionnaire_effectivePeriod(ctx, field)
			case "code":
				return ec.fieldContext_Questionnaire_code(ctx, field)
			case "item":
				return ec.fieldContext_Questionnaire_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Questionnaire", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_id(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_meta(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_meta(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Meta)
	fc.Result = res
	return ec.marshalOMeta2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_meta(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "versionId":
				return ec.fieldContext_Meta_versionId(ctx, field)
			case "source":
				return ec.fieldContext_Meta_source(ctx, field)
			case "tag":
				return ec.fieldContext_Meta_tag(ctx, field)
			case "security":
				return ec.fieldContext_Meta_security(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Meta", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_extension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_modifierExtension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_modifierExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifierExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_modifierExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_linkId(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_linkId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_linkId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_definition(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_definition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Definition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_definition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_code(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_prefix(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_prefix(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prefix, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_prefix(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_text(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_type(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_enableWhen(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_enableWhen(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableWhen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.QuestionnaireItemEnableWhen)
	fc.Result = res
	return ec.marshalOQuestionnaireItemEnableWhen2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemEnableWhen(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_enableWhen(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireItemEnableWhen_id(ctx, field)
			case "extension":
				return ec.fieldContext_QuestionnaireItemEnableWhen_extension(ctx, field)
			case "modifierExtension":
				return ec.fieldContext_QuestionnaireItemEnableWhen_modifierExtension(ctx, field)
			case "question":
				return ec.fieldContext_QuestionnaireItemEnableWhen_question(ctx, field)
			case "operator":
				return ec.fieldContext_QuestionnaireItemEnableWhen_operator(ctx, field)
			case "answerBoolean":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerBoolean(ctx, field)
			case "answerDecimal":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerDecimal(ctx, field)
			case "answerInteger":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerInteger(ctx, field)
			case "answerDate":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerDate(ctx, field)
			case "answerDateTime":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerDateTime(ctx, field)
			case "answerTime":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerTime(ctx, field)
			case "answerString":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerString(ctx, field)
			case "answerCoding":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerCoding(ctx, field)
			case "answerQuantity":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerQuantity(ctx, field)
			case "answerReference":
				return ec.fieldContext_QuestionnaireItemEnableWhen_answerReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireItemEnableWhen", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_enableBehavior(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_enableBehavior(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnableBehavior, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_enableBehavior(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_disabledDisplay(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_disabledDisplay(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisabledDisplay, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_disabledDisplay(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_required(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_required(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_required(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_repeats(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_repeats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Repeats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_repeats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_readOnly(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_readOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_readOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_maxLength(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_maxLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_maxLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_answerValueSet(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_answerValueSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerValueSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_answerValueSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_answerOption(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_answerOption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerOption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.QuestionnaireItemAnswerOption)
	fc.Result = res
	return ec.marshalOQuestionnaireItemAnswerOption2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemAnswerOption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_answerOption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireItemAnswerOption_id(ctx, field)
			case "extension":
				return ec.fieldContext_QuestionnaireItemAnswerOption_extension(ctx, field)
			case "modifierExtension":
				return ec.fieldContext_QuestionnaireItemAnswerOption_modifierExtension(ctx, field)
			case "valueInteger":
				return ec.fieldContext_QuestionnaireItemAnswerOption_valueInteger(ctx, field)
			case "valueDate":
				return ec.fieldContext_QuestionnaireItemAnswerOption_valueDate(ctx, field)
			case "valueString":
				return ec.fieldContext_QuestionnaireItemAnswerOption_valueString(ctx, field)
			case "valueCoding":
				return ec.fieldContext_QuestionnaireItemAnswerOption_valueCoding(ctx, field)
			case "valueReference":
				return ec.fieldContext_QuestionnaireItemAnswerOption_valueReference(ctx, field)
			case "initialSelected":
				return ec.fieldContext_QuestionnaireItemAnswerOption_initialSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireItemAnswerOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_initial(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_initial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Initial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.QuestionnaireItemInitial)
	fc.Result = res
	return ec.marshalOQuestionnaireItemInitial2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemInitial(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_initial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireItemInitial_id(ctx, field)
			case "extension":
				return ec.fieldContext_QuestionnaireItemInitial_extension(ctx, field)
			case "modifierExtension":
				return ec.fieldContext_QuestionnaireItemInitial_modifierExtension(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_QuestionnaireItemInitial_valueBoolean(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_QuestionnaireItemInitial_valueDecimal(ctx, field)
			case "valueInteger":
				return ec.fieldContext_QuestionnaireItemInitial_valueInteger(ctx, field)
			case "valueDate":
				return ec.fieldContext_QuestionnaireItemInitial_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_QuestionnaireItemInitial_valueDateTime(ctx, field)
			case "valueString":
				return ec.fieldContext_QuestionnaireItemInitial_valueString(ctx, field)
			case "valueUri":
				return ec.fieldContext_QuestionnaireItemInitial_valueUri(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_QuestionnaireItemInitial_valueAttachment(ctx, field)
			case "valueCoding":
				return ec.fieldContext_QuestionnaireItemInitial_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_QuestionnaireItemInitial_valueQuantity(ctx, field)
			case "valueReference":
				return ec.fieldContext_QuestionnaireItemInitial_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireItemInitial", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItem_item(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItem_item(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.QuestionnaireItem)
	fc.Result = res
	return ec.marshalOQuestionnaireItem2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItem_item(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_QuestionnaireItem_id(ctx, field)
			case "meta":
				return ec.fieldContext_QuestionnaireItem_meta(ctx, field)
			case "extension":
				return ec.fieldContext_QuestionnaireItem_extension(ctx, field)
			case "modifierExtension":
				return ec.fieldContext_QuestionnaireItem_modifierExtension(ctx, field)
			case "linkId":
				return ec.fieldContext_QuestionnaireItem_linkId(ctx, field)
			case "definition":
				return ec.fieldContext_QuestionnaireItem_definition(ctx, field)
			case "code":
				return ec.fieldContext_QuestionnaireItem_code(ctx, field)
			case "prefix":
				return ec.fieldContext_QuestionnaireItem_prefix(ctx, field)
			case "text":
				return ec.fieldContext_QuestionnaireItem_text(ctx, field)
			case "type":
				return ec.fieldContext_QuestionnaireItem_type(ctx, field)
			case "enableWhen":
				return ec.fieldContext_QuestionnaireItem_enableWhen(ctx, field)
			case "enableBehavior":
				return ec.fieldContext_QuestionnaireItem_enableBehavior(ctx, field)
			case "disabledDisplay":
				return ec.fieldContext_QuestionnaireItem_disabledDisplay(ctx, field)
			case "required":
				return ec.fieldContext_QuestionnaireItem_required(ctx, field)
			case "repeats":
				return ec.fieldContext_QuestionnaireItem_repeats(ctx, field)
			case "readOnly":
				return ec.fieldContext_QuestionnaireItem_readOnly(ctx, field)
			case "maxLength":
				return ec.fieldContext_QuestionnaireItem_maxLength(ctx, field)
			case "answerValueSet":
				return ec.fieldContext_QuestionnaireItem_answerValueSet(ctx, field)
			case "answerOption":
				return ec.fieldContext_QuestionnaireItem_answerOption(ctx, field)
			case "initial":
				return ec.fieldContext_QuestionnaireItem_initial(ctx, field)
			case "item":
				return ec.fieldContext_QuestionnaireItem_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_id(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_extension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_modifierExtension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_modifierExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifierExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_modifierExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_valueInteger(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_valueInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_valueInteger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_valueDate(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_valueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_valueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_valueString(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_valueString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_valueString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_valueCoding(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_valueCoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_valueCoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_valueReference(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_valueReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_valueReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemAnswerOption_initialSelected(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemAnswerOption) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemAnswerOption_initialSelected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InitialSelected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemAnswerOption_initialSelected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemAnswerOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_id(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_extension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_modifierExtension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_modifierExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifierExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_modifierExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_question(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_question(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_question(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_operator(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_operator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Operator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Code)
	fc.Result = res
	return ec.marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_operator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Code does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerBoolean(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerBoolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerBoolean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerDecimal(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerDecimal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerDecimal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerDecimal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerInteger(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerInteger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerDate(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerDateTime(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerDateTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerDateTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerTime(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerString(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerCoding(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerCoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerCoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerCoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerQuantity(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemEnableWhen_answerReference(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemEnableWhen) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemEnableWhen_answerReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnswerReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemEnableWhen_answerReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemEnableWhen",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_id(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_extension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_modifierExtension(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_modifierExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ModifierExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_modifierExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueBoolean(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueBoolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueBoolean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueDecimal(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueDecimal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDecimal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueDecimal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueInteger(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueInteger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueDate(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueDateTime(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueDateTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.DateTime)
	fc.Result = res
	return ec.marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueDateTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueString(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueUri(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueUri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueUri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueAttachment(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueAttachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "contentType":
				return ec.fieldContext_Attachment_contentType(ctx, field)
			case "language":
				return ec.fieldContext_Attachment_language(ctx, field)
			case "data":
				return ec.fieldContext_Attachment_data(ctx, field)
			case "url":
				return ec.fieldContext_Attachment_url(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "hash":
				return ec.fieldContext_Attachment_hash(ctx, field)
			case "title":
				return ec.fieldContext_Attachment_title(ctx, field)
			case "creation":
				return ec.fieldContext_Attachment_creation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueCoding(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueCoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueCoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueQuantity(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireItemInitial_valueReference(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireItemInitial) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireItemInitial_valueReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireItemInitial_valueReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireItemInitial",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponse_status(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponse_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.QuestionnaireResponseStatusEnum)
	fc.Result = res
	return ec.marshalNQuestionnaireResponseStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseStatusEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponse_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type QuestionnaireResponseStatusEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponse_authored(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponse_authored(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Authored, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponse_authored(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponse_item(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponse) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponse_item(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.QuestionnaireResponseItem)
	fc.Result = res
	return ec.marshalOQuestionnaireResponseItem2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponse_item(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponse",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "linkId":
				return ec.fieldContext_QuestionnaireResponseItem_linkId(ctx, field)
			case "text":
				return ec.fieldContext_QuestionnaireResponseItem_text(ctx, field)
			case "answer":
				return ec.fieldContext_QuestionnaireResponseItem_answer(ctx, field)
			case "item":
				return ec.fieldContext_QuestionnaireResponseItem_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireResponseItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItem_linkId(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItem_linkId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItem_linkId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItem_text(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItem_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItem_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItem_answer(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItem_answer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.QuestionnaireResponseItemAnswer)
	fc.Result = res
	return ec.marshalOQuestionnaireResponseItemAnswer2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItem_answer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "valueBoolean":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueBoolean(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueDecimal(ctx, field)
			case "valueInteger":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueInteger(ctx, field)
			case "valueDate":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueTime(ctx, field)
			case "valueString":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueString(ctx, field)
			case "valueUri":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueUri(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueAttachment(ctx, field)
			case "valueCoding":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueQuantity(ctx, field)
			case "valueReference":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_valueReference(ctx, field)
			case "item":
				return ec.fieldContext_QuestionnaireResponseItemAnswer_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireResponseItemAnswer", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItem_item(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItem_item(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.QuestionnaireResponseItem)
	fc.Result = res
	return ec.marshalOQuestionnaireResponseItem2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItem_item(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "linkId":
				return ec.fieldContext_QuestionnaireResponseItem_linkId(ctx, field)
			case "text":
				return ec.fieldContext_QuestionnaireResponseItem_text(ctx, field)
			case "answer":
				return ec.fieldContext_QuestionnaireResponseItem_answer(ctx, field)
			case "item":
				return ec.fieldContext_QuestionnaireResponseItem_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireResponseItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueBoolean(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueBoolean(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueBoolean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueBoolean(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueDecimal(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueDecimal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDecimal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueDecimal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueInteger(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueInteger(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueInteger, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueInteger(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueDate(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueDateTime(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueDateTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueDateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueDateTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueTime(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueString(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueUri(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueUri(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueUri(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueAttachment(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueAttachment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueAttachment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Attachment)
	fc.Result = res
	return ec.marshalOAttachment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAttachment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueAttachment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Attachment_id(ctx, field)
			case "contentType":
				return ec.fieldContext_Attachment_contentType(ctx, field)
			case "language":
				return ec.fieldContext_Attachment_language(ctx, field)
			case "data":
				return ec.fieldContext_Attachment_data(ctx, field)
			case "url":
				return ec.fieldContext_Attachment_url(ctx, field)
			case "size":
				return ec.fieldContext_Attachment_size(ctx, field)
			case "hash":
				return ec.fieldContext_Attachment_hash(ctx, field)
			case "title":
				return ec.fieldContext_Attachment_title(ctx, field)
			case "creation":
				return ec.fieldContext_Attachment_creation(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Attachment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueCoding(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueCoding(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCoding, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueCoding(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueQuantity(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_valueReference(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_valueReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_valueReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _QuestionnaireResponseItemAnswer_item(ctx context.Context, field graphql.CollectedField, obj *dto.QuestionnaireResponseItemAnswer) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_QuestionnaireResponseItemAnswer_item(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Item, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.QuestionnaireResponseItem)
	fc.Result = res
	return ec.marshalOQuestionnaireResponseItem2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_QuestionnaireResponseItemAnswer_item(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "QuestionnaireResponseItemAnswer",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "linkId":
				return ec.fieldContext_QuestionnaireResponseItem_linkId(ctx, field)
			case "text":
				return ec.fieldContext_QuestionnaireResponseItem_text(ctx, field)
			case "answer":
				return ec.fieldContext_QuestionnaireResponseItem_answer(ctx, field)
			case "item":
				return ec.fieldContext_QuestionnaireResponseItem_item(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type QuestionnaireResponseItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Range_id(ctx context.Context, field graphql.CollectedField, obj *dto.Range) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Range_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Range_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Range",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Range_low(ctx context.Context, field graphql.CollectedField, obj *dto.Range) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Range_low(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Low, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Range_low(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Range",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Range_high(ctx context.Context, field graphql.CollectedField, obj *dto.Range) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Range_high(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.High, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Range_high(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Range",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ratio_id(ctx context.Context, field graphql.CollectedField, obj *dto.Ratio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ratio_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ratio_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ratio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ratio_numerator(ctx context.Context, field graphql.CollectedField, obj *dto.Ratio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ratio_numerator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Numerator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ratio_numerator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ratio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Ratio_denominator(ctx context.Context, field graphql.CollectedField, obj *dto.Ratio) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Ratio_denominator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Denominator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Ratio_denominator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Ratio",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_code(ctx context.Context, field graphql.CollectedField, obj *dto.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_name(ctx context.Context, field graphql.CollectedField, obj *dto.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_system(ctx context.Context, field graphql.CollectedField, obj *dto.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reaction_severity(ctx context.Context, field graphql.CollectedField, obj *dto.Reaction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reaction_severity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Severity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.AllergyIntoleranceReactionSeverityEnum)
	fc.Result = res
	return ec.marshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reaction_severity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reaction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AllergyIntoleranceReactionSeverityEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_id(ctx context.Context, field graphql.CollectedField, obj *dto.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_reference(ctx context.Context, field graphql.CollectedField, obj *dto.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_reference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_reference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_type(ctx context.Context, field graphql.CollectedField, obj *dto.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.URI)
	fc.Result = res
	return ec.marshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type URI does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_identifier(ctx context.Context, field graphql.CollectedField, obj *dto.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_identifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Identifier)
	fc.Result = res
	return ec.marshalOIdentifier2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_identifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Identifier_id(ctx, field)
			case "use":
				return ec.fieldContext_Identifier_use(ctx, field)
			case "type":
				return ec.fieldContext_Identifier_type(ctx, field)
			case "system":
				return ec.fieldContext_Identifier_system(ctx, field)
			case "value":
				return ec.fieldContext_Identifier_value(ctx, field)
			case "period":
				return ec.fieldContext_Identifier_period(ctx, field)
			case "assigner":
				return ec.fieldContext_Identifier_assigner(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Identifier", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Reference_display(ctx context.Context, field graphql.CollectedField, obj *dto.Reference) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Reference_display(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Display, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Reference_display(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Reference",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessment_id(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessment_subject(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessment_subject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Reference)
	fc.Result = res
	return ec.marshalOReference2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessment_subject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessment_encounter(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessment_encounter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encounter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessment_encounter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessment_prediction(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessment_prediction(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Prediction, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.RiskAssessmentPrediction)
	fc.Result = res
	return ec.marshalORiskAssessmentPrediction2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRiskAssessmentPrediction(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessment_prediction(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RiskAssessmentPrediction_id(ctx, field)
			case "outcome":
				return ec.fieldContext_RiskAssessmentPrediction_outcome(ctx, field)
			case "probabilityDecimal":
				return ec.fieldContext_RiskAssessmentPrediction_probabilityDecimal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RiskAssessmentPrediction", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessment_note(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessment_note(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.Annotation)
	fc.Result = res
	return ec.marshalOAnnotation2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAnnotation(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessment_note(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Annotation_id(ctx, field)
			case "AuthorReference":
				return ec.fieldContext_Annotation_AuthorReference(ctx, field)
			case "AuthorString":
				return ec.fieldContext_Annotation_AuthorString(ctx, field)
			case "Time":
				return ec.fieldContext_Annotation_Time(ctx, field)
			case "Text":
				return ec.fieldContext_Annotation_Text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Annotation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessmentPrediction_id(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessmentPrediction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessmentPrediction_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessmentPrediction_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessmentPrediction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessmentPrediction_outcome(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessmentPrediction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessmentPrediction_outcome(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Outcome, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.CodeableConcept)
	fc.Result = res
	return ec.marshalOCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessmentPrediction_outcome(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessmentPrediction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CodeableConcept_id(ctx, field)
			case "coding":
				return ec.fieldContext_CodeableConcept_coding(ctx, field)
			case "text":
				return ec.fieldContext_CodeableConcept_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RiskAssessmentPrediction_probabilityDecimal(ctx context.Context, field graphql.CollectedField, obj *dto.RiskAssessmentPrediction) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RiskAssessmentPrediction_probabilityDecimal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProbabilityDecimal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RiskAssessmentPrediction_probabilityDecimal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RiskAssessmentPrediction",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_id(ctx context.Context, field graphql.CollectedField, obj *dto.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_title(ctx context.Context, field graphql.CollectedField, obj *dto.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_code(ctx context.Context, field graphql.CollectedField, obj *dto.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_author(ctx context.Context, field graphql.CollectedField, obj *dto.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_author(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_author(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_text(ctx context.Context, field graphql.CollectedField, obj *dto.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_text(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_text(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Section_section(ctx context.Context, field graphql.CollectedField, obj *dto.Section) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Section_section(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Section, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Section)
	fc.Result = res
	return ec.marshalOSection2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Section_section(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Section",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Section_id(ctx, field)
			case "title":
				return ec.fieldContext_Section_title(ctx, field)
			case "code":
				return ec.fieldContext_Section_code(ctx, field)
			case "author":
				return ec.fieldContext_Section_author(ctx, field)
			case "text":
				return ec.fieldContext_Section_text(ctx, field)
			case "section":
				return ec.fieldContext_Section_section(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Section", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Terminology_code(ctx context.Context, field graphql.CollectedField, obj *dto.Terminology) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Terminology_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Terminology_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Terminology",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Terminology_system(ctx context.Context, field graphql.CollectedField, obj *dto.Terminology) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Terminology_system(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.System, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(dto.TerminologySource)
	fc.Result = res
	return ec.marshalNTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Terminology_system(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Terminology",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type TerminologySource does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Terminology_name(ctx context.Context, field graphql.CollectedField, obj *dto.Terminology) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Terminology_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Terminology_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Terminology",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerminologyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *dto.TerminologyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerminologyConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalOInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerminologyConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerminologyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerminologyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *dto.TerminologyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerminologyConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.TerminologyEdge)
	fc.Result = res
	return ec.marshalOTerminologyEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologyEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerminologyConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerminologyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TerminologyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TerminologyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TerminologyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerminologyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *dto.TerminologyConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerminologyConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.PageInfo)
	fc.Result = res
	return ec.marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerminologyConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerminologyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerminologyEdge_node(ctx context.Context, field graphql.CollectedField, obj *dto.TerminologyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerminologyEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.Terminology)
	fc.Result = res
	return ec.marshalOTerminology2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminology(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerminologyEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerminologyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "code":
				return ec.fieldContext_Terminology_code(ctx, field)
			case "system":
				return ec.fieldContext_Terminology_system(ctx, field)
			case "name":
				return ec.fieldContext_Terminology_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Terminology", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TerminologyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *dto.TerminologyEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TerminologyEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TerminologyEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TerminologyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_id(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_resourceType(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_resourceType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(dto.ResourceType)
	fc.Result = res
	return ec.marshalOResourceType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐResourceType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_resourceType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResourceType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_name(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_value(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_status(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_date(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(scalarutils.Date)
	fc.Result = res
	return ec.marshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Date does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TimelineResource_timeRecorded(ctx context.Context, field graphql.CollectedField, obj *dto.TimelineResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_TimelineResource_timeRecorded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeRecorded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_TimelineResource_timeRecorded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TimelineResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_id(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_extension(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_extension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Extension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*dto.Extension)
	fc.Result = res
	return ec.marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_extension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "url":
				return ec.fieldContext_Extension_url(ctx, field)
			case "valueBoolean":
				return ec.fieldContext_Extension_valueBoolean(ctx, field)
			case "valueInteger":
				return ec.fieldContext_Extension_valueInteger(ctx, field)
			case "valueDecimal":
				return ec.fieldContext_Extension_valueDecimal(ctx, field)
			case "valueBase64Binary":
				return ec.fieldContext_Extension_valueBase64Binary(ctx, field)
			case "valueInstant":
				return ec.fieldContext_Extension_valueInstant(ctx, field)
			case "valueString":
				return ec.fieldContext_Extension_valueString(ctx, field)
			case "valueURI":
				return ec.fieldContext_Extension_valueURI(ctx, field)
			case "valueDate":
				return ec.fieldContext_Extension_valueDate(ctx, field)
			case "valueDateTime":
				return ec.fieldContext_Extension_valueDateTime(ctx, field)
			case "valueTime":
				return ec.fieldContext_Extension_valueTime(ctx, field)
			case "valueCode":
				return ec.fieldContext_Extension_valueCode(ctx, field)
			case "valueOid":
				return ec.fieldContext_Extension_valueOid(ctx, field)
			case "valueUUID":
				return ec.fieldContext_Extension_valueUUID(ctx, field)
			case "valueID":
				return ec.fieldContext_Extension_valueID(ctx, field)
			case "valueUnsignedInt":
				return ec.fieldContext_Extension_valueUnsignedInt(ctx, field)
			case "valuePositiveInt":
				return ec.fieldContext_Extension_valuePositiveInt(ctx, field)
			case "valueMarkdown":
				return ec.fieldContext_Extension_valueMarkdown(ctx, field)
			case "valueAnnotation":
				return ec.fieldContext_Extension_valueAnnotation(ctx, field)
			case "valueAttachment":
				return ec.fieldContext_Extension_valueAttachment(ctx, field)
			case "valueIdentifier":
				return ec.fieldContext_Extension_valueIdentifier(ctx, field)
			case "valueCodeableConcept":
				return ec.fieldContext_Extension_valueCodeableConcept(ctx, field)
			case "valueCoding":
				return ec.fieldContext_Extension_valueCoding(ctx, field)
			case "valueQuantity":
				return ec.fieldContext_Extension_valueQuantity(ctx, field)
			case "valueRange":
				return ec.fieldContext_Extension_valueRange(ctx, field)
			case "valuePeriod":
				return ec.fieldContext_Extension_valuePeriod(ctx, field)
			case "valueRatio":
				return ec.fieldContext_Extension_valueRatio(ctx, field)
			case "valueReference":
				return ec.fieldContext_Extension_valueReference(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Extension", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_code(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_code(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Coding)
	fc.Result = res
	return ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_code(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Coding_id(ctx, field)
			case "system":
				return ec.fieldContext_Coding_system(ctx, field)
			case "version":
				return ec.fieldContext_Coding_version(ctx, field)
			case "code":
				return ec.fieldContext_Coding_code(ctx, field)
			case "display":
				return ec.fieldContext_Coding_display(ctx, field)
			case "userSelected":
				return ec.fieldContext_Coding_userSelected(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Coding", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_valueCodeableConcept(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_valueCodeableConcept(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueCodeableConcept, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.CodeableConcept)
	fc.Result = res
	return ec.marshalOCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_valueCodeableConcept(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CodeableConcept_id(ctx, field)
			case "coding":
				return ec.fieldContext_CodeableConcept_coding(ctx, field)
			case "text":
				return ec.fieldContext_CodeableConcept_text(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CodeableConcept", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_valueQuantity(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_valueQuantity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueQuantity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Quantity)
	fc.Result = res
	return ec.marshalOQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_valueQuantity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "value":
				return ec.fieldContext_Quantity_value(ctx, field)
			case "comparator":
				return ec.fieldContext_Quantity_comparator(ctx, field)
			case "unit":
				return ec.fieldContext_Quantity_unit(ctx, field)
			case "system":
				return ec.fieldContext_Quantity_system(ctx, field)
			case "code":
				return ec.fieldContext_Quantity_code(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quantity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_valueRange(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_valueRange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueRange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Range)
	fc.Result = res
	return ec.marshalORange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRange(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_valueRange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Range_id(ctx, field)
			case "low":
				return ec.fieldContext_Range_low(ctx, field)
			case "high":
				return ec.fieldContext_Range_high(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Range", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UsageContext_valueReference(ctx context.Context, field graphql.CollectedField, obj *dto.UsageContext) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UsageContext_valueReference(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValueReference, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.Reference)
	fc.Result = res
	return ec.marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UsageContext_valueReference(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UsageContext",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Reference_id(ctx, field)
			case "reference":
				return ec.fieldContext_Reference_reference(ctx, field)
			case "type":
				return ec.fieldContext_Reference_type(ctx, field)
			case "identifier":
				return ec.fieldContext_Reference_identifier(ctx, field)
			case "display":
				return ec.fieldContext_Reference_display(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Reference", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext__Service_sdl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext__Service_sdl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAllergyInput(ctx context.Context, obj interface{}) (dto.AllergyInput, error) {
	var it dto.AllergyInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "terminologySource", "encounterID", "reaction"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "terminologySource":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("terminologySource"))
			data, err := ec.unmarshalNTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx, v)
			if err != nil {
				return it, err
			}
			it.TerminologySource = data
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EncounterID = data
		case "reaction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reaction"))
			data, err := ec.unmarshalOReactionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReactionInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reaction = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAttachmentInput(ctx context.Context, obj interface{}) (dto.Attachment, error) {
	var it dto.Attachment
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"contentType", "data", "URL", "size", "hash", "title"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "contentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			data, err := ec.unmarshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.ContentType = data
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			data, err := ec.unmarshalOBase64Binary2githubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, v)
			if err != nil {
				return it, err
			}
			it.Data = data
		case "URL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("URL"))
			data, err := ec.unmarshalOURL2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			data, err := ec.unmarshalOInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Size = data
		case "hash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hash"))
			data, err := ec.unmarshalOBase64Binary2githubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx, v)
			if err != nil {
				return it, err
			}
			it.Hash = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCodingInput(ctx context.Context, obj interface{}) (dto.Coding, error) {
	var it dto.Coding
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"system", "version", "code", "display"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("system"))
			data, err := ec.unmarshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
			it.System = data
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "display":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Display = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompositionInput(ctx context.Context, obj interface{}) (dto.CompositionInput, error) {
	var it dto.CompositionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "status", "category", "encounterID", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EncounterID = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConditionInput(ctx context.Context, obj interface{}) (dto.ConditionInput, error) {
	var it dto.ConditionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "system", "status", "category", "encounterID", "onsetDate", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("system"))
			data, err := ec.unmarshalNTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx, v)
			if err != nil {
				return it, err
			}
			it.System = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNConditionStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalNConditionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EncounterID = data
		case "onsetDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("onsetDate"))
			data, err := ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
			it.OnsetDate = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConsentInput(ctx context.Context, obj interface{}) (dto.ConsentInput, error) {
	var it dto.ConsentInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"provision", "encounterID", "denyReason"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "provision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provision"))
			data, err := ec.unmarshalNConsentProvisionTypeEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvisionTypeEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Provision = data
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EncounterID = data
		case "denyReason":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyReason"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DenyReason = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputContactInput(ctx context.Context, obj interface{}) (dto.ContactInput, error) {
	var it dto.ContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNContactType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDiagnosticReportInput(ctx context.Context, obj interface{}) (dto.DiagnosticReportInput, error) {
	var it dto.DiagnosticReportInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"encounterID", "note", "findings", "media"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EncounterID = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "findings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("findings"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Findings = data
		case "media":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("media"))
			data, err := ec.unmarshalOMediaInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedia(ctx, v)
			if err != nil {
				return it, err
			}
			it.Media = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEncounterInput(ctx context.Context, obj interface{}) (dto.EncounterInput, error) {
	var it dto.EncounterInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEpisodeOfCareInput(ctx context.Context, obj interface{}) (dto.EpisodeOfCareInput, error) {
	var it dto.EpisodeOfCareInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "patientID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatientID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHealthTimelineInput(ctx context.Context, obj interface{}) (dto.HealthTimelineInput, error) {
	var it dto.HealthTimelineInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"patientID", "offset", "limit"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "patientID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patientID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PatientID = data
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Offset = data
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Limit = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIdentifierInput(ctx context.Context, obj interface{}) (dto.IdentifierInput, error) {
	var it dto.IdentifierInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNIdentifierType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMediaInput(ctx context.Context, obj interface{}) (dto.Media, error) {
	var it dto.Media
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "url"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.URL = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMetaInput(ctx context.Context, obj interface{}) (dto.MetaInput, error) {
	var it dto.MetaInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"versionId", "lastUpdated", "source", "tag", "security", "profile"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "versionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("versionId"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.VersionID = data
		case "lastUpdated":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastUpdated"))
			data, err := ec.unmarshalOTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastUpdated = data
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Source = data
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			data, err := ec.unmarshalOCodingInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, v)
			if err != nil {
				return it, err
			}
			it.Tag = data
		case "security":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("security"))
			data, err := ec.unmarshalOCodingInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, v)
			if err != nil {
				return it, err
			}
			it.Security = data
		case "profile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("profile"))
			data, err := ec.unmarshalOURI2ᚕgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
			it.Profile = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputObservationInput(ctx context.Context, obj interface{}) (dto.ObservationInput, error) {
	var it dto.ObservationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"status", "encounterID", "value", "note"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "encounterID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("encounterID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EncounterID = data
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPagination(ctx context.Context, obj interface{}) (dto.Pagination, error) {
	var it dto.Pagination
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"first", "after", "last", "before"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "first":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.First = data
		case "after":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("after"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.After = data
		case "last":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("last"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Last = data
		case "before":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("before"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Before = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchCompositionInput(ctx context.Context, obj interface{}) (dto.PatchCompositionInput, error) {
	var it dto.PatchCompositionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "status", "category", "note", "section"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			data, err := ec.unmarshalOCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx, v)
			if err != nil {
				return it, err
			}
			it.Category = data
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Note = data
		case "section":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
			data, err := ec.unmarshalOSectionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSectionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Section = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchPatientInput(ctx context.Context, obj interface{}) (dto.PatientInput, error) {
	var it dto.PatientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "otherNames", "birthDate", "gender", "identifiers", "contacts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "otherNames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherNames"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherNames = data
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			data, err := ec.unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthDate = data
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalOGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "identifiers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
			data, err := ec.unmarshalOIdentifierInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Identifiers = data
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			data, err := ec.unmarshalOContactInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contacts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatientInput(ctx context.Context, obj interface{}) (dto.PatientInput, error) {
	var it dto.PatientInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"firstName", "lastName", "otherNames", "birthDate", "gender", "identifiers", "contacts"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "otherNames":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherNames"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherNames = data
		case "birthDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("birthDate"))
			data, err := ec.unmarshalNDate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx, v)
			if err != nil {
				return it, err
			}
			it.BirthDate = data
		case "gender":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gender"))
			data, err := ec.unmarshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx, v)
			if err != nil {
				return it, err
			}
			it.Gender = data
		case "identifiers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("identifiers"))
			data, err := ec.unmarshalOIdentifierInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Identifiers = data
		case "contacts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contacts"))
			data, err := ec.unmarshalOContactInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Contacts = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuantityInput(ctx context.Context, obj interface{}) (dto.Quantity, error) {
	var it dto.Quantity
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"value", "comparator", "unit", "system", "code"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			data, err := ec.unmarshalOFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Value = data
		case "comparator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("comparator"))
			data, err := ec.unmarshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantityComparatorEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Comparator = data
		case "unit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unit"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Unit = data
		case "system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("system"))
			data, err := ec.unmarshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
			it.System = data
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionnaireResponseInput(ctx context.Context, obj interface{}) (dto.QuestionnaireResponse, error) {
	var it dto.QuestionnaireResponse
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"resourceType", "meta", "status", "authored", "item"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "resourceType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ResourceType = data
		case "meta":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("meta"))
			data, err := ec.unmarshalNMetaInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMetaInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.Meta = data
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalNQuestionnaireResponseStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseStatusEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "authored":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authored"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Authored = data
		case "item":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("item"))
			data, err := ec.unmarshalOQuestionnaireResponseItemInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, v)
			if err != nil {
				return it, err
			}
			it.Item = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionnaireResponseItemAnswerInput(ctx context.Context, obj interface{}) (dto.QuestionnaireResponseItemAnswer, error) {
	var it dto.QuestionnaireResponseItemAnswer
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"valueBoolean", "valueDecimal", "valueInteger", "valueDate", "valueDateTime", "valueTime", "valueString", "valueUri", "valueAttachment", "valueCoding", "valueQuantity", "valueReference", "item"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "valueBoolean":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueBoolean"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueBoolean = data
		case "valueDecimal":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueDecimal"))
			data, err := ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueDecimal = data
		case "valueInteger":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueInteger"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueInteger = data
		case "valueDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueDate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueDate = data
		case "valueDateTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueDateTime"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueDateTime = data
		case "valueTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueTime"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueTime = data
		case "valueString":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueString"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueString = data
		case "valueUri":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueUri"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueURI = data
		case "valueAttachment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueAttachment"))
			data, err := ec.unmarshalOAttachmentInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAttachment(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueAttachment = data
		case "valueCoding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueCoding"))
			data, err := ec.unmarshalOCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueCoding = data
		case "valueQuantity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueQuantity"))
			data, err := ec.unmarshalOQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueQuantity = data
		case "valueReference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("valueReference"))
			data, err := ec.unmarshalOReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx, v)
			if err != nil {
				return it, err
			}
			it.ValueReference = data
		case "item":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("item"))
			data, err := ec.unmarshalOQuestionnaireResponseItemInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, v)
			if err != nil {
				return it, err
			}
			it.Item = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputQuestionnaireResponseItemInput(ctx context.Context, obj interface{}) (dto.QuestionnaireResponseItem, error) {
	var it dto.QuestionnaireResponseItem
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"linkId", "text", "answer", "item"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "linkId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkId"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.LinkID = data
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			data, err := ec.unmarshalOQuestionnaireResponseItemAnswerInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx, v)
			if err != nil {
				return it, err
			}
			it.Answer = data
		case "item":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("item"))
			data, err := ec.unmarshalOQuestionnaireResponseItemInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, v)
			if err != nil {
				return it, err
			}
			it.Item = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReactionInput(ctx context.Context, obj interface{}) (dto.ReactionInput, error) {
	var it dto.ReactionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "system", "severity"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "system":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("system"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.System = data
		case "severity":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("severity"))
			data, err := ec.unmarshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx, v)
			if err != nil {
				return it, err
			}
			it.Severity = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReferenceInput(ctx context.Context, obj interface{}) (dto.Reference, error) {
	var it dto.Reference
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"reference", "type", "display"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "reference":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("reference"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Reference = data
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "display":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("display"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Display = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSectionInput(ctx context.Context, obj interface{}) (dto.SectionInput, error) {
	var it dto.SectionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "title", "code", "author", "text", "section"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ID = data
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Title = data
		case "code":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "author":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("author"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Author = data
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			data, err := ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Text = data
		case "section":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("section"))
			data, err := ec.unmarshalOSectionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSectionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Section = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var allergyImplementors = []string{"Allergy"}

func (ec *executionContext) _Allergy(ctx context.Context, sel ast.SelectionSet, obj *dto.Allergy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allergyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Allergy")
		case "id":
			out.Values[i] = ec._Allergy_id(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Allergy_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Allergy_name(ctx, field, obj)
		case "system":
			out.Values[i] = ec._Allergy_system(ctx, field, obj)
		case "terminologySource":
			out.Values[i] = ec._Allergy_terminologySource(ctx, field, obj)
		case "encounterID":
			out.Values[i] = ec._Allergy_encounterID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "reaction":
			out.Values[i] = ec._Allergy_reaction(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var allergyConnectionImplementors = []string{"AllergyConnection"}

func (ec *executionContext) _AllergyConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.AllergyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allergyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllergyConnection")
		case "totalCount":
			out.Values[i] = ec._AllergyConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._AllergyConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._AllergyConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var allergyEdgeImplementors = []string{"AllergyEdge"}

func (ec *executionContext) _AllergyEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.AllergyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allergyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllergyEdge")
		case "node":
			out.Values[i] = ec._AllergyEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._AllergyEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var annotationImplementors = []string{"Annotation"}

func (ec *executionContext) _Annotation(ctx context.Context, sel ast.SelectionSet, obj *dto.Annotation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, annotationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Annotation")
		case "id":
			out.Values[i] = ec._Annotation_id(ctx, field, obj)
		case "AuthorReference":
			out.Values[i] = ec._Annotation_AuthorReference(ctx, field, obj)
		case "AuthorString":
			out.Values[i] = ec._Annotation_AuthorString(ctx, field, obj)
		case "Time":
			out.Values[i] = ec._Annotation_Time(ctx, field, obj)
		case "Text":
			out.Values[i] = ec._Annotation_Text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var attachmentImplementors = []string{"Attachment"}

func (ec *executionContext) _Attachment(ctx context.Context, sel ast.SelectionSet, obj *dto.Attachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Attachment")
		case "id":
			out.Values[i] = ec._Attachment_id(ctx, field, obj)
		case "contentType":
			out.Values[i] = ec._Attachment_contentType(ctx, field, obj)
		case "language":
			out.Values[i] = ec._Attachment_language(ctx, field, obj)
		case "data":
			out.Values[i] = ec._Attachment_data(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Attachment_url(ctx, field, obj)
		case "size":
			out.Values[i] = ec._Attachment_size(ctx, field, obj)
		case "hash":
			out.Values[i] = ec._Attachment_hash(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Attachment_title(ctx, field, obj)
		case "creation":
			out.Values[i] = ec._Attachment_creation(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var codeableConceptImplementors = []string{"CodeableConcept"}

func (ec *executionContext) _CodeableConcept(ctx context.Context, sel ast.SelectionSet, obj *dto.CodeableConcept) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codeableConceptImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CodeableConcept")
		case "id":
			out.Values[i] = ec._CodeableConcept_id(ctx, field, obj)
		case "coding":
			out.Values[i] = ec._CodeableConcept_coding(ctx, field, obj)
		case "text":
			out.Values[i] = ec._CodeableConcept_text(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var codingImplementors = []string{"Coding"}

func (ec *executionContext) _Coding(ctx context.Context, sel ast.SelectionSet, obj *dto.Coding) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, codingImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Coding")
		case "id":
			out.Values[i] = ec._Coding_id(ctx, field, obj)
		case "system":
			out.Values[i] = ec._Coding_system(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Coding_version(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Coding_code(ctx, field, obj)
		case "display":
			out.Values[i] = ec._Coding_display(ctx, field, obj)
		case "userSelected":
			out.Values[i] = ec._Coding_userSelected(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var compositionImplementors = []string{"Composition"}

func (ec *executionContext) _Composition(ctx context.Context, sel ast.SelectionSet, obj *dto.Composition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Composition")
		case "id":
			out.Values[i] = ec._Composition_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "text":
			out.Values[i] = ec._Composition_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec._Composition_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._Composition_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Composition_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "date":
			out.Values[i] = ec._Composition_date(ctx, field, obj)
		case "section":
			out.Values[i] = ec._Composition_section(ctx, field, obj)
		case "patientID":
			out.Values[i] = ec._Composition_patientID(ctx, field, obj)
		case "encounterID":
			out.Values[i] = ec._Composition_encounterID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var compositionConnectionImplementors = []string{"CompositionConnection"}

func (ec *executionContext) _CompositionConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.CompositionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositionConnection")
		case "totalCount":
			out.Values[i] = ec._CompositionConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._CompositionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CompositionConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var compositionEdgeImplementors = []string{"CompositionEdge"}

func (ec *executionContext) _CompositionEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.CompositionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, compositionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompositionEdge")
		case "node":
			out.Values[i] = ec._CompositionEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CompositionEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var conditionImplementors = []string{"Condition"}

func (ec *executionContext) _Condition(ctx context.Context, sel ast.SelectionSet, obj *dto.Condition) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conditionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Condition")
		case "id":
			out.Values[i] = ec._Condition_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Condition_status(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Condition_name(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Condition_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "system":
			out.Values[i] = ec._Condition_system(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "category":
			out.Values[i] = ec._Condition_category(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "onsetDate":
			out.Values[i] = ec._Condition_onsetDate(ctx, field, obj)
		case "recordedDate":
			out.Values[i] = ec._Condition_recordedDate(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Condition_note(ctx, field, obj)
		case "patientID":
			out.Values[i] = ec._Condition_patientID(ctx, field, obj)
		case "encounterID":
			out.Values[i] = ec._Condition_encounterID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var conditionConnectionImplementors = []string{"ConditionConnection"}

func (ec *executionContext) _ConditionConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.ConditionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conditionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConditionConnection")
		case "totalCount":
			out.Values[i] = ec._ConditionConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._ConditionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ConditionConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var conditionEdgeImplementors = []string{"ConditionEdge"}

func (ec *executionContext) _ConditionEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.ConditionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, conditionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConditionEdge")
		case "node":
			out.Values[i] = ec._ConditionEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ConditionEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var consentImplementors = []string{"Consent"}

func (ec *executionContext) _Consent(ctx context.Context, sel ast.SelectionSet, obj *dto.Consent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, consentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Consent")
		case "id":
			out.Values[i] = ec._Consent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Consent_status(ctx, field, obj)
		case "provision":
			out.Values[i] = ec._Consent_provision(ctx, field, obj)
		case "patient":
			out.Values[i] = ec._Consent_patient(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var consentOutputImplementors = []string{"ConsentOutput"}

func (ec *executionContext) _ConsentOutput(ctx context.Context, sel ast.SelectionSet, obj *dto.ConsentOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, consentOutputImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConsentOutput")
		case "status":
			out.Values[i] = ec._ConsentOutput_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var consentProvisionImplementors = []string{"ConsentProvision"}

func (ec *executionContext) _ConsentProvision(ctx context.Context, sel ast.SelectionSet, obj *dto.ConsentProvision) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, consentProvisionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConsentProvision")
		case "id":
			out.Values[i] = ec._ConsentProvision_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ConsentProvision_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var diagnosticReportImplementors = []string{"DiagnosticReport"}

func (ec *executionContext) _DiagnosticReport(ctx context.Context, sel ast.SelectionSet, obj *dto.DiagnosticReport) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, diagnosticReportImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DiagnosticReport")
		case "id":
			out.Values[i] = ec._DiagnosticReport_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._DiagnosticReport_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patientID":
			out.Values[i] = ec._DiagnosticReport_patientID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "encounterID":
			out.Values[i] = ec._DiagnosticReport_encounterID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "issued":
			out.Values[i] = ec._DiagnosticReport_issued(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "result":
			out.Values[i] = ec._DiagnosticReport_result(ctx, field, obj)
		case "media":
			out.Values[i] = ec._DiagnosticReport_media(ctx, field, obj)
		case "conclusion":
			out.Values[i] = ec._DiagnosticReport_conclusion(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var encounterImplementors = []string{"Encounter"}

func (ec *executionContext) _Encounter(ctx context.Context, sel ast.SelectionSet, obj *dto.Encounter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, encounterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Encounter")
		case "id":
			out.Values[i] = ec._Encounter_id(ctx, field, obj)
		case "class":
			out.Values[i] = ec._Encounter_class(ctx, field, obj)
		case "episodeOfCareID":
			out.Values[i] = ec._Encounter_episodeOfCareID(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Encounter_status(ctx, field, obj)
		case "patientID":
			out.Values[i] = ec._Encounter_patientID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var encounterAssociatedResourcesImplementors = []string{"EncounterAssociatedResources"}

func (ec *executionContext) _EncounterAssociatedResources(ctx context.Context, sel ast.SelectionSet, obj *dto.EncounterAssociatedResources) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, encounterAssociatedResourcesImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EncounterAssociatedResources")
		case "riskAssessment":
			out.Values[i] = ec._EncounterAssociatedResources_riskAssessment(ctx, field, obj)
		case "consent":
			out.Values[i] = ec._EncounterAssociatedResources_consent(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var encounterClassImplementors = []string{"EncounterClass"}

func (ec *executionContext) _EncounterClass(ctx context.Context, sel ast.SelectionSet, obj *dto.EncounterClass) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, encounterClassImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EncounterClass")
		case "code":
			out.Values[i] = ec._EncounterClass_code(ctx, field, obj)
		case "display":
			out.Values[i] = ec._EncounterClass_display(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var encounterConnectionImplementors = []string{"EncounterConnection"}

func (ec *executionContext) _EncounterConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.EncounterConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, encounterConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EncounterConnection")
		case "totalCount":
			out.Values[i] = ec._EncounterConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._EncounterConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._EncounterConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var encounterEdgeImplementors = []string{"EncounterEdge"}

func (ec *executionContext) _EncounterEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.EncounterEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, encounterEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EncounterEdge")
		case "node":
			out.Values[i] = ec._EncounterEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._EncounterEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var episodeOfCareImplementors = []string{"EpisodeOfCare"}

func (ec *executionContext) _EpisodeOfCare(ctx context.Context, sel ast.SelectionSet, obj *dto.EpisodeOfCare) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, episodeOfCareImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EpisodeOfCare")
		case "id":
			out.Values[i] = ec._EpisodeOfCare_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._EpisodeOfCare_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patientID":
			out.Values[i] = ec._EpisodeOfCare_patientID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var extensionImplementors = []string{"Extension"}

func (ec *executionContext) _Extension(ctx context.Context, sel ast.SelectionSet, obj *dto.Extension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, extensionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Extension")
		case "url":
			out.Values[i] = ec._Extension_url(ctx, field, obj)
		case "valueBoolean":
			out.Values[i] = ec._Extension_valueBoolean(ctx, field, obj)
		case "valueInteger":
			out.Values[i] = ec._Extension_valueInteger(ctx, field, obj)
		case "valueDecimal":
			out.Values[i] = ec._Extension_valueDecimal(ctx, field, obj)
		case "valueBase64Binary":
			out.Values[i] = ec._Extension_valueBase64Binary(ctx, field, obj)
		case "valueInstant":
			out.Values[i] = ec._Extension_valueInstant(ctx, field, obj)
		case "valueString":
			out.Values[i] = ec._Extension_valueString(ctx, field, obj)
		case "valueURI":
			out.Values[i] = ec._Extension_valueURI(ctx, field, obj)
		case "valueDate":
			out.Values[i] = ec._Extension_valueDate(ctx, field, obj)
		case "valueDateTime":
			out.Values[i] = ec._Extension_valueDateTime(ctx, field, obj)
		case "valueTime":
			out.Values[i] = ec._Extension_valueTime(ctx, field, obj)
		case "valueCode":
			out.Values[i] = ec._Extension_valueCode(ctx, field, obj)
		case "valueOid":
			out.Values[i] = ec._Extension_valueOid(ctx, field, obj)
		case "valueUUID":
			out.Values[i] = ec._Extension_valueUUID(ctx, field, obj)
		case "valueID":
			out.Values[i] = ec._Extension_valueID(ctx, field, obj)
		case "valueUnsignedInt":
			out.Values[i] = ec._Extension_valueUnsignedInt(ctx, field, obj)
		case "valuePositiveInt":
			out.Values[i] = ec._Extension_valuePositiveInt(ctx, field, obj)
		case "valueMarkdown":
			out.Values[i] = ec._Extension_valueMarkdown(ctx, field, obj)
		case "valueAnnotation":
			out.Values[i] = ec._Extension_valueAnnotation(ctx, field, obj)
		case "valueAttachment":
			out.Values[i] = ec._Extension_valueAttachment(ctx, field, obj)
		case "valueIdentifier":
			out.Values[i] = ec._Extension_valueIdentifier(ctx, field, obj)
		case "valueCodeableConcept":
			out.Values[i] = ec._Extension_valueCodeableConcept(ctx, field, obj)
		case "valueCoding":
			out.Values[i] = ec._Extension_valueCoding(ctx, field, obj)
		case "valueQuantity":
			out.Values[i] = ec._Extension_valueQuantity(ctx, field, obj)
		case "valueRange":
			out.Values[i] = ec._Extension_valueRange(ctx, field, obj)
		case "valuePeriod":
			out.Values[i] = ec._Extension_valuePeriod(ctx, field, obj)
		case "valueRatio":
			out.Values[i] = ec._Extension_valueRatio(ctx, field, obj)
		case "valueReference":
			out.Values[i] = ec._Extension_valueReference(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var healthTimelineImplementors = []string{"HealthTimeline"}

func (ec *executionContext) _HealthTimeline(ctx context.Context, sel ast.SelectionSet, obj *dto.HealthTimeline) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, healthTimelineImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HealthTimeline")
		case "timeline":
			out.Values[i] = ec._HealthTimeline_timeline(ctx, field, obj)
		case "totalCount":
			out.Values[i] = ec._HealthTimeline_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var identifierImplementors = []string{"Identifier"}

func (ec *executionContext) _Identifier(ctx context.Context, sel ast.SelectionSet, obj *dto.Identifier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, identifierImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Identifier")
		case "id":
			out.Values[i] = ec._Identifier_id(ctx, field, obj)
		case "use":
			out.Values[i] = ec._Identifier_use(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Identifier_type(ctx, field, obj)
		case "system":
			out.Values[i] = ec._Identifier_system(ctx, field, obj)
		case "value":
			out.Values[i] = ec._Identifier_value(ctx, field, obj)
		case "period":
			out.Values[i] = ec._Identifier_period(ctx, field, obj)
		case "assigner":
			out.Values[i] = ec._Identifier_assigner(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaImplementors = []string{"Media"}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj *dto.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Media")
		case "id":
			out.Values[i] = ec._Media_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Media_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "url":
			out.Values[i] = ec._Media_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "contentType":
			out.Values[i] = ec._Media_contentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaConnectionImplementors = []string{"MediaConnection"}

func (ec *executionContext) _MediaConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.MediaConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaConnection")
		case "totalCount":
			out.Values[i] = ec._MediaConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._MediaConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._MediaConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mediaEdgeImplementors = []string{"MediaEdge"}

func (ec *executionContext) _MediaEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.MediaEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MediaEdge")
		case "node":
			out.Values[i] = ec._MediaEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._MediaEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var medicalDataImplementors = []string{"MedicalData"}

func (ec *executionContext) _MedicalData(ctx context.Context, sel ast.SelectionSet, obj *dto.MedicalData) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicalDataImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicalData")
		case "regimen":
			out.Values[i] = ec._MedicalData_regimen(ctx, field, obj)
		case "allergies":
			out.Values[i] = ec._MedicalData_allergies(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._MedicalData_weight(ctx, field, obj)
		case "bmi":
			out.Values[i] = ec._MedicalData_bmi(ctx, field, obj)
		case "viralLoad":
			out.Values[i] = ec._MedicalData_viralLoad(ctx, field, obj)
		case "cd4Count":
			out.Values[i] = ec._MedicalData_cd4Count(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var medicationImplementors = []string{"Medication"}

func (ec *executionContext) _Medication(ctx context.Context, sel ast.SelectionSet, obj *dto.Medication) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Medication")
		case "name":
			out.Values[i] = ec._Medication_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "code":
			out.Values[i] = ec._Medication_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var medicationStatementImplementors = []string{"MedicationStatement"}

func (ec *executionContext) _MedicationStatement(ctx context.Context, sel ast.SelectionSet, obj *dto.MedicationStatement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, medicationStatementImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MedicationStatement")
		case "id":
			out.Values[i] = ec._MedicationStatement_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._MedicationStatement_status(ctx, field, obj)
		case "medication":
			out.Values[i] = ec._MedicationStatement_medication(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patientID":
			out.Values[i] = ec._MedicationStatement_patientID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var metaImplementors = []string{"Meta"}

func (ec *executionContext) _Meta(ctx context.Context, sel ast.SelectionSet, obj *dto.Meta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meta")
		case "versionId":
			out.Values[i] = ec._Meta_versionId(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Meta_source(ctx, field, obj)
		case "tag":
			out.Values[i] = ec._Meta_tag(ctx, field, obj)
		case "security":
			out.Values[i] = ec._Meta_security(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createEpisodeOfCare":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createEpisodeOfCare(ctx, field)
			})
		case "patchEpisodeOfCare":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchEpisodeOfCare(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endEpisodeOfCare":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_endEpisodeOfCare(ctx, field)
			})
		case "startEncounter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_startEncounter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchEncounter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchEncounter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "endEncounter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_endEncounter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordTemperature":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordTemperature(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordHeight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordHeight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordWeight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordWeight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordRespiratoryRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordRespiratoryRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordPulseRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordPulseRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordBloodPressure":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordBloodPressure(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordBMI":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordBMI(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordViralLoad":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordViralLoad(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordMUAC":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordMUAC(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordOxygenSaturation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordOxygenSaturation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordBloodSugar":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordBloodSugar(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordLastMenstrualPeriod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordLastMenstrualPeriod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordDiastolicBloodPressure":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordDiastolicBloodPressure(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordColposcopy":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordColposcopy(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordHPV":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordHPV(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordVIA":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordVIA(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordPapSmear":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordPapSmear(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createPatient":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createPatient(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatient":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatient(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deletePatient":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deletePatient(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createCondition":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createCondition(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createAllergyIntolerance":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAllergyIntolerance(ctx, field)
			})
		case "createComposition":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createComposition(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "appendNoteToComposition":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_appendNoteToComposition(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientHeight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientHeight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientWeight":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientWeight(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientBMI":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientBMI(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientTemperature":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientTemperature(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientDiastolicBloodPressure":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientDiastolicBloodPressure(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientSystolicBloodPressure":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientSystolicBloodPressure(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientRespiratoryRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientRespiratoryRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientOxygenSaturation":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientOxygenSaturation(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientPulseRate":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientPulseRate(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientViralLoad":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientViralLoad(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientMuac":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientMuac(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientLastMenstrualPeriod":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientLastMenstrualPeriod(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patchPatientBloodSugar":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchPatientBloodSugar(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordConsent":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordConsent(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createQuestionnaireResponse":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createQuestionnaireResponse(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordMammographyResult":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordMammographyResult(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordBiopsy":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordBiopsy(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordMRI":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordMRI(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordUltrasound":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordUltrasound(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "recordCBE":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_recordCBE(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "getEncounterAssociatedResources":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_getEncounterAssociatedResources(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var narrativeImplementors = []string{"Narrative"}

func (ec *executionContext) _Narrative(ctx context.Context, sel ast.SelectionSet, obj *dto.Narrative) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, narrativeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Narrative")
		case "id":
			out.Values[i] = ec._Narrative_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Narrative_status(ctx, field, obj)
		case "div":
			out.Values[i] = ec._Narrative_div(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var observationImplementors = []string{"Observation"}

func (ec *executionContext) _Observation(ctx context.Context, sel ast.SelectionSet, obj *dto.Observation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, observationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Observation")
		case "id":
			out.Values[i] = ec._Observation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "status":
			out.Values[i] = ec._Observation_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "patientID":
			out.Values[i] = ec._Observation_patientID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "encounterID":
			out.Values[i] = ec._Observation_encounterID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Observation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "value":
			out.Values[i] = ec._Observation_value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "timeRecorded":
			out.Values[i] = ec._Observation_timeRecorded(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "interpretation":
			out.Values[i] = ec._Observation_interpretation(ctx, field, obj)
		case "note":
			out.Values[i] = ec._Observation_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var observationConnectionImplementors = []string{"ObservationConnection"}

func (ec *executionContext) _ObservationConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.ObservationConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, observationConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObservationConnection")
		case "totalCount":
			out.Values[i] = ec._ObservationConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._ObservationConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._ObservationConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var observationEdgeImplementors = []string{"ObservationEdge"}

func (ec *executionContext) _ObservationEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.ObservationEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, observationEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObservationEdge")
		case "node":
			out.Values[i] = ec._ObservationEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._ObservationEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *dto.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var patientImplementors = []string{"Patient"}

func (ec *executionContext) _Patient(ctx context.Context, sel ast.SelectionSet, obj *dto.Patient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, patientImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Patient")
		case "id":
			out.Values[i] = ec._Patient_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "active":
			out.Values[i] = ec._Patient_active(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Patient_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._Patient_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "gender":
			out.Values[i] = ec._Patient_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "birthDate":
			out.Values[i] = ec._Patient_birthDate(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var periodImplementors = []string{"Period"}

func (ec *executionContext) _Period(ctx context.Context, sel ast.SelectionSet, obj *dto.Period) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, periodImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Period")
		case "id":
			out.Values[i] = ec._Period_id(ctx, field, obj)
		case "start":
			out.Values[i] = ec._Period_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._Period_end(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var quantityImplementors = []string{"Quantity"}

func (ec *executionContext) _Quantity(ctx context.Context, sel ast.SelectionSet, obj *dto.Quantity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quantityImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quantity")
		case "value":
			out.Values[i] = ec._Quantity_value(ctx, field, obj)
		case "comparator":
			out.Values[i] = ec._Quantity_comparator(ctx, field, obj)
		case "unit":
			out.Values[i] = ec._Quantity_unit(ctx, field, obj)
		case "system":
			out.Values[i] = ec._Quantity_system(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Quantity_code(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "patientHealthTimeline":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_patientHealthTimeline(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getMedicalData":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getMedicalData(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getEpisodeOfCare":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getEpisodeOfCare(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listPatientConditions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPatientConditions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listPatientCompositions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPatientCompositions(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listPatientEncounters":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPatientEncounters(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientTemperatureEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientTemperatureEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientBloodPressureEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientBloodPressureEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientHeightEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientHeightEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientRespiratoryRateEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientRespiratoryRateEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientPulseRateEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientPulseRateEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientBMIEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientBMIEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientWeightEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientWeightEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientMuacEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientMuacEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientOxygenSaturationEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientOxygenSaturationEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientViralLoad":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientViralLoad(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientBloodSugarEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientBloodSugarEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientLastMenstrualPeriodEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientLastMenstrualPeriodEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getPatientDiastolicBloodPressureEntries":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getPatientDiastolicBloodPressureEntries(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "searchAllergy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchAllergy(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getAllergy":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllergy(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listPatientAllergies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPatientAllergies(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "listPatientMedia":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPatientMedia(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "getQuestionnaireResponseRiskLevel":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getQuestionnaireResponseRiskLevel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "_service":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireImplementors = []string{"Questionnaire"}

func (ec *executionContext) _Questionnaire(ctx context.Context, sel ast.SelectionSet, obj *dto.Questionnaire) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Questionnaire")
		case "id":
			out.Values[i] = ec._Questionnaire_id(ctx, field, obj)
		case "resourceType":
			out.Values[i] = ec._Questionnaire_resourceType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "meta":
			out.Values[i] = ec._Questionnaire_meta(ctx, field, obj)
		case "implicitRules":
			out.Values[i] = ec._Questionnaire_implicitRules(ctx, field, obj)
		case "language":
			out.Values[i] = ec._Questionnaire_language(ctx, field, obj)
		case "text":
			out.Values[i] = ec._Questionnaire_text(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._Questionnaire_extension(ctx, field, obj)
		case "modifierExtension":
			out.Values[i] = ec._Questionnaire_modifierExtension(ctx, field, obj)
		case "url":
			out.Values[i] = ec._Questionnaire_url(ctx, field, obj)
		case "identifier":
			out.Values[i] = ec._Questionnaire_identifier(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Questionnaire_version(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Questionnaire_name(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Questionnaire_title(ctx, field, obj)
		case "derivedFrom":
			out.Values[i] = ec._Questionnaire_derivedFrom(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Questionnaire_status(ctx, field, obj)
		case "experimental":
			out.Values[i] = ec._Questionnaire_experimental(ctx, field, obj)
		case "date":
			out.Values[i] = ec._Questionnaire_date(ctx, field, obj)
		case "publisher":
			out.Values[i] = ec._Questionnaire_publisher(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Questionnaire_description(ctx, field, obj)
		case "useContext":
			out.Values[i] = ec._Questionnaire_useContext(ctx, field, obj)
		case "jurisdiction":
			out.Values[i] = ec._Questionnaire_jurisdiction(ctx, field, obj)
		case "purpose":
			out.Values[i] = ec._Questionnaire_purpose(ctx, field, obj)
		case "effectivePeriod":
			out.Values[i] = ec._Questionnaire_effectivePeriod(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Questionnaire_code(ctx, field, obj)
		case "item":
			out.Values[i] = ec._Questionnaire_item(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireConnectionImplementors = []string{"QuestionnaireConnection"}

func (ec *executionContext) _QuestionnaireConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireConnection")
		case "totalCount":
			out.Values[i] = ec._QuestionnaireConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._QuestionnaireConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._QuestionnaireConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireEdgeImplementors = []string{"QuestionnaireEdge"}

func (ec *executionContext) _QuestionnaireEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireEdge")
		case "node":
			out.Values[i] = ec._QuestionnaireEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._QuestionnaireEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireItemImplementors = []string{"QuestionnaireItem"}

func (ec *executionContext) _QuestionnaireItem(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireItem")
		case "id":
			out.Values[i] = ec._QuestionnaireItem_id(ctx, field, obj)
		case "meta":
			out.Values[i] = ec._QuestionnaireItem_meta(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._QuestionnaireItem_extension(ctx, field, obj)
		case "modifierExtension":
			out.Values[i] = ec._QuestionnaireItem_modifierExtension(ctx, field, obj)
		case "linkId":
			out.Values[i] = ec._QuestionnaireItem_linkId(ctx, field, obj)
		case "definition":
			out.Values[i] = ec._QuestionnaireItem_definition(ctx, field, obj)
		case "code":
			out.Values[i] = ec._QuestionnaireItem_code(ctx, field, obj)
		case "prefix":
			out.Values[i] = ec._QuestionnaireItem_prefix(ctx, field, obj)
		case "text":
			out.Values[i] = ec._QuestionnaireItem_text(ctx, field, obj)
		case "type":
			out.Values[i] = ec._QuestionnaireItem_type(ctx, field, obj)
		case "enableWhen":
			out.Values[i] = ec._QuestionnaireItem_enableWhen(ctx, field, obj)
		case "enableBehavior":
			out.Values[i] = ec._QuestionnaireItem_enableBehavior(ctx, field, obj)
		case "disabledDisplay":
			out.Values[i] = ec._QuestionnaireItem_disabledDisplay(ctx, field, obj)
		case "required":
			out.Values[i] = ec._QuestionnaireItem_required(ctx, field, obj)
		case "repeats":
			out.Values[i] = ec._QuestionnaireItem_repeats(ctx, field, obj)
		case "readOnly":
			out.Values[i] = ec._QuestionnaireItem_readOnly(ctx, field, obj)
		case "maxLength":
			out.Values[i] = ec._QuestionnaireItem_maxLength(ctx, field, obj)
		case "answerValueSet":
			out.Values[i] = ec._QuestionnaireItem_answerValueSet(ctx, field, obj)
		case "answerOption":
			out.Values[i] = ec._QuestionnaireItem_answerOption(ctx, field, obj)
		case "initial":
			out.Values[i] = ec._QuestionnaireItem_initial(ctx, field, obj)
		case "item":
			out.Values[i] = ec._QuestionnaireItem_item(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireItemAnswerOptionImplementors = []string{"QuestionnaireItemAnswerOption"}

func (ec *executionContext) _QuestionnaireItemAnswerOption(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireItemAnswerOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireItemAnswerOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireItemAnswerOption")
		case "id":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_id(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_extension(ctx, field, obj)
		case "modifierExtension":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_modifierExtension(ctx, field, obj)
		case "valueInteger":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_valueInteger(ctx, field, obj)
		case "valueDate":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_valueDate(ctx, field, obj)
		case "valueString":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_valueString(ctx, field, obj)
		case "valueCoding":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_valueCoding(ctx, field, obj)
		case "valueReference":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_valueReference(ctx, field, obj)
		case "initialSelected":
			out.Values[i] = ec._QuestionnaireItemAnswerOption_initialSelected(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireItemEnableWhenImplementors = []string{"QuestionnaireItemEnableWhen"}

func (ec *executionContext) _QuestionnaireItemEnableWhen(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireItemEnableWhen) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireItemEnableWhenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireItemEnableWhen")
		case "id":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_id(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_extension(ctx, field, obj)
		case "modifierExtension":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_modifierExtension(ctx, field, obj)
		case "question":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_question(ctx, field, obj)
		case "operator":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_operator(ctx, field, obj)
		case "answerBoolean":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerBoolean(ctx, field, obj)
		case "answerDecimal":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerDecimal(ctx, field, obj)
		case "answerInteger":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerInteger(ctx, field, obj)
		case "answerDate":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerDate(ctx, field, obj)
		case "answerDateTime":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerDateTime(ctx, field, obj)
		case "answerTime":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerTime(ctx, field, obj)
		case "answerString":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerString(ctx, field, obj)
		case "answerCoding":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerCoding(ctx, field, obj)
		case "answerQuantity":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerQuantity(ctx, field, obj)
		case "answerReference":
			out.Values[i] = ec._QuestionnaireItemEnableWhen_answerReference(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireItemInitialImplementors = []string{"QuestionnaireItemInitial"}

func (ec *executionContext) _QuestionnaireItemInitial(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireItemInitial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireItemInitialImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireItemInitial")
		case "id":
			out.Values[i] = ec._QuestionnaireItemInitial_id(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._QuestionnaireItemInitial_extension(ctx, field, obj)
		case "modifierExtension":
			out.Values[i] = ec._QuestionnaireItemInitial_modifierExtension(ctx, field, obj)
		case "valueBoolean":
			out.Values[i] = ec._QuestionnaireItemInitial_valueBoolean(ctx, field, obj)
		case "valueDecimal":
			out.Values[i] = ec._QuestionnaireItemInitial_valueDecimal(ctx, field, obj)
		case "valueInteger":
			out.Values[i] = ec._QuestionnaireItemInitial_valueInteger(ctx, field, obj)
		case "valueDate":
			out.Values[i] = ec._QuestionnaireItemInitial_valueDate(ctx, field, obj)
		case "valueDateTime":
			out.Values[i] = ec._QuestionnaireItemInitial_valueDateTime(ctx, field, obj)
		case "valueString":
			out.Values[i] = ec._QuestionnaireItemInitial_valueString(ctx, field, obj)
		case "valueUri":
			out.Values[i] = ec._QuestionnaireItemInitial_valueUri(ctx, field, obj)
		case "valueAttachment":
			out.Values[i] = ec._QuestionnaireItemInitial_valueAttachment(ctx, field, obj)
		case "valueCoding":
			out.Values[i] = ec._QuestionnaireItemInitial_valueCoding(ctx, field, obj)
		case "valueQuantity":
			out.Values[i] = ec._QuestionnaireItemInitial_valueQuantity(ctx, field, obj)
		case "valueReference":
			out.Values[i] = ec._QuestionnaireItemInitial_valueReference(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireResponseImplementors = []string{"QuestionnaireResponse"}

func (ec *executionContext) _QuestionnaireResponse(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireResponseImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireResponse")
		case "status":
			out.Values[i] = ec._QuestionnaireResponse_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "authored":
			out.Values[i] = ec._QuestionnaireResponse_authored(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "item":
			out.Values[i] = ec._QuestionnaireResponse_item(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireResponseItemImplementors = []string{"QuestionnaireResponseItem"}

func (ec *executionContext) _QuestionnaireResponseItem(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireResponseItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireResponseItemImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireResponseItem")
		case "linkId":
			out.Values[i] = ec._QuestionnaireResponseItem_linkId(ctx, field, obj)
		case "text":
			out.Values[i] = ec._QuestionnaireResponseItem_text(ctx, field, obj)
		case "answer":
			out.Values[i] = ec._QuestionnaireResponseItem_answer(ctx, field, obj)
		case "item":
			out.Values[i] = ec._QuestionnaireResponseItem_item(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var questionnaireResponseItemAnswerImplementors = []string{"QuestionnaireResponseItemAnswer"}

func (ec *executionContext) _QuestionnaireResponseItemAnswer(ctx context.Context, sel ast.SelectionSet, obj *dto.QuestionnaireResponseItemAnswer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, questionnaireResponseItemAnswerImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QuestionnaireResponseItemAnswer")
		case "valueBoolean":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueBoolean(ctx, field, obj)
		case "valueDecimal":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueDecimal(ctx, field, obj)
		case "valueInteger":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueInteger(ctx, field, obj)
		case "valueDate":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueDate(ctx, field, obj)
		case "valueDateTime":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueDateTime(ctx, field, obj)
		case "valueTime":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueTime(ctx, field, obj)
		case "valueString":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueString(ctx, field, obj)
		case "valueUri":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueUri(ctx, field, obj)
		case "valueAttachment":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueAttachment(ctx, field, obj)
		case "valueCoding":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueCoding(ctx, field, obj)
		case "valueQuantity":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueQuantity(ctx, field, obj)
		case "valueReference":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_valueReference(ctx, field, obj)
		case "item":
			out.Values[i] = ec._QuestionnaireResponseItemAnswer_item(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rangeImplementors = []string{"Range"}

func (ec *executionContext) _Range(ctx context.Context, sel ast.SelectionSet, obj *dto.Range) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rangeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Range")
		case "id":
			out.Values[i] = ec._Range_id(ctx, field, obj)
		case "low":
			out.Values[i] = ec._Range_low(ctx, field, obj)
		case "high":
			out.Values[i] = ec._Range_high(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var ratioImplementors = []string{"Ratio"}

func (ec *executionContext) _Ratio(ctx context.Context, sel ast.SelectionSet, obj *dto.Ratio) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ratioImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ratio")
		case "id":
			out.Values[i] = ec._Ratio_id(ctx, field, obj)
		case "numerator":
			out.Values[i] = ec._Ratio_numerator(ctx, field, obj)
		case "denominator":
			out.Values[i] = ec._Ratio_denominator(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var reactionImplementors = []string{"Reaction"}

func (ec *executionContext) _Reaction(ctx context.Context, sel ast.SelectionSet, obj *dto.Reaction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reactionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reaction")
		case "code":
			out.Values[i] = ec._Reaction_code(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Reaction_name(ctx, field, obj)
		case "system":
			out.Values[i] = ec._Reaction_system(ctx, field, obj)
		case "severity":
			out.Values[i] = ec._Reaction_severity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var referenceImplementors = []string{"Reference"}

func (ec *executionContext) _Reference(ctx context.Context, sel ast.SelectionSet, obj *dto.Reference) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, referenceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reference")
		case "id":
			out.Values[i] = ec._Reference_id(ctx, field, obj)
		case "reference":
			out.Values[i] = ec._Reference_reference(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Reference_type(ctx, field, obj)
		case "identifier":
			out.Values[i] = ec._Reference_identifier(ctx, field, obj)
		case "display":
			out.Values[i] = ec._Reference_display(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var riskAssessmentImplementors = []string{"RiskAssessment"}

func (ec *executionContext) _RiskAssessment(ctx context.Context, sel ast.SelectionSet, obj *dto.RiskAssessment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, riskAssessmentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RiskAssessment")
		case "id":
			out.Values[i] = ec._RiskAssessment_id(ctx, field, obj)
		case "subject":
			out.Values[i] = ec._RiskAssessment_subject(ctx, field, obj)
		case "encounter":
			out.Values[i] = ec._RiskAssessment_encounter(ctx, field, obj)
		case "prediction":
			out.Values[i] = ec._RiskAssessment_prediction(ctx, field, obj)
		case "note":
			out.Values[i] = ec._RiskAssessment_note(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var riskAssessmentPredictionImplementors = []string{"RiskAssessmentPrediction"}

func (ec *executionContext) _RiskAssessmentPrediction(ctx context.Context, sel ast.SelectionSet, obj *dto.RiskAssessmentPrediction) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, riskAssessmentPredictionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RiskAssessmentPrediction")
		case "id":
			out.Values[i] = ec._RiskAssessmentPrediction_id(ctx, field, obj)
		case "outcome":
			out.Values[i] = ec._RiskAssessmentPrediction_outcome(ctx, field, obj)
		case "probabilityDecimal":
			out.Values[i] = ec._RiskAssessmentPrediction_probabilityDecimal(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var sectionImplementors = []string{"Section"}

func (ec *executionContext) _Section(ctx context.Context, sel ast.SelectionSet, obj *dto.Section) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Section")
		case "id":
			out.Values[i] = ec._Section_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Section_title(ctx, field, obj)
		case "code":
			out.Values[i] = ec._Section_code(ctx, field, obj)
		case "author":
			out.Values[i] = ec._Section_author(ctx, field, obj)
		case "text":
			out.Values[i] = ec._Section_text(ctx, field, obj)
		case "section":
			out.Values[i] = ec._Section_section(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var terminologyImplementors = []string{"Terminology"}

func (ec *executionContext) _Terminology(ctx context.Context, sel ast.SelectionSet, obj *dto.Terminology) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, terminologyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Terminology")
		case "code":
			out.Values[i] = ec._Terminology_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "system":
			out.Values[i] = ec._Terminology_system(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec._Terminology_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var terminologyConnectionImplementors = []string{"TerminologyConnection"}

func (ec *executionContext) _TerminologyConnection(ctx context.Context, sel ast.SelectionSet, obj *dto.TerminologyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, terminologyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TerminologyConnection")
		case "totalCount":
			out.Values[i] = ec._TerminologyConnection_totalCount(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._TerminologyConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TerminologyConnection_pageInfo(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var terminologyEdgeImplementors = []string{"TerminologyEdge"}

func (ec *executionContext) _TerminologyEdge(ctx context.Context, sel ast.SelectionSet, obj *dto.TerminologyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, terminologyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TerminologyEdge")
		case "node":
			out.Values[i] = ec._TerminologyEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TerminologyEdge_cursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var timelineResourceImplementors = []string{"TimelineResource"}

func (ec *executionContext) _TimelineResource(ctx context.Context, sel ast.SelectionSet, obj *dto.TimelineResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, timelineResourceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TimelineResource")
		case "id":
			out.Values[i] = ec._TimelineResource_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "resourceType":
			out.Values[i] = ec._TimelineResource_resourceType(ctx, field, obj)
		case "name":
			out.Values[i] = ec._TimelineResource_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._TimelineResource_value(ctx, field, obj)
		case "status":
			out.Values[i] = ec._TimelineResource_status(ctx, field, obj)
		case "date":
			out.Values[i] = ec._TimelineResource_date(ctx, field, obj)
		case "timeRecorded":
			out.Values[i] = ec._TimelineResource_timeRecorded(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var usageContextImplementors = []string{"UsageContext"}

func (ec *executionContext) _UsageContext(ctx context.Context, sel ast.SelectionSet, obj *dto.UsageContext) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usageContextImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UsageContext")
		case "id":
			out.Values[i] = ec._UsageContext_id(ctx, field, obj)
		case "extension":
			out.Values[i] = ec._UsageContext_extension(ctx, field, obj)
		case "code":
			out.Values[i] = ec._UsageContext_code(ctx, field, obj)
		case "valueCodeableConcept":
			out.Values[i] = ec._UsageContext_valueCodeableConcept(ctx, field, obj)
		case "valueQuantity":
			out.Values[i] = ec._UsageContext_valueQuantity(ctx, field, obj)
		case "valueRange":
			out.Values[i] = ec._UsageContext_valueRange(ctx, field, obj)
		case "valueReference":
			out.Values[i] = ec._UsageContext_valueReference(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAllergy2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx context.Context, sel ast.SelectionSet, v dto.Allergy) graphql.Marshaler {
	return ec._Allergy(ctx, sel, &v)
}

func (ec *executionContext) marshalNAllergy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx context.Context, sel ast.SelectionSet, v *dto.Allergy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Allergy(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAllergyInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyInput(ctx context.Context, v interface{}) (dto.AllergyInput, error) {
	res, err := ec.unmarshalInputAllergyInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNComposition2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐComposition(ctx context.Context, sel ast.SelectionSet, v dto.Composition) graphql.Marshaler {
	return ec._Composition(ctx, sel, &v)
}

func (ec *executionContext) marshalNComposition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐComposition(ctx context.Context, sel ast.SelectionSet, v *dto.Composition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Composition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx context.Context, v interface{}) (dto.CompositionCategory, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.CompositionCategory(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx context.Context, sel ast.SelectionSet, v dto.CompositionCategory) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionInput(ctx context.Context, v interface{}) (dto.CompositionInput, error) {
	res, err := ec.unmarshalInputCompositionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx context.Context, v interface{}) (dto.CompositionStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.CompositionStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.CompositionStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx context.Context, v interface{}) (dto.CompositionType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.CompositionType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx context.Context, sel ast.SelectionSet, v dto.CompositionType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCondition2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCondition(ctx context.Context, sel ast.SelectionSet, v dto.Condition) graphql.Marshaler {
	return ec._Condition(ctx, sel, &v)
}

func (ec *executionContext) marshalNCondition2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCondition(ctx context.Context, sel ast.SelectionSet, v *dto.Condition) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Condition(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConditionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionCategory(ctx context.Context, v interface{}) (dto.ConditionCategory, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ConditionCategory(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConditionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionCategory(ctx context.Context, sel ast.SelectionSet, v dto.ConditionCategory) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConditionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionInput(ctx context.Context, v interface{}) (dto.ConditionInput, error) {
	res, err := ec.unmarshalInputConditionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNConditionStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionStatus(ctx context.Context, v interface{}) (dto.ConditionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ConditionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConditionStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionStatus(ctx context.Context, sel ast.SelectionSet, v dto.ConditionStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConsentInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentInput(ctx context.Context, v interface{}) (dto.ConsentInput, error) {
	res, err := ec.unmarshalInputConsentInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConsentOutput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentOutput(ctx context.Context, sel ast.SelectionSet, v dto.ConsentOutput) graphql.Marshaler {
	return ec._ConsentOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNConsentOutput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentOutput(ctx context.Context, sel ast.SelectionSet, v *dto.ConsentOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConsentOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConsentProvisionTypeEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvisionTypeEnum(ctx context.Context, v interface{}) (dto.ConsentProvisionTypeEnum, error) {
	var res dto.ConsentProvisionTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConsentProvisionTypeEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvisionTypeEnum(ctx context.Context, sel ast.SelectionSet, v dto.ConsentProvisionTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNConsentStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentStatusEnum(ctx context.Context, v interface{}) (*dto.ConsentStatusEnum, error) {
	var res = new(dto.ConsentStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConsentStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentStatusEnum(ctx context.Context, sel ast.SelectionSet, v *dto.ConsentStatusEnum) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNContactInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInput(ctx context.Context, v interface{}) (dto.ContactInput, error) {
	res, err := ec.unmarshalInputContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNContactType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactType(ctx context.Context, v interface{}) (dto.ContactType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ContactType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNContactType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactType(ctx context.Context, sel ast.SelectionSet, v dto.ContactType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNDate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (*scalarutils.Date, error) {
	var res = new(scalarutils.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Date) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNDiagnosticReport2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx context.Context, sel ast.SelectionSet, v dto.DiagnosticReport) graphql.Marshaler {
	return ec._DiagnosticReport(ctx, sel, &v)
}

func (ec *executionContext) marshalNDiagnosticReport2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReport(ctx context.Context, sel ast.SelectionSet, v *dto.DiagnosticReport) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DiagnosticReport(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDiagnosticReportInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐDiagnosticReportInput(ctx context.Context, v interface{}) (dto.DiagnosticReportInput, error) {
	res, err := ec.unmarshalInputDiagnosticReportInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEncounter2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx context.Context, sel ast.SelectionSet, v dto.Encounter) graphql.Marshaler {
	return ec._Encounter(ctx, sel, &v)
}

func (ec *executionContext) marshalNEncounter2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx context.Context, sel ast.SelectionSet, v *dto.Encounter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Encounter(ctx, sel, v)
}

func (ec *executionContext) marshalNEncounterAssociatedResources2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterAssociatedResources(ctx context.Context, sel ast.SelectionSet, v dto.EncounterAssociatedResources) graphql.Marshaler {
	return ec._EncounterAssociatedResources(ctx, sel, &v)
}

func (ec *executionContext) marshalNEncounterAssociatedResources2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterAssociatedResources(ctx context.Context, sel ast.SelectionSet, v *dto.EncounterAssociatedResources) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EncounterAssociatedResources(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEncounterInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterInput(ctx context.Context, v interface{}) (dto.EncounterInput, error) {
	res, err := ec.unmarshalInputEncounterInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEpisodeOfCare2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v dto.EpisodeOfCare) graphql.Marshaler {
	return ec._EpisodeOfCare(ctx, sel, &v)
}

func (ec *executionContext) marshalNEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v *dto.EpisodeOfCare) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._EpisodeOfCare(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEpisodeOfCareInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareInput(ctx context.Context, v interface{}) (dto.EpisodeOfCareInput, error) {
	res, err := ec.unmarshalInputEpisodeOfCareInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx context.Context, v interface{}) (dto.EpisodeOfCareStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EpisodeOfCareStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEpisodeOfCareStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCareStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.EpisodeOfCareStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx context.Context, v interface{}) (dto.Gender, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.Gender(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx context.Context, sel ast.SelectionSet, v dto.Gender) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNHealthTimeline2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimeline(ctx context.Context, sel ast.SelectionSet, v dto.HealthTimeline) graphql.Marshaler {
	return ec._HealthTimeline(ctx, sel, &v)
}

func (ec *executionContext) marshalNHealthTimeline2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimeline(ctx context.Context, sel ast.SelectionSet, v *dto.HealthTimeline) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._HealthTimeline(ctx, sel, v)
}

func (ec *executionContext) unmarshalNHealthTimelineInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐHealthTimelineInput(ctx context.Context, v interface{}) (dto.HealthTimelineInput, error) {
	res, err := ec.unmarshalInputHealthTimelineInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIdentifierInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInput(ctx context.Context, v interface{}) (dto.IdentifierInput, error) {
	res, err := ec.unmarshalInputIdentifierInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIdentifierType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierType(ctx context.Context, v interface{}) (dto.IdentifierType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.IdentifierType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIdentifierType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierType(ctx context.Context, sel ast.SelectionSet, v dto.IdentifierType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNMedia2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedia(ctx context.Context, sel ast.SelectionSet, v *dto.Media) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) marshalNMedication2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedication(ctx context.Context, sel ast.SelectionSet, v dto.Medication) graphql.Marshaler {
	return ec._Medication(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNMetaInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMetaInput(ctx context.Context, v interface{}) (dto.MetaInput, error) {
	res, err := ec.unmarshalInputMetaInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNObservation2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v dto.Observation) graphql.Marshaler {
	return ec._Observation(ctx, sel, &v)
}

func (ec *executionContext) marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v *dto.Observation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Observation(ctx, sel, v)
}

func (ec *executionContext) unmarshalNObservationInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationInput(ctx context.Context, v interface{}) (dto.ObservationInput, error) {
	res, err := ec.unmarshalInputObservationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx context.Context, v interface{}) (dto.ObservationStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ObservationStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNObservationStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationStatus(ctx context.Context, sel ast.SelectionSet, v dto.ObservationStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNPagination2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPagination(ctx context.Context, v interface{}) (dto.Pagination, error) {
	res, err := ec.unmarshalInputPagination(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchCompositionInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatchCompositionInput(ctx context.Context, v interface{}) (dto.PatchCompositionInput, error) {
	res, err := ec.unmarshalInputPatchCompositionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPatchPatientInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatientInput(ctx context.Context, v interface{}) (dto.PatientInput, error) {
	res, err := ec.unmarshalInputPatchPatientInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPatient2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx context.Context, sel ast.SelectionSet, v dto.Patient) graphql.Marshaler {
	return ec._Patient(ctx, sel, &v)
}

func (ec *executionContext) marshalNPatient2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatient(ctx context.Context, sel ast.SelectionSet, v *dto.Patient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Patient(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPatientInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPatientInput(ctx context.Context, v interface{}) (dto.PatientInput, error) {
	res, err := ec.unmarshalInputPatientInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNQuestionnaireResponseInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponse(ctx context.Context, v interface{}) (dto.QuestionnaireResponse, error) {
	res, err := ec.unmarshalInputQuestionnaireResponseInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNQuestionnaireResponseStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseStatusEnum(ctx context.Context, v interface{}) (dto.QuestionnaireResponseStatusEnum, error) {
	var res dto.QuestionnaireResponseStatusEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNQuestionnaireResponseStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.QuestionnaireResponseStatusEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNScreeningTypeEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐScreeningTypeEnum(ctx context.Context, v interface{}) (domain.ScreeningTypeEnum, error) {
	var res domain.ScreeningTypeEnum
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNScreeningTypeEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋdomainᚐScreeningTypeEnum(ctx context.Context, sel ast.SelectionSet, v domain.ScreeningTypeEnum) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSectionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSectionInput(ctx context.Context, v interface{}) (*dto.SectionInput, error) {
	res, err := ec.unmarshalInputSectionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx context.Context, v interface{}) (dto.TerminologySource, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.TerminologySource(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx context.Context, sel ast.SelectionSet, v dto.TerminologySource) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOAllergy2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx context.Context, sel ast.SelectionSet, v dto.Allergy) graphql.Marshaler {
	return ec._Allergy(ctx, sel, &v)
}

func (ec *executionContext) marshalOAllergy2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx context.Context, sel ast.SelectionSet, v []*dto.Allergy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllergy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAllergy2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergy(ctx context.Context, sel ast.SelectionSet, v *dto.Allergy) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Allergy(ctx, sel, v)
}

func (ec *executionContext) marshalOAllergyConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyConnection(ctx context.Context, sel ast.SelectionSet, v *dto.AllergyConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AllergyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOAllergyEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyEdge(ctx context.Context, sel ast.SelectionSet, v dto.AllergyEdge) graphql.Marshaler {
	return ec._AllergyEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOAllergyEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyEdge(ctx context.Context, sel ast.SelectionSet, v []dto.AllergyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllergyEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx context.Context, v interface{}) (dto.AllergyIntoleranceReactionSeverityEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.AllergyIntoleranceReactionSeverityEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAllergyIntoleranceReactionSeverityEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAllergyIntoleranceReactionSeverityEnum(ctx context.Context, sel ast.SelectionSet, v dto.AllergyIntoleranceReactionSeverityEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOAnnotation2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAnnotation(ctx context.Context, sel ast.SelectionSet, v dto.Annotation) graphql.Marshaler {
	return ec._Annotation(ctx, sel, &v)
}

func (ec *executionContext) marshalOAnnotation2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAnnotation(ctx context.Context, sel ast.SelectionSet, v []dto.Annotation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAnnotation2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAnnotation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAnnotation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAnnotation(ctx context.Context, sel ast.SelectionSet, v *dto.Annotation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Annotation(ctx, sel, v)
}

func (ec *executionContext) marshalOAttachment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAttachment(ctx context.Context, sel ast.SelectionSet, v *dto.Attachment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Attachment(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAttachmentInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐAttachment(ctx context.Context, v interface{}) (*dto.Attachment, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAttachmentInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBase64Binary2githubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx context.Context, v interface{}) (scalarutils.Base64Binary, error) {
	var res scalarutils.Base64Binary
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBase64Binary2githubᚗcomᚋsavannahghiᚋscalarutilsᚐBase64Binary(ctx context.Context, sel ast.SelectionSet, v scalarutils.Base64Binary) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) (scalarutils.Code, error) {
	var res scalarutils.Code
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCode2githubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v scalarutils.Code) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, v interface{}) (*scalarutils.Code, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Code)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCode2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐCode(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Code) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOCodeableConcept2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx context.Context, sel ast.SelectionSet, v []*dto.CodeableConcept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCodeableConcept2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCodeableConcept(ctx context.Context, sel ast.SelectionSet, v *dto.CodeableConcept) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CodeableConcept(ctx, sel, v)
}

func (ec *executionContext) marshalOCoding2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, sel ast.SelectionSet, v dto.Coding) graphql.Marshaler {
	return ec._Coding(ctx, sel, &v)
}

func (ec *executionContext) marshalOCoding2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, sel ast.SelectionSet, v []dto.Coding) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCoding2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCoding2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, sel ast.SelectionSet, v []*dto.Coding) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCoding2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, sel ast.SelectionSet, v *dto.Coding) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Coding(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCodingInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, v interface{}) (dto.Coding, error) {
	res, err := ec.unmarshalInputCodingInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCodingInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, v interface{}) ([]dto.Coding, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.Coding, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCodingInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCodingInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCoding(ctx context.Context, v interface{}) (*dto.Coding, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCodingInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOComposition2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐComposition(ctx context.Context, sel ast.SelectionSet, v dto.Composition) graphql.Marshaler {
	return ec._Composition(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx context.Context, v interface{}) (dto.CompositionCategory, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.CompositionCategory(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompositionCategory2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionCategory(ctx context.Context, sel ast.SelectionSet, v dto.CompositionCategory) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOCompositionConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionConnection(ctx context.Context, sel ast.SelectionSet, v *dto.CompositionConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompositionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOCompositionEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionEdge(ctx context.Context, sel ast.SelectionSet, v dto.CompositionEdge) graphql.Marshaler {
	return ec._CompositionEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOCompositionEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionEdge(ctx context.Context, sel ast.SelectionSet, v []dto.CompositionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompositionEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx context.Context, v interface{}) (dto.CompositionStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.CompositionStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompositionStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.CompositionStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx context.Context, v interface{}) (dto.CompositionType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.CompositionType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCompositionType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCompositionType(ctx context.Context, sel ast.SelectionSet, v dto.CompositionType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOCondition2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐCondition(ctx context.Context, sel ast.SelectionSet, v dto.Condition) graphql.Marshaler {
	return ec._Condition(ctx, sel, &v)
}

func (ec *executionContext) marshalOConditionConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionConnection(ctx context.Context, sel ast.SelectionSet, v *dto.ConditionConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConditionConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOConditionEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionEdge(ctx context.Context, sel ast.SelectionSet, v dto.ConditionEdge) graphql.Marshaler {
	return ec._ConditionEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOConditionEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionEdge(ctx context.Context, sel ast.SelectionSet, v []dto.ConditionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConditionEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOConditionStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionStatus(ctx context.Context, v interface{}) (dto.ConditionStatus, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ConditionStatus(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConditionStatus2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConditionStatus(ctx context.Context, sel ast.SelectionSet, v dto.ConditionStatus) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOConsent2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsent(ctx context.Context, sel ast.SelectionSet, v *dto.Consent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Consent(ctx, sel, v)
}

func (ec *executionContext) marshalOConsentProvision2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvision(ctx context.Context, sel ast.SelectionSet, v *dto.ConsentProvision) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConsentProvision(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConsentProvisionTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvisionTypeEnum(ctx context.Context, v interface{}) (*dto.ConsentProvisionTypeEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(dto.ConsentProvisionTypeEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConsentProvisionTypeEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentProvisionTypeEnum(ctx context.Context, sel ast.SelectionSet, v *dto.ConsentProvisionTypeEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOConsentStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentStatusEnum(ctx context.Context, v interface{}) (*dto.ConsentStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(dto.ConsentStatusEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOConsentStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐConsentStatusEnum(ctx context.Context, sel ast.SelectionSet, v *dto.ConsentStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOContactInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInputᚄ(ctx context.Context, v interface{}) ([]dto.ContactInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.ContactInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNContactInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐContactInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (scalarutils.Date, error) {
	var res scalarutils.Date
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v scalarutils.Date) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, v interface{}) (*scalarutils.Date, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.Date)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODate2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDate(ctx context.Context, sel ast.SelectionSet, v *scalarutils.Date) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalODateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) (scalarutils.DateTime, error) {
	var res scalarutils.DateTime
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2githubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v scalarutils.DateTime) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, v interface{}) (*scalarutils.DateTime, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.DateTime)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐDateTime(ctx context.Context, sel ast.SelectionSet, v *scalarutils.DateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOEncounter2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounter(ctx context.Context, sel ast.SelectionSet, v dto.Encounter) graphql.Marshaler {
	return ec._Encounter(ctx, sel, &v)
}

func (ec *executionContext) marshalOEncounterClass2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClass(ctx context.Context, sel ast.SelectionSet, v *dto.EncounterClass) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EncounterClass(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEncounterClassEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClassEnum(ctx context.Context, v interface{}) (*dto.EncounterClassEnum, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EncounterClassEnum(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterClassEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterClassEnum(ctx context.Context, sel ast.SelectionSet, v *dto.EncounterClassEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOEncounterConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterConnection(ctx context.Context, sel ast.SelectionSet, v *dto.EncounterConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EncounterConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOEncounterEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterEdge(ctx context.Context, sel ast.SelectionSet, v dto.EncounterEdge) graphql.Marshaler {
	return ec._EncounterEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOEncounterEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterEdge(ctx context.Context, sel ast.SelectionSet, v []dto.EncounterEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEncounterEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx context.Context, v interface{}) (dto.EncounterStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EncounterStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.EncounterStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOEncounterStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx context.Context, v interface{}) (*dto.EncounterStatusEnum, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := dto.EncounterStatusEnum(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEncounterStatusEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEncounterStatusEnum(ctx context.Context, sel ast.SelectionSet, v *dto.EncounterStatusEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) marshalOEpisodeOfCare2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐEpisodeOfCare(ctx context.Context, sel ast.SelectionSet, v *dto.EpisodeOfCare) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EpisodeOfCare(ctx, sel, v)
}

func (ec *executionContext) marshalOExtension2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx context.Context, sel ast.SelectionSet, v []*dto.Extension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOExtension2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOExtension2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐExtension(ctx context.Context, sel ast.SelectionSet, v *dto.Extension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Extension(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx context.Context, v interface{}) (dto.Gender, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.Gender(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOGender2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐGender(ctx context.Context, sel ast.SelectionSet, v dto.Gender) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	return res
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) marshalOIdentifier2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx context.Context, sel ast.SelectionSet, v dto.Identifier) graphql.Marshaler {
	return ec._Identifier(ctx, sel, &v)
}

func (ec *executionContext) marshalOIdentifier2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx context.Context, sel ast.SelectionSet, v []dto.Identifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIdentifier2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOIdentifier2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx context.Context, sel ast.SelectionSet, v *dto.Identifier) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Identifier(ctx, sel, v)
}

func (ec *executionContext) marshalOIdentifier2ᚖᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx context.Context, sel ast.SelectionSet, v *[]dto.Identifier) graphql.Marshaler {
	return ec.marshalOIdentifier2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifier(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOIdentifierInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInputᚄ(ctx context.Context, v interface{}) ([]dto.IdentifierInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.IdentifierInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIdentifierInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐIdentifierInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOMarkdown2githubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx context.Context, v interface{}) (scalarutils.Markdown, error) {
	var res scalarutils.Markdown
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMarkdown2githubᚗcomᚋsavannahghiᚋscalarutilsᚐMarkdown(ctx context.Context, sel ast.SelectionSet, v scalarutils.Markdown) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOMedia2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedia(ctx context.Context, sel ast.SelectionSet, v dto.Media) graphql.Marshaler {
	return ec._Media(ctx, sel, &v)
}

func (ec *executionContext) marshalOMedia2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMedia2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOMediaConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaConnection(ctx context.Context, sel ast.SelectionSet, v *dto.MediaConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MediaConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOMediaEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaEdge(ctx context.Context, sel ast.SelectionSet, v dto.MediaEdge) graphql.Marshaler {
	return ec._MediaEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOMediaEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaEdge(ctx context.Context, sel ast.SelectionSet, v []dto.MediaEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMediaEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMediaEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOMediaInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedia(ctx context.Context, v interface{}) (*dto.Media, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMediaInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicalData2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicalData(ctx context.Context, sel ast.SelectionSet, v *dto.MedicalData) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicalData(ctx, sel, v)
}

func (ec *executionContext) marshalOMedicationStatement2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx context.Context, sel ast.SelectionSet, v []*dto.MedicationStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMedicationStatement2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatement(ctx context.Context, sel ast.SelectionSet, v *dto.MedicationStatement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MedicationStatement(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMedicationStatementStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatementStatusEnum(ctx context.Context, v interface{}) (dto.MedicationStatementStatusEnum, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.MedicationStatementStatusEnum(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMedicationStatementStatusEnum2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMedicationStatementStatusEnum(ctx context.Context, sel ast.SelectionSet, v dto.MedicationStatementStatusEnum) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalOMeta2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐMeta(ctx context.Context, sel ast.SelectionSet, v *dto.Meta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) marshalONarrative2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐNarrative(ctx context.Context, sel ast.SelectionSet, v *dto.Narrative) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Narrative(ctx, sel, v)
}

func (ec *executionContext) marshalOObservation2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v dto.Observation) graphql.Marshaler {
	return ec._Observation(ctx, sel, &v)
}

func (ec *executionContext) marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v []*dto.Observation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOObservation2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.Observation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOObservation2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservation(ctx context.Context, sel ast.SelectionSet, v *dto.Observation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Observation(ctx, sel, v)
}

func (ec *executionContext) marshalOObservationConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationConnection(ctx context.Context, sel ast.SelectionSet, v *dto.ObservationConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ObservationConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOObservationEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationEdge(ctx context.Context, sel ast.SelectionSet, v dto.ObservationEdge) graphql.Marshaler {
	return ec._ObservationEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOObservationEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationEdge(ctx context.Context, sel ast.SelectionSet, v []dto.ObservationEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOObservationEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐObservationEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPageInfo2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v dto.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOPeriod2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐPeriod(ctx context.Context, sel ast.SelectionSet, v *dto.Period) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Period(ctx, sel, v)
}

func (ec *executionContext) marshalOQuantity2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx context.Context, sel ast.SelectionSet, v dto.Quantity) graphql.Marshaler {
	return ec._Quantity(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuantity2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx context.Context, sel ast.SelectionSet, v *dto.Quantity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Quantity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantityComparatorEnum(ctx context.Context, v interface{}) (*dto.QuantityComparatorEnum, error) {
	if v == nil {
		return nil, nil
	}
	tmp, err := graphql.UnmarshalString(v)
	res := dto.QuantityComparatorEnum(tmp)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuantityComparatorEnum2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantityComparatorEnum(ctx context.Context, sel ast.SelectionSet, v *dto.QuantityComparatorEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(string(*v))
	return res
}

func (ec *executionContext) unmarshalOQuantityInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuantity(ctx context.Context, v interface{}) (*dto.Quantity, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputQuantityInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuestionnaire2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaire(ctx context.Context, sel ast.SelectionSet, v dto.Questionnaire) graphql.Marshaler {
	return ec._Questionnaire(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuestionnaireEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireEdge(ctx context.Context, sel ast.SelectionSet, v dto.QuestionnaireEdge) graphql.Marshaler {
	return ec._QuestionnaireEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuestionnaireEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireEdge(ctx context.Context, sel ast.SelectionSet, v []dto.QuestionnaireEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuestionnaireItem2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItem(ctx context.Context, sel ast.SelectionSet, v []*dto.QuestionnaireItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireItem2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuestionnaireItem2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItem(ctx context.Context, sel ast.SelectionSet, v *dto.QuestionnaireItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuestionnaireItem(ctx, sel, v)
}

func (ec *executionContext) marshalOQuestionnaireItemAnswerOption2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemAnswerOption(ctx context.Context, sel ast.SelectionSet, v []*dto.QuestionnaireItemAnswerOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireItemAnswerOption2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemAnswerOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuestionnaireItemAnswerOption2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemAnswerOption(ctx context.Context, sel ast.SelectionSet, v *dto.QuestionnaireItemAnswerOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuestionnaireItemAnswerOption(ctx, sel, v)
}

func (ec *executionContext) marshalOQuestionnaireItemEnableWhen2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemEnableWhen(ctx context.Context, sel ast.SelectionSet, v []*dto.QuestionnaireItemEnableWhen) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireItemEnableWhen2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemEnableWhen(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuestionnaireItemEnableWhen2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemEnableWhen(ctx context.Context, sel ast.SelectionSet, v *dto.QuestionnaireItemEnableWhen) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuestionnaireItemEnableWhen(ctx, sel, v)
}

func (ec *executionContext) marshalOQuestionnaireItemInitial2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemInitial(ctx context.Context, sel ast.SelectionSet, v []*dto.QuestionnaireItemInitial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireItemInitial2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemInitial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuestionnaireItemInitial2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireItemInitial(ctx context.Context, sel ast.SelectionSet, v *dto.QuestionnaireItemInitial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._QuestionnaireItemInitial(ctx, sel, v)
}

func (ec *executionContext) marshalOQuestionnaireResponseItem2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx context.Context, sel ast.SelectionSet, v dto.QuestionnaireResponseItem) graphql.Marshaler {
	return ec._QuestionnaireResponseItem(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuestionnaireResponseItem2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx context.Context, sel ast.SelectionSet, v []dto.QuestionnaireResponseItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireResponseItem2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOQuestionnaireResponseItemAnswer2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx context.Context, sel ast.SelectionSet, v dto.QuestionnaireResponseItemAnswer) graphql.Marshaler {
	return ec._QuestionnaireResponseItemAnswer(ctx, sel, &v)
}

func (ec *executionContext) marshalOQuestionnaireResponseItemAnswer2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx context.Context, sel ast.SelectionSet, v []dto.QuestionnaireResponseItemAnswer) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOQuestionnaireResponseItemAnswer2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOQuestionnaireResponseItemAnswerInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx context.Context, v interface{}) (dto.QuestionnaireResponseItemAnswer, error) {
	res, err := ec.unmarshalInputQuestionnaireResponseItemAnswerInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuestionnaireResponseItemAnswerInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx context.Context, v interface{}) ([]dto.QuestionnaireResponseItemAnswer, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.QuestionnaireResponseItemAnswer, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOQuestionnaireResponseItemAnswerInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItemAnswer(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOQuestionnaireResponseItemInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx context.Context, v interface{}) (dto.QuestionnaireResponseItem, error) {
	res, err := ec.unmarshalInputQuestionnaireResponseItemInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOQuestionnaireResponseItemInput2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx context.Context, v interface{}) ([]dto.QuestionnaireResponseItem, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]dto.QuestionnaireResponseItem, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOQuestionnaireResponseItemInput2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐQuestionnaireResponseItem(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORange2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRange(ctx context.Context, sel ast.SelectionSet, v *dto.Range) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Range(ctx, sel, v)
}

func (ec *executionContext) marshalORatio2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRatio(ctx context.Context, sel ast.SelectionSet, v *dto.Ratio) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Ratio(ctx, sel, v)
}

func (ec *executionContext) marshalOReaction2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReaction(ctx context.Context, sel ast.SelectionSet, v dto.Reaction) graphql.Marshaler {
	return ec._Reaction(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOReactionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReactionInput(ctx context.Context, v interface{}) (*dto.ReactionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReactionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReference2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx context.Context, sel ast.SelectionSet, v dto.Reference) graphql.Marshaler {
	return ec._Reference(ctx, sel, &v)
}

func (ec *executionContext) marshalOReference2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx context.Context, sel ast.SelectionSet, v *dto.Reference) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Reference(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReferenceInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐReference(ctx context.Context, v interface{}) (*dto.Reference, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReferenceInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOResourceType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐResourceType(ctx context.Context, v interface{}) (dto.ResourceType, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.ResourceType(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResourceType2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐResourceType(ctx context.Context, sel ast.SelectionSet, v dto.ResourceType) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) marshalORiskAssessment2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRiskAssessment(ctx context.Context, sel ast.SelectionSet, v *dto.RiskAssessment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RiskAssessment(ctx, sel, v)
}

func (ec *executionContext) marshalORiskAssessmentPrediction2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRiskAssessmentPrediction(ctx context.Context, sel ast.SelectionSet, v dto.RiskAssessmentPrediction) graphql.Marshaler {
	return ec._RiskAssessmentPrediction(ctx, sel, &v)
}

func (ec *executionContext) marshalORiskAssessmentPrediction2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRiskAssessmentPrediction(ctx context.Context, sel ast.SelectionSet, v []dto.RiskAssessmentPrediction) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORiskAssessmentPrediction2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐRiskAssessmentPrediction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSection2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSection(ctx context.Context, sel ast.SelectionSet, v []*dto.Section) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSection(ctx context.Context, sel ast.SelectionSet, v *dto.Section) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Section(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSectionInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSectionInputᚄ(ctx context.Context, v interface{}) ([]*dto.SectionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*dto.SectionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSectionInput2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐSectionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTerminology2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminology(ctx context.Context, sel ast.SelectionSet, v dto.Terminology) graphql.Marshaler {
	return ec._Terminology(ctx, sel, &v)
}

func (ec *executionContext) marshalOTerminologyConnection2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologyConnection(ctx context.Context, sel ast.SelectionSet, v *dto.TerminologyConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TerminologyConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOTerminologyEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologyEdge(ctx context.Context, sel ast.SelectionSet, v dto.TerminologyEdge) graphql.Marshaler {
	return ec._TerminologyEdge(ctx, sel, &v)
}

func (ec *executionContext) marshalOTerminologyEdge2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologyEdge(ctx context.Context, sel ast.SelectionSet, v []dto.TerminologyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTerminologyEdge2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx context.Context, v interface{}) (dto.TerminologySource, error) {
	tmp, err := graphql.UnmarshalString(v)
	res := dto.TerminologySource(tmp)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTerminologySource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTerminologySource(ctx context.Context, sel ast.SelectionSet, v dto.TerminologySource) graphql.Marshaler {
	res := graphql.MarshalString(string(v))
	return res
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) marshalOTimelineResource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx context.Context, sel ast.SelectionSet, v dto.TimelineResource) graphql.Marshaler {
	return ec._TimelineResource(ctx, sel, &v)
}

func (ec *executionContext) marshalOTimelineResource2ᚕgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx context.Context, sel ast.SelectionSet, v []dto.TimelineResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTimelineResource2githubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐTimelineResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) (scalarutils.URI, error) {
	var res scalarutils.URI
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v scalarutils.URI) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOURI2ᚕgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) ([]scalarutils.URI, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]scalarutils.URI, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOURI2ᚕgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v []scalarutils.URI) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOURI2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, v interface{}) (*scalarutils.URI, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.URI)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURI2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐURI(ctx context.Context, sel ast.SelectionSet, v *scalarutils.URI) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOURL2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx context.Context, v interface{}) (scalarutils.URL, error) {
	var res scalarutils.URL
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOURL2githubᚗcomᚋsavannahghiᚋscalarutilsᚐURL(ctx context.Context, sel ast.SelectionSet, v scalarutils.URL) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOUsageContext2ᚖgithubᚗcomᚋsavannahghiᚋclinicalᚋpkgᚋclinicalᚋapplicationᚋdtoᚐUsageContext(ctx context.Context, sel ast.SelectionSet, v *dto.UsageContext) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UsageContext(ctx, sel, v)
}

func (ec *executionContext) unmarshalOXHTML2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx context.Context, v interface{}) (*scalarutils.XHTML, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(scalarutils.XHTML)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOXHTML2ᚖgithubᚗcomᚋsavannahghiᚋscalarutilsᚐXHTML(ctx context.Context, sel ast.SelectionSet, v *scalarutils.XHTML) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
