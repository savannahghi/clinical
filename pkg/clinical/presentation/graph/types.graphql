type Allergy {
  id: ID
  code: String!
  name: String
  system: String
  terminologySource: TerminologySource
  encounterID: String!
  reaction: Reaction
}

type Reaction {
  code: String
  name: String
  system: String
  severity: AllergyIntoleranceReactionSeverityEnum
}

type Observation {
  id: String!
  status: ObservationStatus!
  patientID: String!
  encounterID: String!
  name: String!
  value: String!
  timeRecorded: String!
  interpretation: [String!]
  note: String
}

type Medication {
  name: String!
  code: String!
}

type MedicationStatement {
  id: ID!

  status: MedicationStatementStatusEnum

  medication: Medication!

  patientID: String
}

type MedicalData {
  regimen: [MedicationStatement]
  allergies: [Allergy]
  weight: [Observation]
  bmi: [Observation]
  viralLoad: [Observation]
  cd4Count: [Observation]
}

type TimelineResource {
  id: ID!
  resourceType: ResourceType
  name: String
  value: String
  status: String
  date: Date
  timeRecorded: Time
}

type HealthTimeline {
  timeline: [TimelineResource]
  totalCount: Int!
}

type EpisodeOfCare {
  id: ID!
  status: EpisodeOfCareStatusEnum!
  patientID: String!
}

type Encounter {
  id: String
  class: EncounterClass
  episodeOfCareID: String
  status: EncounterStatusEnum
  patientID: String
}

type Patient {
  id: ID!
  active: Boolean!
  name: String!
  phoneNumber: [String!]!
  gender: Gender!
  birthDate: Date
}

type Condition {
  id: ID
  status: ConditionStatus
  name: String
  code: String!
  system: String!
  category: ConditionCategory!
  onsetDate: Date
  recordedDate: Date
  note: String

  patientID: String
  encounterID: String
}

type ConditionEdge {
  node: Condition
  cursor: String
}

type PageInfo {
  hasNextPage: Boolean
  startCursor: String

  hasPreviousPage: Boolean
  endCursor: String
}

type ConditionConnection {
  totalCount: Int
  edges: [ConditionEdge]
  pageInfo: PageInfo
}

type Terminology {
  code: String!
  system: TerminologySource!
  name: String!
}

type AllergyEdge {
  node: Allergy
  cursor: String
}

type AllergyConnection {
  totalCount: Int
  edges: [AllergyEdge]
  pageInfo: PageInfo
}

type EncounterEdge {
  node: Encounter
  cursor: String
}

type EncounterConnection {
  totalCount: Int
  edges: [EncounterEdge]
  pageInfo: PageInfo
}

type TerminologyEdge {
  node: Terminology
  cursor: String
}

type TerminologyConnection {
  totalCount: Int
  edges: [TerminologyEdge]
  pageInfo: PageInfo
}

type ObservationEdge {
  node: Observation
  cursor: String
}

type ObservationConnection {
  totalCount: Int
  edges: [ObservationEdge]
  pageInfo: PageInfo
}

type Media {
  id: String!
  name: String!
  url: String!
  contentType: String!
}

type MediaEdge {
  node: Media
  cursor: String
}

type MediaConnection {
  totalCount: Int
  edges: [MediaEdge]
  pageInfo: PageInfo
}

type Composition {
  id: String!
  text: String!
  type: CompositionType!
  category: CompositionCategory!
  status: CompositionStatusEnum!
  date: Date
  section: [Section]
  patientID: String
  encounterID: String
}

type Section {
  id: String
  title: String
  code: String
  author: String
  text: String
  section: [Section]
}

type CompositionEdge {
  node: Composition
  cursor: String
}

type CompositionConnection {
  totalCount: Int
  edges: [CompositionEdge]
  pageInfo: PageInfo
}

type ConsentOutput{
  status: ConsentStatusEnum!
}

type QuestionnaireEdge {
  node: Questionnaire
  cursor: String
}

type QuestionnaireConnection {
  totalCount: Int
  edges: [QuestionnaireEdge]
  pageInfo: PageInfo
}

type Questionnaire {
  id: String
  meta: Meta
  implicitRules: String
  language: String
  text: Narrative
  extension: [Extension]
  modifierExtension: [Extension]
  url: URI
  identifier: [Identifier]
  version: String
  name: String
  title: String
  derivedFrom: [String]
  status: Code
  experimental: Boolean
  date: DateTime
  publisher: String
  description: String
  useContext: UsageContext
  jurisdiction: [CodeableConcept]
  purpose: String
  effectivePeriod: Period
  code: [Coding]
  item: [QuestionnaireItem]
}

type Narrative {
  id: String
  status: String
  div: XHTML
}

type Meta {
  versionId: String
  source: String
  tag: [Coding]
  security: [Coding]
}

type Coding {
  id: String
  system: URI
  version: String
  code: Code
  display: String
  userSelected: Boolean
}

type UsageContext {
  id: String
  extension: [Extension]
  code: Coding
  valueCodeableConcept: CodeableConcept
  valueQuantity: Quantity
  valueRange: Range
  valueReference: Reference
}

type Extension {
  url: String
  valueBoolean: Boolean
  valueInteger: Int
  valueDecimal: Float
  valueBase64Binary: String
  valueInstant: String
  valueString: String
  valueURI: String
  valueDate: String
  valueDateTime: String
  valueTime: String
  valueCode: String
  valueOid: String
  valueUUID: String
  valueID: String
  valueUnsignedInt: Int
  valuePositiveInt: Int
  valueMarkdown: String
  valueAnnotation: Annotation
  valueAttachment: Attachment
  valueIdentifier: Identifier
  valueCodeableConcept: CodeableConcept
  valueCoding: Coding
  valueQuantity: Quantity
  valueRange: Range
  valuePeriod: Period
  valueRatio: Ratio
  valueReference: Reference
}

type Annotation {
  id: ID
  AuthorReference: Reference
  AuthorString: String
  Time: DateTime
  Text: Markdown
}

type Range {
  id: String
  low: Quantity
  high: Quantity
}

type Ratio {
  id: String
  numerator: Quantity
  denominator: Quantity
}

type QuestionnaireItem {
  id: String
  meta: Meta
  extension: [Extension]
  modifierExtension: [Extension]
  linkId: String
  definition: URI
  code: [Coding]
  prefix: String
  text: String
  type: Code
  enableWhen: [QuestionnaireItemEnableWhen]
  enableBehavior: Code
  disabledDisplay: Code
  required: Boolean
  repeats: Boolean
  readOnly: Boolean
  maxLength: Int
  answerValueSet: String
  answerOption: [QuestionnaireItemAnswerOption]
  initial: [QuestionnaireItemInitial]
  item: [QuestionnaireItem]
}

type QuestionnaireItemEnableWhen {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  question: String
  operator: Code
  answerBoolean: Boolean
  answerDecimal: Float
  answerInteger: Int
  answerDate: Date
  answerDateTime: DateTime
  answerTime: DateTime
  answerString: String
  answerCoding: Coding
  answerQuantity: Quantity
  answerReference: Reference
}

type QuestionnaireItemAnswerOption {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  valueInteger: Int
  valueDate: Date
  valueString: String
  valueCoding: Coding
  valueReference: Reference
  initialSelected: Boolean
}

type QuestionnaireItemInitial {
  id: String
  extension: [Extension]
  modifierExtension: [Extension]
  valueBoolean: Boolean
  valueDecimal: Float
  valueInteger: Int
  valueDate: Date
  valueDateTime: DateTime
  valueString: String
  valueUri: URI
  valueAttachment: Attachment
  valueCoding: Coding
  valueQuantity: Quantity
  valueReference: Reference
}

type Attachment {
  id: String
  contentType: Code
  language: Code
  data: Base64Binary
  url: URL
  size: Int
  hash: Base64Binary
  title: String
  creation: DateTime
}

type Reference {
  id: String
  reference: String
  type: URI
  identifier: Identifier
  display: String
}

type Identifier {
  id: String
  use: String
  type: CodeableConcept
  system: URI
  value: String
  period: Period
  assigner: Reference
}

type CodeableConcept {
  id: String
  coding: [Coding]
  text: String
}

type Period {
  id: String
  start: DateTime
  end: DateTime
}

type Quantity {
	value: Float
	comparator: QuantityComparatorEnum
	unit: String
	system: URI
	code: Code
}

type QuestionnaireResponseItem {
	linkId: String
	text: String
	answer: [QuestionnaireResponseItemAnswer]
	item: [QuestionnaireResponseItem]
}

type QuestionnaireResponseItemAnswer {
	valueBoolean: Boolean
	valueDecimal: Float
	valueInteger: Int
	valueDate: String
	valueDateTime: String
	valueTime: String
	valueString: String
	valueUri: String
	valueAttachment: Attachment
	valueCoding: Coding
	valueQuantity: Quantity
	valueReference: Reference
	item: [QuestionnaireResponseItem]
}

type QuestionnaireResponse {
	status: QuestionnaireResponseStatusEnum!
	authored: String!
	item: [QuestionnaireResponseItem]
}

