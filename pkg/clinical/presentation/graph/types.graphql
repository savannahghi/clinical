type Allergy {
    id: ID
    code: String!
    name: String
    system: String
    terminologySource: TerminologySource
    encounterID: String!
    reaction: Reaction
}

type Reaction {
    code: String
    name: String
    system: String
    severity: AllergyIntoleranceReactionSeverityEnum
}

type Observation {
    id: String!
    status: ObservationStatus!
    patientID: String!
    encounterID: String!
    name: String!
    value: String!
}

type Medication {
    name: String!
    code: String!
}

type MedicationStatement {
    id: ID!

    status: MedicationStatementStatusEnum

    medication: Medication!

    patientID: String
}

type MedicalData {
    regimen: [MedicationStatement]
    allergies: [Allergy ]
    weight: [Observation]
    bmi: [Observation]
    viralLoad: [Observation]
    cd4Count: [Observation]
}

type TimelineResource {
    id: ID!
    resourceType: ResourceType
    name: String
    value: String
    status: String
    date: Date
}

type HealthTimeline {
    timeline: [TimelineResource]
    totalCount: Int!
}

type EpisodeOfCare {
    id: ID!
    status: EpisodeOfCareStatusEnum!
    patientID: String!
}

type Encounter {
    id: String
    class: EncounterClass
    episodeOfCareID: String
    status: EncounterStatusEnum
    patientID: String
}

type Patient {
    id: ID!
    active: Boolean!
    name: String!
    phoneNumber: [String!]!
    gender: Gender!
    birthDate: Date
}

type Condition {
    id: ID
    status: ConditionStatus
    name: String
    code: String!
    system: String!

    onsetDate: Date
    recordedDate: Date
    note: String

    patientID: String
    encounterID: String
}


type ConditionEdge {
    node:  Condition
    cursor: String
}


type PageInfo {
    hasNextPage: Boolean
    startCursor: String

    hasPreviousPage: Boolean
    endCursor:       String
}


type ConditionConnection {
    totalCount: Int
    edges:      [ConditionEdge]
    pageInfo:   PageInfo
}

type Terminology {
  code: String!
  system: TerminologySource!
  name: String!
}

type AllergyEdge {
    node:  Allergy
    cursor: String
}

type AllergyConnection {
    totalCount: Int
    edges:      [AllergyEdge]
    pageInfo:   PageInfo
}

type EncounterEdge {
    node:  Encounter
    cursor: String
}

type EncounterConnection {
    totalCount: Int
    edges:      [EncounterEdge]
    pageInfo:   PageInfo
}

type TerminologyEdge {
    node:  Terminology
    cursor: String
}

type TerminologyConnection {
    totalCount: Int
    edges: [TerminologyEdge]
    pageInfo: PageInfo
}

type ObservationEdge {
    node: Observation
    cursor: String
}

type ObservationConnection {
    totalCount: Int
    edges:      [ObservationEdge]
    pageInfo:   PageInfo
}

type Media {
    id: String!
    name: String!
    url: String!
    contentType: String!
}

type MediaEdge {
    node: Media
    cursor: String
}

type MediaConnection {
    totalCount: Int
    edges: [MediaEdge]
    pageInfo: PageInfo
}