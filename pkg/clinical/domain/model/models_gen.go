// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/savannahghi/enumutils"
	"github.com/savannahghi/firebasetools"
	"github.com/savannahghi/scalarutils"
)

type BreakGlassEpisodeCreationInput struct {
	PatientID       string `json:"patientID"`
	ProviderCode    string `json:"providerCode"`
	PractitionerUID string `json:"practitionerUID"`
	ProviderPhone   string `json:"providerPhone"`
	Otp             string `json:"otp"`
	FullAccess      bool   `json:"fullAccess"`
	PatientPhone    string `json:"patientPhone"`
}

type Dummy struct {
	ID string `json:"id"`
}

func (Dummy) IsEntity() {}

type EmailInput struct {
	Email              string `json:"email"`
	CommunicationOptIn bool   `json:"communicationOptIn"`
}

type EpisodeOfCarePayload struct {
	EpisodeOfCare *FHIREpisodeOfCare `json:"episodeOfCare"`
	TotalVisits   int                `json:"totalVisits"`
}

// FHIRAddress definition: an address expressed using postal conventions (as opposed to gps or other location definition formats).  this data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  there are a variety of postal address formats defined around the world.
type FHIRAddress struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The purpose of this address.
	Use *AddressUseEnum `json:"Use"`
	// Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
	Type *AddressTypeEnum `json:"Type"`
	// Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
	Text string `json:"Text"`
	// This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
	Line []*string `json:"Line"`
	// The name of the city, town, suburb, village or other community or delivery center.
	City *string `json:"City"`
	// The name of the administrative area (county).
	District *string `json:"District"`
	// Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
	State *string `json:"State"`
	// A postal code designating a region defined by the postal service.
	PostalCode *scalarutils.Code `json:"PostalCode"`
	// Country - a nation as commonly understood or generally accepted.
	Country *string `json:"Country"`
	// Time period when address was/is in use.
	Period *FHIRPeriod `json:"Period"`
}

// FHIRAddressInput: input for Address
type FHIRAddressInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The purpose of this address.
	Use *AddressUseEnum `json:"Use"`
	// Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
	Type *AddressTypeEnum `json:"Type"`
	// Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
	Text string `json:"Text"`
	// This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
	Line []*string `json:"Line"`
	// The name of the city, town, suburb, village or other community or delivery center.
	City *string `json:"City"`
	// The name of the administrative area (county).
	District *string `json:"District"`
	// Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
	State *string `json:"State"`
	// A postal code designating a region defined by the postal service.
	PostalCode *scalarutils.Code `json:"PostalCode"`
	// Country - a nation as commonly understood or generally accepted.
	Country *string `json:"Country"`
	// Time period when address was/is in use.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIRAge definition: a duration of time during which an organism (or a process) has existed.
type FHIRAge struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value *scalarutils.Decimal `json:"Value"`
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *AgeComparatorEnum `json:"Comparator"`
	// A human-readable form of the unit.
	Unit *string `json:"Unit"`
	// The identification of the system that provides the coded form of the unit.
	System *scalarutils.URI `json:"System"`
	// A computer processable form of the unit in some unit representation system.
	Code *scalarutils.Code `json:"Code"`
}

// FHIRAgeInput: input for Age
type FHIRAgeInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value *scalarutils.Decimal `json:"Value"`
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *AgeComparatorEnum `json:"Comparator"`
	// A human-readable form of the unit.
	Unit *string `json:"Unit"`
	// The identification of the system that provides the coded form of the unit.
	System *scalarutils.URI `json:"System"`
	// A computer processable form of the unit in some unit representation system.
	Code *scalarutils.Code `json:"Code"`
}

// FHIRAllergyIntolerance definition: risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
type FHIRAllergyIntolerance struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// The clinical status of the allergy or intolerance.
	ClinicalStatus *FHIRCodeableConcept `json:"ClinicalStatus"`
	// Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
	VerificationStatus *FHIRCodeableConcept `json:"VerificationStatus"`
	// Identification of the underlying physiological mechanism for the reaction risk.
	Type *AllergyIntoleranceTypeEnum `json:"Type"`
	// Category of the identified substance.
	Category []*AllergyIntoleranceCategoryEnum `json:"Category"`
	// Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
	Criticality AllergyIntoleranceCriticalityEnum `json:"Criticality"`
	// Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Code *FHIRCodeableConcept `json:"Code"`
	// The patient who has the allergy or intolerance.
	Patient *FHIRReference `json:"Patient"`
	// The encounter when the allergy or intolerance was asserted.
	Encounter *FHIRReference `json:"Encounter"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetDateTime *scalarutils.Date `json:"OnsetDateTime"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetAge *FHIRAge `json:"OnsetAge"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetPeriod *FHIRPeriod `json:"OnsetPeriod"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetRange *FHIRRange `json:"OnsetRange"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetString *string `json:"OnsetString"`
	// The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
	RecordedDate *scalarutils.Date `json:"RecordedDate"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *FHIRReference `json:"Recorder"`
	// The source of the information about the allergy that is recorded.
	Asserter *FHIRReference `json:"Asserter"`
	// Represents the date and/or time of the last known occurrence of a reaction event.
	LastOccurrence *scalarutils.DateTime `json:"LastOccurrence"`
	// Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
	Note []*FHIRAnnotation `json:"Note"`
	// Details about each adverse reaction event linked to exposure to the identified substance.
	Reaction []*FHIRAllergyintoleranceReaction `json:"Reaction"`
}

// FHIRAllergyIntoleranceInput: input for AllergyIntolerance
type FHIRAllergyIntoleranceInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// The clinical status of the allergy or intolerance.
	ClinicalStatus *FHIRCodeableConceptInput `json:"ClinicalStatus"`
	// Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
	VerificationStatus *FHIRCodeableConceptInput `json:"VerificationStatus"`
	// Identification of the underlying physiological mechanism for the reaction risk.
	Type *AllergyIntoleranceTypeEnum `json:"Type"`
	// Category of the identified substance.
	Category []*AllergyIntoleranceCategoryEnum `json:"Category"`
	// Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
	Criticality AllergyIntoleranceCriticalityEnum `json:"Criticality"`
	// Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Code *FHIRCodeableConceptInput `json:"Code"`
	// The patient who has the allergy or intolerance.
	Patient *FHIRReferenceInput `json:"Patient"`
	// The encounter when the allergy or intolerance was asserted.
	Encounter *FHIRReferenceInput `json:"Encounter"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetDateTime *scalarutils.Date `json:"OnsetDateTime"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetAge *FHIRAgeInput `json:"OnsetAge"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetPeriod *FHIRPeriodInput `json:"OnsetPeriod"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetRange *FHIRRangeInput `json:"OnsetRange"`
	// Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
	OnsetString *string `json:"OnsetString"`
	// The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
	RecordedDate *scalarutils.Date `json:"RecordedDate"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *FHIRReferenceInput `json:"Recorder"`
	// The source of the information about the allergy that is recorded.
	Asserter *FHIRReferenceInput `json:"Asserter"`
	// Represents the date and/or time of the last known occurrence of a reaction event.
	LastOccurrence *scalarutils.DateTime `json:"LastOccurrence"`
	// Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
	Note []*FHIRAnnotationInput `json:"Note"`
	// Details about each adverse reaction event linked to exposure to the identified substance.
	Reaction []*FHIRAllergyintoleranceReactionInput `json:"Reaction"`
}

// FHIRAllergyIntoleranceRelayConnection is a Relay connection for AllergyIntolerance
type FHIRAllergyIntoleranceRelayConnection struct {
	Edges    []*FHIRAllergyIntoleranceRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo            `json:"pageInfo"`
}

// FHIRAllergyIntoleranceRelayEdge is a Relay edge for AllergyIntolerance
type FHIRAllergyIntoleranceRelayEdge struct {
	Cursor *string                 `json:"cursor"`
	Node   *FHIRAllergyIntolerance `json:"node"`
}

// FHIRAllergyIntoleranceRelayPayload is used to return single instances of AllergyIntolerance
type FHIRAllergyIntoleranceRelayPayload struct {
	Resource *FHIRAllergyIntolerance `json:"resource"`
}

// FHIRAllergyintoleranceReaction definition: risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
type FHIRAllergyintoleranceReaction struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Substance *FHIRCodeableConcept `json:"Substance"`
	// Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
	Manifestation []*FHIRCodeableConcept `json:"Manifestation"`
	// Text description about the reaction as a whole, including details of the manifestation if required.
	Description *string `json:"Description"`
	// Record of the date and/or time of the onset of the Reaction.
	Onset *scalarutils.DateTime `json:"Onset"`
	// Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
	Severity *AllergyIntoleranceReactionSeverityEnum `json:"Severity"`
	// Identification of the route by which the subject was exposed to the substance.
	ExposureRoute *FHIRCodeableConcept `json:"ExposureRoute"`
	// Additional text about the adverse reaction event not captured in other fields.
	Note []*FHIRAnnotation `json:"Note"`
}

// FHIRAllergyintoleranceReactionInput: input for AllergyintoleranceReaction
type FHIRAllergyintoleranceReactionInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
	Substance *FHIRCodeableConceptInput `json:"Substance"`
	// Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.
	Manifestation []*FHIRCodeableConceptInput `json:"Manifestation"`
	// Text description about the reaction as a whole, including details of the manifestation if required.
	Description *string `json:"Description"`
	// Record of the date and/or time of the onset of the Reaction.
	Onset *scalarutils.DateTime `json:"Onset"`
	// Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.
	Severity *AllergyIntoleranceReactionSeverityEnum `json:"Severity"`
	// Identification of the route by which the subject was exposed to the substance.
	ExposureRoute *FHIRCodeableConceptInput `json:"ExposureRoute"`
	// Additional text about the adverse reaction event not captured in other fields.
	Note []*FHIRAnnotationInput `json:"Note"`
}

// FHIRAnnotation definition: a  text note which also  contains information about who made the statement and when.
type FHIRAnnotation struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The individual responsible for making the annotation.
	AuthorReference *FHIRReference `json:"AuthorReference"`
	// The individual responsible for making the annotation.
	AuthorString *string `json:"AuthorString"`
	// Indicates when this particular annotation was made.
	Time *time.Time `json:"Time"`
	// The text of the annotation in markdown format.
	Text *scalarutils.Markdown `json:"Text"`
}

// FHIRAnnotationInput: input for Annotation
type FHIRAnnotationInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The individual responsible for making the annotation.
	AuthorReference *FHIRReferenceInput `json:"AuthorReference"`
	// The individual responsible for making the annotation.
	AuthorString *string `json:"AuthorString"`
	// Indicates when this particular annotation was made.
	Time *scalarutils.DateTime `json:"Time"`
	// The text of the annotation in markdown format.
	Text *scalarutils.Markdown `json:"Text"`
}

// FHIRAttachment definition: for referring to data content defined in other formats.
type FHIRAttachment struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
	ContentType *scalarutils.Code `json:"ContentType"`
	// The human language of the content. The value can be any valid value according to BCP 47.
	Language *scalarutils.Code `json:"Language"`
	// The actual data of the attachment - a sequence of bytes, base64 encoded.
	Data *scalarutils.Base64Binary `json:"Data"`
	// A location where the data can be accessed.
	URL *scalarutils.URL `json:"URL"`
	// The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
	Size *int `json:"Size"`
	// The calculated hash of the data using SHA-1. Represented using base64.
	Hash *scalarutils.Base64Binary `json:"Hash"`
	// A label or set of text to display in place of the data.
	Title *string `json:"Title"`
	// The date that the attachment was first created.
	Creation *scalarutils.DateTime `json:"Creation"`
}

// FHIRAttachmentInput: input for Attachment
type FHIRAttachmentInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
	ContentType *scalarutils.Code `json:"ContentType"`
	// The human language of the content. The value can be any valid value according to BCP 47.
	Language *scalarutils.Code `json:"Language"`
	// The actual data of the attachment - a sequence of bytes, base64 encoded.
	Data *scalarutils.Base64Binary `json:"Data"`
	// A location where the data can be accessed.
	URL *scalarutils.URL `json:"URL"`
	// The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
	Size *int `json:"Size"`
	// The calculated hash of the data using SHA-1. Represented using base64.
	Hash *scalarutils.Base64Binary `json:"Hash"`
	// A label or set of text to display in place of the data.
	Title *string `json:"Title"`
	// The date that the attachment was first created.
	Creation *scalarutils.DateTime `json:"Creation"`
}

// FHIRCodeableConcept definition: a concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
type FHIRCodeableConcept struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A reference to a code defined by a terminology system.
	Coding []*FHIRCoding `json:"Coding"`
	// A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
	Text string `json:"Text"`
}

// FHIRCodeableConceptInput: input for CodeableConcept
type FHIRCodeableConceptInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A reference to a code defined by a terminology system.
	Coding []*FHIRCodingInput `json:"Coding"`
	// A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
	Text string `json:"Text"`
}

// FHIRCoding definition: a reference to a code defined by a terminology system.
type FHIRCoding struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The identification of the code system that defines the meaning of the symbol in the code.
	System *scalarutils.URI `json:"System"`
	// The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
	Version *string `json:"Version"`
	// A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
	Code scalarutils.Code `json:"Code"`
	// A representation of the meaning of the code in the system, following the rules of the system.
	Display string `json:"Display"`
	// Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
	UserSelected *bool `json:"UserSelected"`
}

// FHIRCodingInput: input for Coding
type FHIRCodingInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The identification of the code system that defines the meaning of the symbol in the code.
	System *scalarutils.URI `json:"System"`
	// The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
	Version *string `json:"Version"`
	// A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
	Code scalarutils.Code `json:"Code"`
	// A representation of the meaning of the code in the system, following the rules of the system.
	Display string `json:"Display"`
	// Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
	UserSelected *bool `json:"UserSelected"`
}

// FHIRComposition definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
type FHIRComposition struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
	Identifier *FHIRIdentifier `json:"Identifier"`
	// The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
	Status *CompositionStatusEnum `json:"Status"`
	// Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
	Type *FHIRCodeableConcept `json:"Type"`
	// A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
	Category []*FHIRCodeableConcept `json:"Category"`
	// Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
	Subject *FHIRReference `json:"Subject"`
	// Describes the clinical encounter or type of care this documentation is associated with.
	Encounter *FHIRReference `json:"Encounter"`
	// The composition editing time, when the composition was last logically changed by the author.
	Date *scalarutils.Date `json:"Date"`
	// Identifies who is responsible for the information in the composition, not necessarily who typed it in.
	Author []*FHIRReference `json:"Author"`
	// Official human-readable label for the composition.
	Title *string `json:"Title"`
	// The code specifying the level of confidentiality of the Composition.
	Confidentiality *scalarutils.Code `json:"Confidentiality"`
	// A participant who has attested to the accuracy of the composition/document.
	Attester []*FHIRCompositionAttester `json:"Attester"`
	// Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
	Custodian *FHIRReference `json:"Custodian"`
	// Relationships that this composition has with other compositions or documents that already exist.
	RelatesTo []*FHIRCompositionRelatesto `json:"RelatesTo"`
	// The clinical service, such as a colonoscopy or an appendectomy, being documented.
	Event []*FHIRCompositionEvent `json:"Event"`
	// The root of the sections that make up the composition.
	Section []*FHIRCompositionSection `json:"Section"`
}

// FHIRCompositionAttester definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
type FHIRCompositionAttester struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The type of attestation the authenticator offers.
	Mode *CompositionAttesterModeEnum `json:"Mode"`
	// When the composition was attested by the party.
	Time *time.Time `json:"Time"`
	// Who attested the composition in the specified way.
	Party *FHIRReference `json:"Party"`
}

// FHIRCompositionAttesterInput: input for CompositionAttester
type FHIRCompositionAttesterInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The type of attestation the authenticator offers.
	Mode *CompositionAttesterModeEnum `json:"Mode"`
	// When the composition was attested by the party.
	Time *scalarutils.DateTime `json:"Time"`
	// Who attested the composition in the specified way.
	Party *FHIRReferenceInput `json:"Party"`
}

// FHIRCompositionEvent definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
type FHIRCompositionEvent struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
	Code *scalarutils.Code `json:"Code"`
	// The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
	Period *FHIRPeriod `json:"Period"`
	// The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
	Detail []*FHIRReference `json:"Detail"`
}

// FHIRCompositionEventInput: input for CompositionEvent
type FHIRCompositionEventInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
	Code *scalarutils.Code `json:"Code"`
	// The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.
	Period *FHIRPeriodInput `json:"Period"`
	// The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.
	Detail []*FHIRReferenceInput `json:"Detail"`
}

// FHIRCompositionInput: input for Composition
type FHIRCompositionInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.
	Identifier *FHIRIdentifierInput `json:"Identifier"`
	// The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.
	Status *CompositionStatusEnum `json:"Status"`
	// Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.
	Type *FHIRCodeableConceptInput `json:"Type"`
	// A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.
	Category []*FHIRCodeableConceptInput `json:"Category"`
	// Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).
	Subject *FHIRReferenceInput `json:"Subject"`
	// Describes the clinical encounter or type of care this documentation is associated with.
	Encounter *FHIRReferenceInput `json:"Encounter"`
	// The composition editing time, when the composition was last logically changed by the author.
	Date *scalarutils.Date `json:"Date"`
	// Identifies who is responsible for the information in the composition, not necessarily who typed it in.
	Author []*FHIRReferenceInput `json:"Author"`
	// Official human-readable label for the composition.
	Title *string `json:"Title"`
	// The code specifying the level of confidentiality of the Composition.
	Confidentiality *scalarutils.Code `json:"Confidentiality"`
	// A participant who has attested to the accuracy of the composition/document.
	Attester []*FHIRCompositionAttesterInput `json:"Attester"`
	// Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.
	Custodian *FHIRReferenceInput `json:"Custodian"`
	// Relationships that this composition has with other compositions or documents that already exist.
	RelatesTo []*FHIRCompositionRelatestoInput `json:"RelatesTo"`
	// The clinical service, such as a colonoscopy or an appendectomy, being documented.
	Event []*FHIRCompositionEventInput `json:"Event"`
	// The root of the sections that make up the composition.
	Section []*FHIRCompositionSectionInput `json:"Section"`
}

// FHIRCompositionRelatesto definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
type FHIRCompositionRelatesto struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The type of relationship that this composition has with anther composition or document.
	Code *scalarutils.Code `json:"Code"`
	// The target composition/document of this relationship.
	TargetIdentifier *FHIRIdentifier `json:"TargetIdentifier"`
	// The target composition/document of this relationship.
	TargetReference *FHIRReference `json:"TargetReference"`
}

// FHIRCompositionRelatestoInput: input for CompositionRelatesto
type FHIRCompositionRelatestoInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The type of relationship that this composition has with anther composition or document.
	Code *scalarutils.Code `json:"Code"`
	// The target composition/document of this relationship.
	TargetIdentifier *FHIRIdentifierInput `json:"TargetIdentifier"`
	// The target composition/document of this relationship.
	TargetReference *FHIRReferenceInput `json:"TargetReference"`
}

// FHIRCompositionRelayConnection is a Relay connection for Composition
type FHIRCompositionRelayConnection struct {
	Edges    []*FHIRCompositionRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo     `json:"pageInfo"`
}

// FHIRCompositionRelayEdge is a Relay edge for Composition
type FHIRCompositionRelayEdge struct {
	Cursor *string          `json:"cursor"`
	Node   *FHIRComposition `json:"node"`
}

// FHIRCompositionRelayPayload is used to return single instances of Composition
type FHIRCompositionRelayPayload struct {
	Resource *FHIRComposition `json:"resource"`
}

// FHIRCompositionSection definition: a set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. a composition defines the structure and narrative content necessary for a document. however, a composition alone does not constitute a document. rather, the composition must be the first entry in a bundle where bundle.type=document, and any other resources referenced from composition must be included as subsequent entries in the bundle (for example patient, practitioner, encounter, etc.).
type FHIRCompositionSection struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
	Title *string `json:"Title"`
	// A code identifying the kind of content contained within the section. This must be consistent with the section title.
	Code *scalarutils.Code `json:"Code"`
	// Identifies who is responsible for the information in this section, not necessarily who typed it in.
	Author []*FHIRReference `json:"Author"`
	// The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
	Focus *FHIRReference `json:"Focus"`
	// A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
	Text *FHIRNarrative `json:"Text"`
	// How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
	Mode *scalarutils.Code `json:"Mode"`
	// Specifies the order applied to the items in the section entries.
	OrderedBy *FHIRCodeableConcept `json:"OrderedBy"`
	// A reference to the actual resource from which the narrative in the section is derived.
	Entry []*FHIRReference `json:"Entry"`
	// If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
	EmptyReason *FHIRCodeableConcept `json:"EmptyReason"`
	// A nested sub-section within this section.
	Section []*FHIRCompositionSection `json:"Section"`
}

// FHIRCompositionSectionInput: input for CompositionSection
type FHIRCompositionSectionInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.
	Title *string `json:"Title"`
	// A code identifying the kind of content contained within the section. This must be consistent with the section title.
	Code *scalarutils.Code `json:"Code"`
	// Identifies who is responsible for the information in this section, not necessarily who typed it in.
	Author []*FHIRReferenceInput `json:"Author"`
	// The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).
	Focus *FHIRReferenceInput `json:"Focus"`
	// A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative.
	Text *FHIRNarrativeInput `json:"Text"`
	// How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.
	Mode *scalarutils.Code `json:"Mode"`
	// Specifies the order applied to the items in the section entries.
	OrderedBy *FHIRCodeableConceptInput `json:"OrderedBy"`
	// A reference to the actual resource from which the narrative in the section is derived.
	Entry []*FHIRReferenceInput `json:"Entry"`
	// If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.
	EmptyReason *FHIRCodeableConceptInput `json:"EmptyReason"`
	// A nested sub-section within this section.
	Section []*FHIRCompositionSectionInput `json:"Section"`
}

// FHIRCondition definition: a clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
type FHIRCondition struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// The clinical status of the condition.
	ClinicalStatus *FHIRCodeableConcept `json:"ClinicalStatus"`
	// The verification status to support the clinical status of the condition.
	VerificationStatus *FHIRCodeableConcept `json:"VerificationStatus"`
	// A category assigned to the condition.
	Category []*FHIRCodeableConcept `json:"Category"`
	// A subjective assessment of the severity of the condition as evaluated by the clinician.
	Severity *FHIRCodeableConcept `json:"Severity"`
	// Identification of the condition, problem or diagnosis.
	Code *FHIRCodeableConcept `json:"Code"`
	// The anatomical location where this condition manifests itself.
	BodySite []*FHIRCodeableConcept `json:"BodySite"`
	// Indicates the patient or group who the condition record is associated with.
	Subject *FHIRReference `json:"Subject"`
	// The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
	Encounter *FHIRReference `json:"Encounter"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetDateTime *scalarutils.Date `json:"OnsetDateTime"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetAge *FHIRAge `json:"OnsetAge"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetPeriod *FHIRPeriod `json:"OnsetPeriod"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetRange *FHIRRange `json:"OnsetRange"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetString *string `json:"OnsetString"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementDateTime *scalarutils.Date `json:"AbatementDateTime"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementAge *FHIRAge `json:"AbatementAge"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementPeriod *FHIRPeriod `json:"AbatementPeriod"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementRange *FHIRRange `json:"AbatementRange"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementString *string `json:"AbatementString"`
	// The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
	RecordedDate *scalarutils.Date `json:"RecordedDate"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *FHIRReference `json:"Recorder"`
	// Individual who is making the condition statement.
	Asserter *FHIRReference `json:"Asserter"`
	// Clinical stage or grade of a condition. May include formal severity assessments.
	Stage []*FHIRConditionStage `json:"Stage"`
	// Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
	Evidence []*FHIRConditionEvidence `json:"Evidence"`
	// Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
	Note []*FHIRAnnotation `json:"Note"`
}

// FHIRConditionEvidence definition: a clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
type FHIRConditionEvidence struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A manifestation or symptom that led to the recording of this condition.
	Code *FHIRCodeableConcept `json:"Code"`
	// Links to other relevant information, including pathology reports.
	Detail []*FHIRReference `json:"Detail"`
}

// FHIRConditionEvidenceInput: input for ConditionEvidence
type FHIRConditionEvidenceInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A manifestation or symptom that led to the recording of this condition.
	Code *FHIRCodeableConceptInput `json:"Code"`
	// Links to other relevant information, including pathology reports.
	Detail []*FHIRReferenceInput `json:"Detail"`
}

// FHIRConditionInput: input for Condition
type FHIRConditionInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// The clinical status of the condition.
	ClinicalStatus *FHIRCodeableConceptInput `json:"ClinicalStatus"`
	// The verification status to support the clinical status of the condition.
	VerificationStatus *FHIRCodeableConceptInput `json:"VerificationStatus"`
	// A category assigned to the condition.
	Category []*FHIRCodeableConceptInput `json:"Category"`
	// A subjective assessment of the severity of the condition as evaluated by the clinician.
	Severity *FHIRCodeableConceptInput `json:"Severity"`
	// Identification of the condition, problem or diagnosis.
	Code *FHIRCodeableConceptInput `json:"Code"`
	// The anatomical location where this condition manifests itself.
	BodySite []*FHIRCodeableConceptInput `json:"BodySite"`
	// Indicates the patient or group who the condition record is associated with.
	Subject *FHIRReferenceInput `json:"Subject"`
	// The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
	Encounter *FHIRReferenceInput `json:"Encounter"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetDateTime *scalarutils.Date `json:"OnsetDateTime"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetAge *FHIRAgeInput `json:"OnsetAge"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetPeriod *FHIRPeriodInput `json:"OnsetPeriod"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetRange *FHIRRangeInput `json:"OnsetRange"`
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetString *string `json:"OnsetString"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementDateTime *scalarutils.Date `json:"AbatementDateTime"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementAge *FHIRAgeInput `json:"AbatementAge"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementPeriod *FHIRPeriodInput `json:"AbatementPeriod"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementRange *FHIRRangeInput `json:"AbatementRange"`
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementString *string `json:"AbatementString"`
	// The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
	RecordedDate *scalarutils.Date `json:"RecordedDate"`
	// Individual who recorded the record and takes responsibility for its content.
	Recorder *FHIRReferenceInput `json:"Recorder"`
	// Individual who is making the condition statement.
	Asserter *FHIRReferenceInput `json:"Asserter"`
	// Clinical stage or grade of a condition. May include formal severity assessments.
	Stage []*FHIRConditionStageInput `json:"Stage"`
	// Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
	Evidence []*FHIRConditionEvidenceInput `json:"Evidence"`
	// Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
	Note []*FHIRAnnotationInput `json:"Note"`
}

// FHIRConditionRelayConnection is a Relay connection for Condition
type FHIRConditionRelayConnection struct {
	Edges    []*FHIRConditionRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo   `json:"pageInfo"`
}

// FHIRConditionRelayEdge is a Relay edge for Condition
type FHIRConditionRelayEdge struct {
	Cursor *string        `json:"cursor"`
	Node   *FHIRCondition `json:"node"`
}

// FHIRConditionRelayPayload is used to return single instances of Condition
type FHIRConditionRelayPayload struct {
	Resource *FHIRCondition `json:"resource"`
}

// FHIRConditionStage definition: a clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
type FHIRConditionStage struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
	Summary *FHIRCodeableConcept `json:"Summary"`
	// Reference to a formal record of the evidence on which the staging assessment is based.
	Assessment []*FHIRReference `json:"Assessment"`
	// The kind of staging, such as pathological or clinical staging.
	Type *FHIRCodeableConcept `json:"Type"`
}

// FHIRConditionStageInput: input for ConditionStage
type FHIRConditionStageInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
	Summary *FHIRCodeableConceptInput `json:"Summary"`
	// Reference to a formal record of the evidence on which the staging assessment is based.
	Assessment []*FHIRReferenceInput `json:"Assessment"`
	// The kind of staging, such as pathological or clinical staging.
	Type *FHIRCodeableConceptInput `json:"Type"`
}

// FHIRContactPoint definition: details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
type FHIRContactPoint struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Telecommunications form for contact point - what communications system is required to make use of the contact.
	System *ContactPointSystemEnum `json:"System"`
	// The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
	Value *string `json:"Value"`
	// Identifies the purpose for the contact point.
	Use *ContactPointUseEnum `json:"Use"`
	// Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
	Rank *int `json:"Rank"`
	// Time period when the contact point was/is in use.
	Period *FHIRPeriod `json:"Period"`
}

// FHIRContactPointInput: input for ContactPoint
type FHIRContactPointInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Telecommunications form for contact point - what communications system is required to make use of the contact.
	System *ContactPointSystemEnum `json:"System"`
	// The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
	Value *string `json:"Value"`
	// Identifies the purpose for the contact point.
	Use *ContactPointUseEnum `json:"Use"`
	// Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
	Rank *int `json:"Rank"`
	// Time period when the contact point was/is in use.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIRDosage definition: indicates how the medication is/was taken or should be taken by the patient.
type FHIRDosage struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Indicates the order in which the dosage instructions should be applied or interpreted.
	Sequence *string `json:"Sequence"`
	// Free text dosage instructions e.g. SIG.
	Text *string `json:"Text"`
	// Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
	AdditionalInstruction []*FHIRCodeableConcept `json:"AdditionalInstruction"`
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction *string `json:"PatientInstruction"`
	// When medication should be administered.
	Timing *FHIRTiming `json:"Timing"`
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededBoolean *bool `json:"AsNeededBoolean"`
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededCodeableConcept *scalarutils.Code `json:"AsNeededCodeableConcept"`
	// Body site to administer to.
	Site *FHIRCodeableConcept `json:"Site"`
	// How drug should enter body.
	Route *FHIRCodeableConcept `json:"Route"`
	// Technique for administering medication.
	Method *FHIRCodeableConcept `json:"Method"`
	// The amount of medication administered.
	DoseAndRate []*FHIRDosageDoseandrate `json:"DoseAndRate"`
	// Upper limit on medication per unit of time.
	MaxDosePerPeriod *FHIRRatio `json:"MaxDosePerPeriod"`
	// Upper limit on medication per administration.
	MaxDosePerAdministration *FHIRQuantity `json:"MaxDosePerAdministration"`
	// Upper limit on medication per lifetime of the patient.
	MaxDosePerLifetime *FHIRQuantity `json:"MaxDosePerLifetime"`
}

// FHIRDosageDoseandrate definition: indicates how the medication is/was taken or should be taken by the patient.
type FHIRDosageDoseandrate struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The kind of dose or rate specified, for example, ordered or calculated.
	Type *FHIRCodeableConcept `json:"Type"`
	// Amount of medication per dose.
	DoseRange *FHIRRange `json:"DoseRange"`
	// Amount of medication per dose.
	DoseQuantity *FHIRQuantity `json:"DoseQuantity"`
	// Amount of medication per unit of time.
	RateRatio *FHIRRatio `json:"RateRatio"`
	// Amount of medication per unit of time.
	RateRange *FHIRRange `json:"RateRange"`
	// Amount of medication per unit of time.
	RateQuantity *FHIRQuantity `json:"RateQuantity"`
}

// FHIRDosageDoseandrateInput: input for DosageDoseandrate
type FHIRDosageDoseandrateInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The kind of dose or rate specified, for example, ordered or calculated.
	Type *FHIRCodeableConceptInput `json:"Type"`
	// Amount of medication per dose.
	DoseRange *FHIRRangeInput `json:"DoseRange"`
	// Amount of medication per dose.
	DoseQuantity *FHIRQuantityInput `json:"DoseQuantity"`
	// Amount of medication per unit of time.
	RateRatio *FHIRRatioInput `json:"RateRatio"`
	// Amount of medication per unit of time.
	RateRange *FHIRRangeInput `json:"RateRange"`
	// Amount of medication per unit of time.
	RateQuantity *FHIRQuantityInput `json:"RateQuantity"`
}

// FHIRDosageInput: input for Dosage
type FHIRDosageInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Indicates the order in which the dosage instructions should be applied or interpreted.
	Sequence *string `json:"Sequence"`
	// Free text dosage instructions e.g. SIG.
	Text *string `json:"Text"`
	// Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
	AdditionalInstruction []*FHIRCodeableConceptInput `json:"AdditionalInstruction"`
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction *string `json:"PatientInstruction"`
	// When medication should be administered.
	Timing *FHIRTimingInput `json:"Timing"`
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededBoolean *bool `json:"AsNeededBoolean"`
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededCodeableConcept *scalarutils.Code `json:"AsNeededCodeableConcept"`
	// Body site to administer to.
	Site *FHIRCodeableConceptInput `json:"Site"`
	// How drug should enter body.
	Route *FHIRCodeableConceptInput `json:"Route"`
	// Technique for administering medication.
	Method *FHIRCodeableConceptInput `json:"Method"`
	// The amount of medication administered.
	DoseAndRate []*FHIRDosageDoseandrateInput `json:"DoseAndRate"`
	// Upper limit on medication per unit of time.
	MaxDosePerPeriod *FHIRRatioInput `json:"MaxDosePerPeriod"`
	// Upper limit on medication per administration.
	MaxDosePerAdministration *FHIRQuantityInput `json:"MaxDosePerAdministration"`
	// Upper limit on medication per lifetime of the patient.
	MaxDosePerLifetime *FHIRQuantityInput `json:"MaxDosePerLifetime"`
}

// FHIRDuration definition: a length of time.
type FHIRDuration struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value *scalarutils.Decimal `json:"Value"`
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *DurationComparatorEnum `json:"Comparator"`
	// A human-readable form of the unit.
	Unit *string `json:"Unit"`
	// The identification of the system that provides the coded form of the unit.
	System *scalarutils.URI `json:"System"`
	// A computer processable form of the unit in some unit representation system.
	Code *scalarutils.Code `json:"Code"`
}

// FHIRDurationInput: input for Duration
type FHIRDurationInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value *scalarutils.Decimal `json:"Value"`
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *DurationComparatorEnum `json:"Comparator"`
	// A human-readable form of the unit.
	Unit *string `json:"Unit"`
	// The identification of the system that provides the coded form of the unit.
	System *scalarutils.URI `json:"System"`
	// A computer processable form of the unit in some unit representation system.
	Code *scalarutils.Code `json:"Code"`
}

// FHIREncounter definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounter struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// Identifier(s) by which this encounter is known.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	Status EncounterStatusEnum `json:"Status"`
	// The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
	StatusHistory []*FHIREncounterStatushistory `json:"StatusHistory"`
	// Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
	Class *FHIRCoding `json:"Class"`
	// The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
	ClassHistory []*FHIREncounterClasshistory `json:"ClassHistory"`
	// Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
	Type []*FHIRCodeableConcept `json:"Type"`
	// Broad categorization of the service that is to be provided (e.g. cardiology).
	ServiceType *FHIRCodeableConcept `json:"ServiceType"`
	// Indicates the urgency of the encounter.
	Priority *FHIRCodeableConcept `json:"Priority"`
	// The patient or group present at the encounter.
	Subject *FHIRReference `json:"Subject"`
	// Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
	EpisodeOfCare []*FHIRReference `json:"EpisodeOfCare"`
	// The request this encounter satisfies (e.g. incoming referral or procedure request).
	BasedOn []*FHIRReference `json:"BasedOn"`
	// The list of people responsible for providing the service.
	Participant []*FHIREncounterParticipant `json:"Participant"`
	// The appointment that scheduled this encounter.
	Appointment []*FHIRReference `json:"Appointment"`
	// The start and end time of the encounter.
	Period *FHIRPeriod `json:"Period"`
	// Quantity of time the encounter lasted. This excludes the time during leaves of absence.
	Length *FHIRDuration `json:"Length"`
	// Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
	ReasonCode *scalarutils.Code `json:"ReasonCode"`
	// Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
	ReasonReference []*FHIRReference `json:"ReasonReference"`
	// The list of diagnosis relevant to this encounter.
	Diagnosis []*FHIREncounterDiagnosis `json:"Diagnosis"`
	// The set of accounts that may be used for billing for this Encounter.
	Account []*FHIRReference `json:"Account"`
	// Details about the admission to a healthcare service.
	Hospitalization *FHIREncounterHospitalization `json:"Hospitalization"`
	// List of locations where  the patient has been during this encounter.
	Location []*FHIREncounterLocation `json:"Location"`
	// The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed separately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
	ServiceProvider *FHIRReference `json:"ServiceProvider"`
	// Another Encounter of which this encounter is a part of (administratively or in time).
	PartOf *FHIRReference `json:"PartOf"`
}

// FHIREncounterClasshistory definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounterClasshistory struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// inpatient | outpatient | ambulatory | emergency +.
	Class *FHIRCoding `json:"Class"`
	// The time that the episode was in the specified class.
	Period *FHIRPeriod `json:"Period"`
}

// FHIREncounterClasshistoryInput: input for EncounterClasshistory
type FHIREncounterClasshistoryInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// inpatient | outpatient | ambulatory | emergency +.
	Class *FHIRCodingInput `json:"Class"`
	// The time that the episode was in the specified class.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIREncounterDiagnosis definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounterDiagnosis struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
	Condition *FHIRReference `json:"Condition"`
	// Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
	Use *FHIRCodeableConcept `json:"Use"`
	// Ranking of the diagnosis (for each role type).
	Rank *string `json:"Rank"`
}

// FHIREncounterDiagnosisInput: input for EncounterDiagnosis
type FHIREncounterDiagnosisInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.
	Condition *FHIRReferenceInput `json:"Condition"`
	// Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).
	Use *FHIRCodeableConceptInput `json:"Use"`
	// Ranking of the diagnosis (for each role type).
	Rank *string `json:"Rank"`
}

// FHIREncounterHospitalization definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounterHospitalization struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Pre-admission identifier.
	PreAdmissionIdentifier *FHIRIdentifier `json:"PreAdmissionIdentifier"`
	// The location/organization from which the patient came before admission.
	Origin *FHIRReference `json:"Origin"`
	// From where patient was admitted (physician referral, transfer).
	AdmitSource *FHIRCodeableConcept `json:"AdmitSource"`
	// Whether this hospitalization is a readmission and why if known.
	ReAdmission *FHIRCodeableConcept `json:"ReAdmission"`
	// Diet preferences reported by the patient.
	DietPreference []*FHIRCodeableConcept `json:"DietPreference"`
	// Special courtesies (VIP, board member).
	SpecialCourtesy []*FHIRCodeableConcept `json:"SpecialCourtesy"`
	// Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
	SpecialArrangement []*FHIRCodeableConcept `json:"SpecialArrangement"`
	// Location/organization to which the patient is discharged.
	Destination *FHIRReference `json:"Destination"`
	// Category or kind of location after discharge.
	DischargeDisposition *FHIRCodeableConcept `json:"DischargeDisposition"`
}

// FHIREncounterHospitalizationInput: input for EncounterHospitalization
type FHIREncounterHospitalizationInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Pre-admission identifier.
	PreAdmissionIdentifier *FHIRIdentifierInput `json:"PreAdmissionIdentifier"`
	// The location/organization from which the patient came before admission.
	Origin *FHIRReferenceInput `json:"Origin"`
	// From where patient was admitted (physician referral, transfer).
	AdmitSource *FHIRCodeableConceptInput `json:"AdmitSource"`
	// Whether this hospitalization is a readmission and why if known.
	ReAdmission *FHIRCodeableConceptInput `json:"ReAdmission"`
	// Diet preferences reported by the patient.
	DietPreference []*FHIRCodeableConceptInput `json:"DietPreference"`
	// Special courtesies (VIP, board member).
	SpecialCourtesy []*FHIRCodeableConceptInput `json:"SpecialCourtesy"`
	// Any special requests that have been made for this hospitalization encounter, such as the provision of specific equipment or other things.
	SpecialArrangement []*FHIRCodeableConceptInput `json:"SpecialArrangement"`
	// Location/organization to which the patient is discharged.
	Destination *FHIRReferenceInput `json:"Destination"`
	// Category or kind of location after discharge.
	DischargeDisposition *FHIRCodeableConceptInput `json:"DischargeDisposition"`
}

// FHIREncounterInput: input for Encounter
type FHIREncounterInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// Identifier(s) by which this encounter is known.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	Status EncounterStatusEnum `json:"Status"`
	// The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.
	StatusHistory []*FHIREncounterStatushistoryInput `json:"StatusHistory"`
	// Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.
	Class *FHIRCodingInput `json:"Class"`
	// The class history permits the tracking of the encounters transitions without needing to go  through the resource history.  This would be used for a case where an admission starts of as an emergency encounter, then transitions into an inpatient scenario. Doing this and not restarting a new encounter ensures that any lab/diagnostic results can more easily follow the patient and not require re-processing and not get lost or cancelled during a kind of discharge from emergency to inpatient.
	ClassHistory []*FHIREncounterClasshistoryInput `json:"ClassHistory"`
	// Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).
	Type []*FHIRCodeableConceptInput `json:"Type"`
	// Broad categorization of the service that is to be provided (e.g. cardiology).
	ServiceType *FHIRCodeableConceptInput `json:"ServiceType"`
	// Indicates the urgency of the encounter.
	Priority *FHIRCodeableConceptInput `json:"Priority"`
	// The patient or group present at the encounter.
	Subject *FHIRReferenceInput `json:"Subject"`
	// Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).
	EpisodeOfCare []*FHIRReferenceInput `json:"EpisodeOfCare"`
	// The request this encounter satisfies (e.g. incoming referral or procedure request).
	BasedOn []*FHIRReferenceInput `json:"BasedOn"`
	// The list of people responsible for providing the service.
	Participant []*FHIREncounterParticipantInput `json:"Participant"`
	// The appointment that scheduled this encounter.
	Appointment []*FHIRReferenceInput `json:"Appointment"`
	// The start and end time of the encounter.
	Period *FHIRPeriodInput `json:"Period"`
	// Quantity of time the encounter lasted. This excludes the time during leaves of absence.
	Length *FHIRDurationInput `json:"Length"`
	// Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
	ReasonCode *scalarutils.Code `json:"ReasonCode"`
	// Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.
	ReasonReference []*FHIRReferenceInput `json:"ReasonReference"`
	// The list of diagnosis relevant to this encounter.
	Diagnosis []*FHIREncounterDiagnosisInput `json:"Diagnosis"`
	// The set of accounts that may be used for billing for this Encounter.
	Account []*FHIRReferenceInput `json:"Account"`
	// Details about the admission to a healthcare service.
	Hospitalization *FHIREncounterHospitalizationInput `json:"Hospitalization"`
	// List of locations where  the patient has been during this encounter.
	Location []*FHIREncounterLocationInput `json:"Location"`
	// The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed separately) for an external consultation.  Refer to the example bundle showing an abbreviated set of Encounters for a colonoscopy.
	ServiceProvider *FHIRReferenceInput `json:"ServiceProvider"`
	// Another Encounter of which this encounter is a part of (administratively or in time).
	PartOf *FHIRReferenceInput `json:"PartOf"`
}

// FHIREncounterLocation definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounterLocation struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The location where the encounter takes place.
	Location *FHIRReference `json:"Location"`
	// The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
	Status *EncounterLocationStatusEnum `json:"Status"`
	// This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
	PhysicalType *FHIRCodeableConcept `json:"PhysicalType"`
	// Time period during which the patient was present at the location.
	Period *FHIRPeriod `json:"Period"`
}

// FHIREncounterLocationInput: input for EncounterLocation
type FHIREncounterLocationInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The location where the encounter takes place.
	Location *FHIRReferenceInput `json:"Location"`
	// The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.
	Status *EncounterLocationStatusEnum `json:"Status"`
	// This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.
	PhysicalType *FHIRCodeableConceptInput `json:"PhysicalType"`
	// Time period during which the patient was present at the location.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIREncounterParticipant definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounterParticipant struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Role of participant in encounter.
	Type []*FHIRCodeableConcept `json:"Type"`
	// The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
	Period *FHIRPeriod `json:"Period"`
	// Persons involved in the encounter other than the patient.
	Individual *FHIRReference `json:"Individual"`
}

// FHIREncounterParticipantInput: input for EncounterParticipant
type FHIREncounterParticipantInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Role of participant in encounter.
	Type []*FHIRCodeableConceptInput `json:"Type"`
	// The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.
	Period *FHIRPeriodInput `json:"Period"`
	// Persons involved in the encounter other than the patient.
	Individual *FHIRReferenceInput `json:"Individual"`
}

// FHIREncounterRelayConnection is a Relay connection for Encounter
type FHIREncounterRelayConnection struct {
	Edges    []*FHIREncounterRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo   `json:"pageInfo"`
}

// FHIREncounterRelayEdge is a Relay edge for Encounter
type FHIREncounterRelayEdge struct {
	Cursor *string        `json:"cursor"`
	Node   *FHIREncounter `json:"node"`
}

// FHIREncounterRelayPayload is used to return single instances of Encounter
type FHIREncounterRelayPayload struct {
	Resource *FHIREncounter `json:"resource"`
}

// FHIREncounterStatushistory definition: an interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.
type FHIREncounterStatushistory struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	Status *EncounterStatusHistoryStatusEnum `json:"Status"`
	// The time that the episode was in the specified status.
	Period *FHIRPeriod `json:"Period"`
}

// FHIREncounterStatushistoryInput: input for EncounterStatushistory
type FHIREncounterStatushistoryInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// planned | arrived | triaged | in-progress | onleave | finished | cancelled +.
	Status *EncounterStatusHistoryStatusEnum `json:"Status"`
	// The time that the episode was in the specified status.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIREpisodeOfCare definition: an association between a patient and an organization / healthcare provider(s) during which time encounters may occur. the managing organization assumes a level of responsibility for the patient during this time.
type FHIREpisodeOfCare struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// planned | waitlist | active | onhold | finished | cancelled.
	Status *EpisodeOfCareStatusEnum `json:"Status"`
	// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
	StatusHistory []*FHIREpisodeofcareStatushistory `json:"StatusHistory"`
	// A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
	Type []*FHIRCodeableConcept `json:"Type"`
	// The list of diagnosis relevant to this episode of care.
	Diagnosis []*FHIREpisodeofcareDiagnosis `json:"Diagnosis"`
	// The patient who is the focus of this episode of care.
	Patient *FHIRReference `json:"Patient"`
	// The organization that has assumed the specific responsibilities for the specified duration.
	ManagingOrganization *FHIRReference `json:"ManagingOrganization"`
	// The interval during which the managing organization assumes the defined responsibility.
	Period *FHIRPeriod `json:"Period"`
	// Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
	ReferralRequest []*FHIRReference `json:"ReferralRequest"`
	// The practitioner that is the care manager/care coordinator for this patient.
	CareManager *FHIRReference `json:"CareManager"`
	// The list of practitioners that may be facilitating this episode of care for specific purposes.
	Team []*FHIRReference `json:"Team"`
	// The set of accounts that may be used for billing for this EpisodeOfCare.
	Account []*FHIRReference `json:"Account"`
}

// FHIREpisodeOfCareInput: input for EpisodeOfCare
type FHIREpisodeOfCareInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// planned | waitlist | active | onhold | finished | cancelled.
	Status *EpisodeOfCareStatusEnum `json:"Status"`
	// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
	StatusHistory []*FHIREpisodeofcareStatushistoryInput `json:"StatusHistory"`
	// A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.
	Type []*FHIRCodeableConceptInput `json:"Type"`
	// The list of diagnosis relevant to this episode of care.
	Diagnosis []*FHIREpisodeofcareDiagnosisInput `json:"Diagnosis"`
	// The patient who is the focus of this episode of care.
	Patient *FHIRReferenceInput `json:"Patient"`
	// The organization that has assumed the specific responsibilities for the specified duration.
	ManagingOrganization *FHIRReferenceInput `json:"ManagingOrganization"`
	// The interval during which the managing organization assumes the defined responsibility.
	Period *FHIRPeriodInput `json:"Period"`
	// Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.
	ReferralRequest []*FHIRReferenceInput `json:"ReferralRequest"`
	// The practitioner that is the care manager/care coordinator for this patient.
	CareManager *FHIRReferenceInput `json:"CareManager"`
	// The list of practitioners that may be facilitating this episode of care for specific purposes.
	Team []*FHIRReferenceInput `json:"Team"`
	// The set of accounts that may be used for billing for this EpisodeOfCare.
	Account []*FHIRReferenceInput `json:"Account"`
}

// FHIREpisodeOfCareRelayConnection is a Relay connection for EpisodeOfCare
type FHIREpisodeOfCareRelayConnection struct {
	Edges    []*FHIREpisodeOfCareRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo       `json:"pageInfo"`
}

// FHIREpisodeOfCareRelayEdge is a Relay edge for EpisodeOfCare
type FHIREpisodeOfCareRelayEdge struct {
	Cursor *string            `json:"cursor"`
	Node   *FHIREpisodeOfCare `json:"node"`
}

// FHIREpisodeOfCareRelayPayload is used to return single instances of EpisodeOfCare
type FHIREpisodeOfCareRelayPayload struct {
	Resource *FHIREpisodeOfCare `json:"resource"`
}

// FHIREpisodeofcareDiagnosis definition: an association between a patient and an organization / healthcare provider(s) during which time encounters may occur. the managing organization assumes a level of responsibility for the patient during this time.
type FHIREpisodeofcareDiagnosis struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
	Condition *FHIRReference `json:"Condition"`
	// Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
	Role *FHIRCodeableConcept `json:"Role"`
	// Ranking of the diagnosis (for each role type).
	Rank *string `json:"Rank"`
}

// FHIREpisodeofcareDiagnosisInput: input for EpisodeofcareDiagnosis
type FHIREpisodeofcareDiagnosisInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.
	Condition *FHIRReferenceInput `json:"Condition"`
	// Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).
	Role *FHIRCodeableConceptInput `json:"Role"`
	// Ranking of the diagnosis (for each role type).
	Rank *string `json:"Rank"`
}

// FHIREpisodeofcareStatushistory definition: an association between a patient and an organization / healthcare provider(s) during which time encounters may occur. the managing organization assumes a level of responsibility for the patient during this time.
type FHIREpisodeofcareStatushistory struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// planned | waitlist | active | onhold | finished | cancelled.
	Status *EpisodeOfCareStatusHistoryStatusEnum `json:"Status"`
	// The period during this EpisodeOfCare that the specific status applied.
	Period *FHIRPeriod `json:"Period"`
}

// FHIREpisodeofcareStatushistoryInput: input for EpisodeofcareStatushistory
type FHIREpisodeofcareStatushistoryInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// planned | waitlist | active | onhold | finished | cancelled.
	Status *EpisodeOfCareStatusHistoryStatusEnum `json:"Status"`
	// The period during this EpisodeOfCare that the specific status applied.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIRHumanName definition: a human's name with the ability to identify parts and usage.
type FHIRHumanName struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identifies the purpose for this name.
	Use HumanNameUseEnum `json:"Use"`
	// Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
	Text string `json:"Text"`
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
	Family *string `json:"Family"`
	// Given name.
	Given []*string `json:"Given"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix []*string `json:"Prefix"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix []*string `json:"Suffix"`
	// Indicates the period of time when this name was valid for the named person.
	Period *FHIRPeriod `json:"Period"`
}

// FHIRHumanNameInput: input for HumanName
type FHIRHumanNameInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identifies the purpose for this name.
	Use HumanNameUseEnum `json:"Use"`
	// Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
	Text string `json:"Text"`
	// The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
	Family *string `json:"Family"`
	// Given name.
	Given []string `json:"Given"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
	Prefix []*string `json:"Prefix"`
	// Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
	Suffix []*string `json:"Suffix"`
	// Indicates the period of time when this name was valid for the named person.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIRIdentifier definition: an identifier - identifies some entity uniquely and unambiguously. typically this is used for business identifiers.
type FHIRIdentifier struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The purpose of this identifier.
	Use IdentifierUseEnum `json:"Use"`
	// A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
	Type *FHIRCodeableConcept `json:"Type"`
	// Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
	System *scalarutils.URI `json:"System"`
	// The portion of the identifier typically relevant to the user and which is unique within the context of the system.
	Value string `json:"Value"`
	// Time period during which identifier is/was valid for use.
	Period *FHIRPeriod `json:"Period"`
	// Organization that issued/manages the identifier.
	Assigner *FHIRReference `json:"Assigner"`
}

// FHIRIdentifierInput: input for Identifier
type FHIRIdentifierInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The purpose of this identifier.
	Use IdentifierUseEnum `json:"Use"`
	// A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
	Type *FHIRCodeableConceptInput `json:"Type"`
	// Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
	System *scalarutils.URI `json:"System"`
	// The portion of the identifier typically relevant to the user and which is unique within the context of the system.
	Value string `json:"Value"`
	// Time period during which identifier is/was valid for use.
	Period *FHIRPeriodInput `json:"Period"`
	// Organization that issued/manages the identifier.
	Assigner *FHIRReferenceInput `json:"Assigner"`
}

// FHIRMedicationRequest definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type FHIRMedicationRequest struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// A code specifying the current state of the order.  Generally, this will be active or completed state.
	Status *scalarutils.Code `json:"Status"`
	// Captures the reason for the current state of the MedicationRequest.
	StatusReason *FHIRCodeableConcept `json:"StatusReason"`
	// Whether the request is a proposal, plan, or an original order.
	Intent *scalarutils.Code `json:"Intent"`
	// Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
	Category []*FHIRCodeableConcept `json:"Category"`
	// Indicates how quickly the Medication Request should be addressed with respect to other requests.
	Priority *scalarutils.Code `json:"Priority"`
	// If true indicates that the provider is asking for the medication request not to occur.
	DoNotPerform *bool `json:"DoNotPerform"`
	// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	ReportedBoolean *bool `json:"ReportedBoolean"`
	// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	ReportedReference *FHIRReference `json:"ReportedReference"`
	// Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	MedicationCodeableConcept *FHIRCodeableConcept `json:"MedicationCodeableConcept"`
	// Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	MedicationReference *FHIRReference `json:"MedicationReference"`
	// A link to a resource representing the person or set of individuals to whom the medication will be given.
	Subject *FHIRReference `json:"Subject"`
	// The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
	Encounter *FHIRReference `json:"Encounter"`
	// Include additional information (for example, patient height and weight) that supports the ordering of the medication.
	SupportingInformation []*FHIRReference `json:"SupportingInformation"`
	// The date (and perhaps time) when the prescription was initially written or authored on.
	AuthoredOn *scalarutils.DateTime `json:"AuthoredOn"`
	// The individual, organization, or device that initiated the request and has responsibility for its activation.
	Requester *FHIRReference `json:"Requester"`
	// The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
	Performer *FHIRReference `json:"Performer"`
	// Indicates the type of performer of the administration of the medication.
	PerformerType *FHIRCodeableConcept `json:"PerformerType"`
	// The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
	Recorder *FHIRReference `json:"Recorder"`
	// The reason or the indication for ordering or not ordering the medication.
	ReasonCode *scalarutils.Code `json:"ReasonCode"`
	// Condition or observation that supports why the medication was ordered.
	ReasonReference []*FHIRReference `json:"ReasonReference"`
	// The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesCanonical *scalarutils.Canonical `json:"InstantiatesCanonical"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesURI *scalarutils.Instant `json:"InstantiatesURI"`
	// A plan or request that is fulfilled in whole or in part by this medication request.
	BasedOn []*FHIRReference `json:"BasedOn"`
	// A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
	GroupIdentifier *FHIRIdentifier `json:"GroupIdentifier"`
	// The description of the overall patte3rn of the administration of the medication to the patient.
	CourseOfTherapyType *FHIRCodeableConcept `json:"CourseOfTherapyType"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
	Insurance []*FHIRReference `json:"Insurance"`
	// Extra information about the prescription that could not be conveyed by the other attributes.
	Note []*FHIRAnnotation `json:"Note"`
	// Indicates how the medication is to be used by the patient.
	DosageInstruction []*FHIRDosage `json:"DosageInstruction"`
	// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
	DispenseRequest *FHIRMedicationrequestDispenserequest `json:"DispenseRequest"`
	// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
	Substitution *FHIRMedicationrequestSubstitution `json:"Substitution"`
	// A link to a resource representing an earlier order related order or prescription.
	PriorPrescription *FHIRReference `json:"PriorPrescription"`
	// Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
	DetectedIssue []*FHIRReference `json:"DetectedIssue"`
	// Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
	EventHistory []*FHIRReference `json:"EventHistory"`
}

// FHIRMedicationRequestInput: input for MedicationRequest
type FHIRMedicationRequestInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// A code specifying the current state of the order.  Generally, this will be active or completed state.
	Status *scalarutils.Code `json:"Status"`
	// Captures the reason for the current state of the MedicationRequest.
	StatusReason *FHIRCodeableConceptInput `json:"StatusReason"`
	// Whether the request is a proposal, plan, or an original order.
	Intent *scalarutils.Code `json:"Intent"`
	// Indicates the type of medication request (for example, where the medication is expected to be consumed or administered (i.e. inpatient or outpatient)).
	Category []*FHIRCodeableConceptInput `json:"Category"`
	// Indicates how quickly the Medication Request should be addressed with respect to other requests.
	Priority *scalarutils.Code `json:"Priority"`
	// If true indicates that the provider is asking for the medication request not to occur.
	DoNotPerform *bool `json:"DoNotPerform"`
	// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	ReportedBoolean *bool `json:"ReportedBoolean"`
	// Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.
	ReportedReference *FHIRReferenceInput `json:"ReportedReference"`
	// Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	MedicationCodeableConcept *FHIRCodeableConceptInput `json:"MedicationCodeableConcept"`
	// Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.
	MedicationReference *FHIRReferenceInput `json:"MedicationReference"`
	// A link to a resource representing the person or set of individuals to whom the medication will be given.
	Subject *FHIRReferenceInput `json:"Subject"`
	// The Encounter during which this [x] was created or to which the creation of this record is tightly associated.
	Encounter *FHIRReferenceInput `json:"Encounter"`
	// Include additional information (for example, patient height and weight) that supports the ordering of the medication.
	SupportingInformation []*FHIRReferenceInput `json:"SupportingInformation"`
	// The date (and perhaps time) when the prescription was initially written or authored on.
	AuthoredOn *scalarutils.DateTime `json:"AuthoredOn"`
	// The individual, organization, or device that initiated the request and has responsibility for its activation.
	Requester *FHIRReferenceInput `json:"Requester"`
	// The specified desired performer of the medication treatment (e.g. the performer of the medication administration).
	Performer *FHIRReferenceInput `json:"Performer"`
	// Indicates the type of performer of the administration of the medication.
	PerformerType *FHIRCodeableConceptInput `json:"PerformerType"`
	// The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.
	Recorder *FHIRReferenceInput `json:"Recorder"`
	// The reason or the indication for ordering or not ordering the medication.
	ReasonCode *scalarutils.Code `json:"ReasonCode"`
	// Condition or observation that supports why the medication was ordered.
	ReasonReference []*FHIRReferenceInput `json:"ReasonReference"`
	// The URL pointing to a protocol, guideline, orderset, or other definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesCanonical *scalarutils.Canonical `json:"InstantiatesCanonical"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this MedicationRequest.
	InstantiatesURI *scalarutils.Instant `json:"InstantiatesURI"`
	// A plan or request that is fulfilled in whole or in part by this medication request.
	BasedOn []*FHIRReferenceInput `json:"BasedOn"`
	// A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition or prescription.
	GroupIdentifier *FHIRIdentifierInput `json:"GroupIdentifier"`
	// The description of the overall patte3rn of the administration of the medication to the patient.
	CourseOfTherapyType *FHIRCodeableConceptInput `json:"CourseOfTherapyType"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.
	Insurance []*FHIRReferenceInput `json:"Insurance"`
	// Extra information about the prescription that could not be conveyed by the other attributes.
	Note []*FHIRAnnotationInput `json:"Note"`
	// Indicates how the medication is to be used by the patient.
	DosageInstruction []*FHIRDosageInput `json:"DosageInstruction"`
	// Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.
	DispenseRequest *FHIRMedicationrequestDispenserequestInput `json:"DispenseRequest"`
	// Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.
	Substitution *FHIRMedicationrequestSubstitutionInput `json:"Substitution"`
	// A link to a resource representing an earlier order related order or prescription.
	PriorPrescription *FHIRReferenceInput `json:"PriorPrescription"`
	// Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, duplicate therapy, dosage alert etc.
	DetectedIssue []*FHIRReferenceInput `json:"DetectedIssue"`
	// Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.
	EventHistory []*FHIRReferenceInput `json:"EventHistory"`
}

// FHIRMedicationRequestRelayConnection is a Relay connection for MedicationRequest
type FHIRMedicationRequestRelayConnection struct {
	Edges    []*FHIRMedicationRequestRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo           `json:"pageInfo"`
}

// FHIRMedicationRequestRelayEdge is a Relay edge for MedicationRequest
type FHIRMedicationRequestRelayEdge struct {
	Cursor *string                `json:"cursor"`
	Node   *FHIRMedicationRequest `json:"node"`
}

// FHIRMedicationRequestRelayPayload is used to return single instances of MedicationRequest
type FHIRMedicationRequestRelayPayload struct {
	Resource *FHIRMedicationRequest `json:"resource"`
}

// FHIRMedicationrequestDispenserequest definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type FHIRMedicationrequestDispenserequest struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Indicates the quantity or duration for the first dispense of the medication.
	InitialFill *FHIRMedicationrequestInitialfill `json:"InitialFill"`
	// The minimum period of time that must occur between dispenses of the medication.
	DispenseInterval *FHIRDuration `json:"DispenseInterval"`
	// This indicates the validity period of a prescription (stale dating the Prescription).
	ValidityPeriod *FHIRPeriod `json:"ValidityPeriod"`
	// An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
	NumberOfRepeatsAllowed *string `json:"NumberOfRepeatsAllowed"`
	// The amount that is to be dispensed for one fill.
	Quantity *FHIRQuantity `json:"Quantity"`
	// Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
	ExpectedSupplyDuration *FHIRDuration `json:"ExpectedSupplyDuration"`
	// Indicates the intended dispensing Organization specified by the prescriber.
	Performer *FHIRReference `json:"Performer"`
}

// FHIRMedicationrequestDispenserequestInput: input for MedicationrequestDispenserequest
type FHIRMedicationrequestDispenserequestInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Indicates the quantity or duration for the first dispense of the medication.
	InitialFill *FHIRMedicationrequestInitialfillInput `json:"InitialFill"`
	// The minimum period of time that must occur between dispenses of the medication.
	DispenseInterval *FHIRDurationInput `json:"DispenseInterval"`
	// This indicates the validity period of a prescription (stale dating the Prescription).
	ValidityPeriod *FHIRPeriodInput `json:"ValidityPeriod"`
	// An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus "3 repeats", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.
	NumberOfRepeatsAllowed *string `json:"NumberOfRepeatsAllowed"`
	// The amount that is to be dispensed for one fill.
	Quantity *FHIRQuantityInput `json:"Quantity"`
	// Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.
	ExpectedSupplyDuration *FHIRDurationInput `json:"ExpectedSupplyDuration"`
	// Indicates the intended dispensing Organization specified by the prescriber.
	Performer *FHIRReferenceInput `json:"Performer"`
}

// FHIRMedicationrequestInitialfill definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type FHIRMedicationrequestInitialfill struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The amount or quantity to provide as part of the first dispense.
	Quantity *FHIRQuantity `json:"Quantity"`
	// The length of time that the first dispense is expected to last.
	Duration *FHIRDuration `json:"Duration"`
}

// FHIRMedicationrequestInitialfillInput: input for MedicationrequestInitialfill
type FHIRMedicationrequestInitialfillInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The amount or quantity to provide as part of the first dispense.
	Quantity *FHIRQuantityInput `json:"Quantity"`
	// The length of time that the first dispense is expected to last.
	Duration *FHIRDurationInput `json:"Duration"`
}

// FHIRMedicationrequestSubstitution definition: an order or request for both supply of the medication and the instructions for administration of the medication to a patient. the resource is called "medicationrequest" rather than "medicationprescription" or "medicationorder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
type FHIRMedicationrequestSubstitution struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// True if the prescriber allows a different drug to be dispensed from what was prescribed.
	AllowedBoolean *bool `json:"AllowedBoolean"`
	// True if the prescriber allows a different drug to be dispensed from what was prescribed.
	AllowedCodeableConcept *scalarutils.Code `json:"AllowedCodeableConcept"`
	// Indicates the reason for the substitution, or why substitution must or must not be performed.
	Reason *FHIRCodeableConcept `json:"Reason"`
}

// FHIRMedicationrequestSubstitutionInput: input for MedicationrequestSubstitution
type FHIRMedicationrequestSubstitutionInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// True if the prescriber allows a different drug to be dispensed from what was prescribed.
	AllowedBoolean *bool `json:"AllowedBoolean"`
	// True if the prescriber allows a different drug to be dispensed from what was prescribed.
	AllowedCodeableConcept *scalarutils.Code `json:"AllowedCodeableConcept"`
	// Indicates the reason for the substitution, or why substitution must or must not be performed.
	Reason *FHIRCodeableConceptInput `json:"Reason"`
}

// FHIRNarrative definition: a human-readable summary of the resource conveying the essential clinical and business information for the resource.
type FHIRNarrative struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
	Status *NarrativeStatusEnum `json:"Status"`
	// The actual narrative content, a stripped down version of XHTML.
	Div scalarutils.XHTML `json:"Div"`
}

// FHIRNarrativeInput: input for Narrative
type FHIRNarrativeInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
	Status *NarrativeStatusEnum `json:"Status"`
	// The actual narrative content, a stripped down version of XHTML.
	Div scalarutils.XHTML `json:"Div"`
}

// FHIRObservation definition: measurements and simple assertions made about a patient, device or other subject.
type FHIRObservation struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// A unique identifier assigned to this observation.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
	BasedOn []*FHIRReference `json:"BasedOn"`
	// A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
	PartOf []*FHIRReference `json:"PartOf"`
	// The status of the result value.
	Status *ObservationStatusEnum `json:"Status"`
	// A code that classifies the general type of observation being made.
	Category []*FHIRCodeableConcept `json:"Category"`
	// Describes what was observed. Sometimes this is called the observation "name".
	Code *FHIRCodeableConcept `json:"Code"`
	// The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
	Subject *FHIRReference `json:"Subject"`
	// The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
	Focus []*FHIRReference `json:"Focus"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
	Encounter *FHIRReference `json:"Encounter"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveDateTime *scalarutils.Date `json:"EffectiveDateTime"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectivePeriod *FHIRPeriod `json:"EffectivePeriod"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveTiming *FHIRTiming `json:"EffectiveTiming"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveInstant *scalarutils.Instant `json:"EffectiveInstant"`
	// The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
	Issued *scalarutils.Instant `json:"Issued"`
	// Who was responsible for asserting the observed value as "true".
	Performer []*FHIRReference `json:"Performer"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueQuantity *FHIRQuantity `json:"ValueQuantity"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueCodeableConcept *scalarutils.Code `json:"ValueCodeableConcept"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueString *string `json:"ValueString"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueBoolean *bool `json:"ValueBoolean"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueInteger *string `json:"ValueInteger"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRange *FHIRRange `json:"ValueRange"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRatio *FHIRRatio `json:"ValueRatio"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueSampledData *FHIRSampledData `json:"ValueSampledData"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueTime *time.Time `json:"ValueTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueDateTime *scalarutils.Date `json:"ValueDateTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValuePeriod *FHIRPeriod `json:"ValuePeriod"`
	// Provides a reason why the expected value in the element Observation.value[x] is missing.
	DataAbsentReason *FHIRCodeableConcept `json:"DataAbsentReason"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []*FHIRCodeableConcept `json:"Interpretation"`
	// Comments about the observation or the results.
	Note []*FHIRAnnotation `json:"Note"`
	// Indicates the site on the subject's body where the observation was made (i.e. the target site).
	BodySite *FHIRCodeableConcept `json:"BodySite"`
	// Indicates the mechanism used to perform the observation.
	Method *FHIRCodeableConcept `json:"Method"`
	// The specimen that was used when this observation was made.
	Specimen *FHIRReference `json:"Specimen"`
	// The device used to generate the observation data.
	Device *FHIRReference `json:"Device"`
	// Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
	ReferenceRange []*FHIRObservationReferencerange `json:"ReferenceRange"`
	// This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
	HasMember []*FHIRReference `json:"HasMember"`
	// The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
	DerivedFrom []*FHIRReference `json:"DerivedFrom"`
	// Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
	Component []*FHIRObservationComponent `json:"Component"`
}

// FHIRObservationComponent definition: measurements and simple assertions made about a patient, device or other subject.
type FHIRObservationComponent struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Describes what was observed. Sometimes this is called the observation "code".
	Code *FHIRCodeableConcept `json:"Code"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueQuantity *FHIRQuantity `json:"ValueQuantity"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueCodeableConcept *scalarutils.Code `json:"ValueCodeableConcept"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueString *string `json:"ValueString"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueBoolean *bool `json:"ValueBoolean"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueInteger *string `json:"ValueInteger"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRange *FHIRRange `json:"ValueRange"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRatio *FHIRRatio `json:"ValueRatio"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueSampledData *FHIRSampledData `json:"ValueSampledData"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueTime *time.Time `json:"ValueTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueDateTime *scalarutils.Date `json:"ValueDateTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValuePeriod *FHIRPeriod `json:"ValuePeriod"`
	// Provides a reason why the expected value in the element Observation.component.value[x] is missing.
	DataAbsentReason *FHIRCodeableConcept `json:"DataAbsentReason"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []*FHIRCodeableConcept `json:"Interpretation"`
	// Guidance on how to interpret the value by comparison to a normal or recommended range.
	ReferenceRange []*FHIRObservationReferencerange `json:"ReferenceRange"`
}

// FHIRObservationComponentInput: input for ObservationComponent
type FHIRObservationComponentInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Describes what was observed. Sometimes this is called the observation "code".
	Code *FHIRCodeableConceptInput `json:"Code"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueQuantity *FHIRQuantityInput `json:"ValueQuantity"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueCodeableConcept *scalarutils.Code `json:"ValueCodeableConcept"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueString *string `json:"ValueString"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueBoolean *bool `json:"ValueBoolean"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueInteger *string `json:"ValueInteger"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRange *FHIRRangeInput `json:"ValueRange"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRatio *FHIRRatioInput `json:"ValueRatio"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueSampledData *FHIRSampledDataInput `json:"ValueSampledData"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueTime *time.Time `json:"ValueTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueDateTime *scalarutils.Date `json:"ValueDateTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValuePeriod *FHIRPeriodInput `json:"ValuePeriod"`
	// Provides a reason why the expected value in the element Observation.component.value[x] is missing.
	DataAbsentReason *FHIRCodeableConceptInput `json:"DataAbsentReason"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []*FHIRCodeableConceptInput `json:"Interpretation"`
	// Guidance on how to interpret the value by comparison to a normal or recommended range.
	ReferenceRange []*FHIRObservationReferencerangeInput `json:"ReferenceRange"`
}

// FHIRObservationInput: input for Observation
type FHIRObservationInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A unique identifier assigned to this observation.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.
	BasedOn []*FHIRReferenceInput `json:"BasedOn"`
	// A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.
	PartOf []*FHIRReferenceInput `json:"PartOf"`
	// The status of the result value.
	Status *ObservationStatusEnum `json:"Status"`
	// A code that classifies the general type of observation being made.
	Category []*FHIRCodeableConceptInput `json:"Category"`
	// Describes what was observed. Sometimes this is called the observation "name".
	Code *FHIRCodeableConceptInput `json:"Code"`
	// The patient, or group of patients, location, or device this observation is about and into whose record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.
	Subject *FHIRReferenceInput `json:"Subject"`
	// The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.
	Focus []*FHIRReferenceInput `json:"Focus"`
	// The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.
	Encounter *FHIRReferenceInput `json:"Encounter"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveDateTime *scalarutils.Date `json:"EffectiveDateTime"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectivePeriod *FHIRPeriodInput `json:"EffectivePeriod"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveTiming *FHIRTimingInput `json:"EffectiveTiming"`
	// The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the "physiologically relevant time". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.
	EffectiveInstant *scalarutils.Instant `json:"EffectiveInstant"`
	// The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.
	Issued *scalarutils.Instant `json:"Issued"`
	// Who was responsible for asserting the observed value as "true".
	Performer []*FHIRReferenceInput `json:"Performer"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueQuantity *FHIRQuantityInput `json:"ValueQuantity"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueCodeableConcept *scalarutils.Code `json:"ValueCodeableConcept"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueString *string `json:"ValueString"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueBoolean *bool `json:"ValueBoolean"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueInteger *string `json:"ValueInteger"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRange *FHIRRangeInput `json:"ValueRange"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueRatio *FHIRRatioInput `json:"ValueRatio"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueSampledData *FHIRSampledDataInput `json:"ValueSampledData"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueTime *time.Time `json:"ValueTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValueDateTime *scalarutils.Date `json:"ValueDateTime"`
	// The information determined as a result of making the observation, if the information has a simple value.
	ValuePeriod *FHIRPeriodInput `json:"ValuePeriod"`
	// Provides a reason why the expected value in the element Observation.value[x] is missing.
	DataAbsentReason *FHIRCodeableConceptInput `json:"DataAbsentReason"`
	// A categorical assessment of an observation value.  For example, high, low, normal.
	Interpretation []*FHIRCodeableConceptInput `json:"Interpretation"`
	// Comments about the observation or the results.
	Note []*FHIRAnnotationInput `json:"Note"`
	// Indicates the site on the subject's body where the observation was made (i.e. the target site).
	BodySite *FHIRCodeableConceptInput `json:"BodySite"`
	// Indicates the mechanism used to perform the observation.
	Method *FHIRCodeableConceptInput `json:"Method"`
	// The specimen that was used when this observation was made.
	Specimen *FHIRReferenceInput `json:"Specimen"`
	// The device used to generate the observation data.
	Device *FHIRReferenceInput `json:"Device"`
	// Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an "OR".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.
	ReferenceRange []*FHIRObservationReferencerangeInput `json:"ReferenceRange"`
	// This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.
	HasMember []*FHIRReferenceInput `json:"HasMember"`
	// The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.
	DerivedFrom []*FHIRReferenceInput `json:"DerivedFrom"`
	// Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.
	Component []*FHIRObservationComponentInput `json:"Component"`
}

// FHIRObservationReferencerange definition: measurements and simple assertions made about a patient, device or other subject.
type FHIRObservationReferencerange struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
	Low *FHIRQuantity `json:"Low"`
	// The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
	High *FHIRQuantity `json:"High"`
	// Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
	Type *FHIRCodeableConcept `json:"Type"`
	// Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
	AppliesTo []*FHIRCodeableConcept `json:"AppliesTo"`
	// The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
	Age *FHIRRange `json:"Age"`
	// Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
	Text *string `json:"Text"`
}

// FHIRObservationReferencerangeInput: input for ObservationReferencerange
type FHIRObservationReferencerangeInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).
	Low *FHIRQuantityInput `json:"Low"`
	// The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).
	High *FHIRQuantityInput `json:"High"`
	// Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.
	Type *FHIRCodeableConceptInput `json:"Type"`
	// Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an "AND" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.
	AppliesTo []*FHIRCodeableConceptInput `json:"AppliesTo"`
	// The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.
	Age *FHIRRangeInput `json:"Age"`
	// Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of "Negative" or a list or table of "normals".
	Text *string `json:"Text"`
}

// FHIRObservationRelayConnection is a Relay connection for Observation
type FHIRObservationRelayConnection struct {
	Edges    []*FHIRObservationRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo     `json:"pageInfo"`
}

// FHIRObservationRelayEdge is a Relay edge for Observation
type FHIRObservationRelayEdge struct {
	Cursor *string          `json:"cursor"`
	Node   *FHIRObservation `json:"node"`
}

// FHIRObservationRelayPayload is used to return single instances of Observation
type FHIRObservationRelayPayload struct {
	Resource *FHIRObservation `json:"resource"`
}

type FHIROrganization struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// An identifier for this organization.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// Whether this organization record is in active use.
	Active *bool `json:"Active"`
	// Specific type of organization (e.g. Healthcare Provider, Hospital Department, Insurance Company).
	Type []*FHIRCodeableConcept `json:"Type"`
	// A name associated with the organization.
	Name *string `json:"Name"`
	// An alternate name for the organization.
	Alias []*string `json:"Alias"`
	// A contact detail (e.g. a telephone number or an email address) by which the organization may be contacted.
	Telecom []*FHIRContactPoint `json:"Telecom"`
	// An address for the organization.
	Address []*FHIRAddress `json:"Address"`
}

// FHIROrganizationInput: input for Organization
type FHIROrganizationInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// An identifier for this organization
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// Whether this organization record is in active use.
	Active *bool `json:"Active"`
	// Specific type of organization (e.g. Healthcare Provider, Hospital Department, Insurance Company).
	Type []*FHIRCodeableConceptInput `json:"Type"`
	// A name associated with the organization.
	Name *string `json:"Name"`
	// An alternate name for the organization.
	Alias []*string `json:"Alias"`
	// A contact detail (e.g. a telephone number or an email address) by which the organization may be contacted.
	Telecom []*FHIRContactPointInput `json:"Telecom"`
	// An address for the organization.
	Address []*FHIRAddressInput `json:"Address"`
}

// FHIROrganizationRelayConnection is a Relay connection for Organization
type FHIROrganizationRelayConnection struct {
	Edges    []*FHIROrganizationRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo      `json:"pageInfo"`
}

// FHIROrganizationRelayEdge is a Relay edge for Organization
type FHIROrganizationRelayEdge struct {
	Cursor *string           `json:"cursor"`
	Node   *FHIROrganization `json:"node"`
}

// FHIROrganizationRelayPayload is used to return single instances of Organization
type FHIROrganizationRelayPayload struct {
	Resource *FHIROrganization `json:"resource"`
}

// FHIRPatient definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
type FHIRPatient struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// An identifier for this patient.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	//     Whether this patient record is in active use.
	// Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.
	//
	// It is often used to filter patient lists to exclude inactive patients
	//
	// Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
	Active *bool `json:"Active"`
	// A name associated with the individual.
	Name []*FHIRHumanName `json:"Name"`
	// A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
	Telecom []*FHIRContactPoint `json:"Telecom"`
	// Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
	Gender *PatientGenderEnum `json:"Gender"`
	// The date of birth for the individual.
	BirthDate *scalarutils.Date `json:"BirthDate"`
	// Indicates if the individual is deceased or not.
	DeceasedBoolean *bool `json:"DeceasedBoolean"`
	// Indicates if the individual is deceased or not.
	DeceasedDateTime *scalarutils.Date `json:"DeceasedDateTime"`
	// An address for the individual.
	Address []*FHIRAddress `json:"Address"`
	// This field contains a patient's most recent marital (civil) status.
	MaritalStatus *FHIRCodeableConcept `json:"MaritalStatus"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
	MultipleBirthBoolean *bool `json:"MultipleBirthBoolean"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
	MultipleBirthInteger *string `json:"MultipleBirthInteger"`
	// Image of the patient.
	Photo []*FHIRAttachment `json:"Photo"`
	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []*FHIRPatientContact `json:"Contact"`
	// A language which may be used to communicate with the patient about his or her health.
	Communication []*FHIRPatientCommunication `json:"Communication"`
	// Patient's nominated care provider.
	GeneralPractitioner []*FHIRReference `json:"GeneralPractitioner"`
	// Organization that is the custodian of the patient record.
	ManagingOrganization *FHIRReference `json:"ManagingOrganization"`
	// Link to another patient resource that concerns the same actual patient.
	Link []*FHIRPatientLink `json:"Link"`
}

// FHIRPatientCommunication definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
type FHIRPatientCommunication struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
	Language *FHIRCodeableConcept `json:"Language"`
	// Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Preferred *bool `json:"Preferred"`
}

// FHIRPatientCommunicationInput: input for PatientCommunication
type FHIRPatientCommunicationInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. "en" for English, or "en-US" for American English versus "en-EN" for England English.
	Language *FHIRCodeableConceptInput `json:"Language"`
	// Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).
	Preferred *bool `json:"Preferred"`
}

// FHIRPatientContact definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
type FHIRPatientContact struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The nature of the relationship between the patient and the contact person.
	Relationship []*FHIRCodeableConcept `json:"Relationship"`
	// A name associated with the contact person.
	Name *FHIRHumanName `json:"Name"`
	// A contact detail for the person, e.g. a telephone number or an email address.
	Telecom []*FHIRContactPoint `json:"Telecom"`
	// Address for the contact person.
	Address *FHIRAddress `json:"Address"`
	// Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
	Gender *PatientContactGenderEnum `json:"Gender"`
	// Organization on behalf of which the contact is acting or for which the contact is working.
	Organization *FHIRReference `json:"Organization"`
	// The period during which this contact person or organization is valid to be contacted relating to this patient.
	Period *FHIRPeriod `json:"Period"`
}

// FHIRPatientContactInput: input for PatientContact
type FHIRPatientContactInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The nature of the relationship between the patient and the contact person.
	Relationship []*FHIRCodeableConceptInput `json:"Relationship"`
	// A name associated with the contact person.
	Name *FHIRHumanNameInput `json:"Name"`
	// A contact detail for the person, e.g. a telephone number or an email address.
	Telecom []*FHIRContactPointInput `json:"Telecom"`
	// Address for the contact person.
	Address *FHIRAddressInput `json:"Address"`
	// Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.
	Gender *PatientContactGenderEnum `json:"Gender"`
	// Organization on behalf of which the contact is acting or for which the contact is working.
	Organization *FHIRReferenceInput `json:"Organization"`
	// The period during which this contact person or organization is valid to be contacted relating to this patient.
	Period *FHIRPeriodInput `json:"Period"`
}

// FHIRPatientInput: input for Patient
type FHIRPatientInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// An identifier for this patient.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	//     Whether this patient record is in active use.
	// Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.
	//
	// It is often used to filter patient lists to exclude inactive patients
	//
	// Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
	Active *bool `json:"Active"`
	// A name associated with the individual.
	Name []*FHIRHumanNameInput `json:"Name"`
	// A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
	Telecom []*FHIRContactPointInput `json:"Telecom"`
	// Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
	Gender *PatientGenderEnum `json:"Gender"`
	// The date of birth for the individual.
	BirthDate *scalarutils.Date `json:"BirthDate"`
	// Indicates if the individual is deceased or not.
	DeceasedBoolean *bool `json:"DeceasedBoolean"`
	// Indicates if the individual is deceased or not.
	DeceasedDateTime *scalarutils.Date `json:"DeceasedDateTime"`
	// An address for the individual.
	Address []*FHIRAddressInput `json:"Address"`
	// This field contains a patient's most recent marital (civil) status.
	MaritalStatus *FHIRCodeableConceptInput `json:"MaritalStatus"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
	MultipleBirthBoolean *bool `json:"MultipleBirthBoolean"`
	// Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
	MultipleBirthInteger *string `json:"MultipleBirthInteger"`
	// Image of the patient.
	Photo []*FHIRAttachmentInput `json:"Photo"`
	// A contact party (e.g. guardian, partner, friend) for the patient.
	Contact []*FHIRPatientContactInput `json:"Contact"`
	// A language which may be used to communicate with the patient about his or her health.
	Communication []*FHIRPatientCommunicationInput `json:"Communication"`
	// Patient's nominated care provider.
	GeneralPractitioner []*FHIRReferenceInput `json:"GeneralPractitioner"`
	// Organization that is the custodian of the patient record.
	ManagingOrganization *FHIRReferenceInput `json:"ManagingOrganization"`
	// Link to another patient resource that concerns the same actual patient.
	Link []*FHIRPatientLinkInput `json:"Link"`
}

// FHIRPatientLink definition: demographics and other administrative information about an individual or animal receiving care or other health-related services.
type FHIRPatientLink struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The other patient resource that the link refers to.
	Other *FHIRReference `json:"Other"`
	// The type of link between this patient resource and another patient resource.
	Type *PatientLinkTypeEnum `json:"Type"`
}

// FHIRPatientLinkInput: input for PatientLink
type FHIRPatientLinkInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The other patient resource that the link refers to.
	Other *FHIRReferenceInput `json:"Other"`
	// The type of link between this patient resource and another patient resource.
	Type *PatientLinkTypeEnum `json:"Type"`
}

// FHIRPatientRelayConnection is a Relay connection for Patient
type FHIRPatientRelayConnection struct {
	Edges           []*FHIRPatientRelayEdge `json:"edges"`
	HasOpenEpisodes bool                    `json:"hasOpenEpisodes"`
	PageInfo        *firebasetools.PageInfo `json:"pageInfo"`
}

// FHIRPatientRelayEdge is a Relay edge for Patient
type FHIRPatientRelayEdge struct {
	Cursor          *string      `json:"cursor"`
	HasOpenEpisodes bool         `json:"hasOpenEpisodes"`
	Node            *FHIRPatient `json:"node"`
}

// FHIRPatientRelayPayload is used to return single instances of Patient
type FHIRPatientRelayPayload struct {
	Resource        *FHIRPatient `json:"resource"`
	HasOpenEpisodes bool         `json:"hasOpenEpisodes"`
}

// FHIRPeriod definition: a time period defined by a start and end date and optionally time.
type FHIRPeriod struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The start of the period. The boundary is inclusive.
	Start scalarutils.DateTime `json:"Start"`
	// The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
	End scalarutils.DateTime `json:"End"`
}

// FHIRPeriodInput: input for Period
type FHIRPeriodInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The start of the period. The boundary is inclusive.
	Start scalarutils.DateTime `json:"Start"`
	// The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
	End scalarutils.DateTime `json:"End"`
}

// FHIRQuantity definition: a measured amount (or an amount that can potentially be measured). note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
type FHIRQuantity struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value float64 `json:"Value"`
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *QuantityComparatorEnum `json:"Comparator"`
	// A human-readable form of the unit.
	Unit string `json:"Unit"`
	// The identification of the system that provides the coded form of the unit.
	System scalarutils.URI `json:"System"`
	// A computer processable form of the unit in some unit representation system.
	Code scalarutils.Code `json:"Code"`
}

// FHIRQuantityInput: input for Quantity
type FHIRQuantityInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value float64 `json:"Value"`
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator *QuantityComparatorEnum `json:"Comparator"`
	// A human-readable form of the unit.
	Unit string `json:"Unit"`
	// The identification of the system that provides the coded form of the unit.
	System scalarutils.URI `json:"System"`
	// A computer processable form of the unit in some unit representation system.
	Code scalarutils.Code `json:"Code"`
}

// FHIRRange definition: a set of ordered quantities defined by a low and high limit.
type FHIRRange struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The low limit. The boundary is inclusive.
	Low *FHIRQuantity `json:"Low"`
	// The high limit. The boundary is inclusive.
	High *FHIRQuantity `json:"High"`
}

// FHIRRangeInput: input for Range
type FHIRRangeInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The low limit. The boundary is inclusive.
	Low *FHIRQuantityInput `json:"Low"`
	// The high limit. The boundary is inclusive.
	High *FHIRQuantityInput `json:"High"`
}

// FHIRRatio definition: a relationship of two quantity values - expressed as a numerator and a denominator.
type FHIRRatio struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the numerator.
	Numerator *FHIRQuantity `json:"Numerator"`
	// The value of the denominator.
	Denominator *FHIRQuantity `json:"Denominator"`
}

// FHIRRatio definition: a relationship of two quantity values - expressed as a numerator and a denominator.
type FHIRRatioInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The value of the numerator.
	Numerator *FHIRQuantityInput `json:"Numerator"`
	// The value of the denominator.
	Denominator *FHIRQuantityInput `json:"Denominator"`
}

// FHIRReference definition: a reference from one resource to another.
type FHIRReference struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
	Reference *string `json:"Reference"`
	//     The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
	//
	// The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
	Type *scalarutils.URI `json:"Type"`
	// An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
	Identifier *FHIRIdentifier `json:"Identifier"`
	// Plain text narrative that identifies the resource in addition to the resource reference.
	Display string `json:"Display"`
}

// FHIRReferenceInput: input for Reference
type FHIRReferenceInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
	Reference *string `json:"Reference"`
	//     The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.
	//
	// The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
	Type *scalarutils.URI `json:"Type"`
	// An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
	Identifier *FHIRIdentifierInput `json:"Identifier"`
	// Plain text narrative that identifies the resource in addition to the resource reference.
	Display string `json:"Display"`
}

// FHIRSampledData definition: a series of measurements taken by a device, with upper and lower limits. there may be more than one dimension in the data.
type FHIRSampledData struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
	Origin *FHIRQuantity `json:"Origin"`
	// The length of time between sampling times, measured in milliseconds.
	Period *scalarutils.Decimal `json:"Period"`
	// A correction factor that is applied to the sampled data points before they are added to the origin.
	Factor *scalarutils.Decimal `json:"Factor"`
	// The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
	LowerLimit *scalarutils.Decimal `json:"LowerLimit"`
	// The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
	UpperLimit *scalarutils.Decimal `json:"UpperLimit"`
	// The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
	Dimensions *string `json:"Dimensions"`
	// A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
	Data *string `json:"Data"`
}

// FHIRSampledDataInput: input for SampledData
type FHIRSampledDataInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
	Origin *FHIRQuantityInput `json:"Origin"`
	// The length of time between sampling times, measured in milliseconds.
	Period *scalarutils.Decimal `json:"Period"`
	// A correction factor that is applied to the sampled data points before they are added to the origin.
	Factor *scalarutils.Decimal `json:"Factor"`
	// The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
	LowerLimit *scalarutils.Decimal `json:"LowerLimit"`
	// The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
	UpperLimit *scalarutils.Decimal `json:"UpperLimit"`
	// The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
	Dimensions *string `json:"Dimensions"`
	// A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
	Data *string `json:"Data"`
}

// FHIRServiceRequest definition: a record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
type FHIRServiceRequest struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text *FHIRNarrative `json:"Text"`
	// Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
	Identifier []*FHIRIdentifier `json:"Identifier"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
	InstantiatesCanonical *scalarutils.Canonical `json:"InstantiatesCanonical"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
	InstantiatesURI *scalarutils.Instant `json:"InstantiatesURI"`
	// Plan/proposal/order fulfilled by this request.
	BasedOn []*FHIRReference `json:"BasedOn"`
	// The request takes the place of the referenced completed or terminated request(s).
	Replaces []*FHIRReference `json:"Replaces"`
	// A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
	Requisition *FHIRIdentifier `json:"Requisition"`
	// The status of the order.
	Status *scalarutils.Code `json:"Status"`
	// Whether the request is a proposal, plan, an original order or a reflex order.
	Intent *scalarutils.Code `json:"Intent"`
	// A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
	Category []*FHIRCodeableConcept `json:"Category"`
	// Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
	Priority *scalarutils.Code `json:"Priority"`
	// Set this to true if the record is saying that the service/procedure should NOT be performed.
	DoNotPerform *bool `json:"DoNotPerform"`
	// A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
	Code *FHIRCodeableConcept `json:"Code"`
	// Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
	OrderDetail []*FHIRCodeableConcept `json:"OrderDetail"`
	// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
	QuantityQuantity *FHIRQuantity `json:"QuantityQuantity"`
	// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
	QuantityRatio *FHIRRatio `json:"QuantityRatio"`
	// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
	QuantityRange *FHIRRange `json:"QuantityRange"`
	// On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
	Subject *FHIRReference `json:"Subject"`
	// An encounter that provides additional information about the healthcare context in which this request is made.
	Encounter *FHIRReference `json:"Encounter"`
	// The date/time at which the requested service should occur.
	OccurrenceDateTime *scalarutils.Date `json:"OccurrenceDateTime"`
	// The date/time at which the requested service should occur.
	OccurrencePeriod *FHIRPeriod `json:"OccurrencePeriod"`
	// The date/time at which the requested service should occur.
	OccurrenceTiming *FHIRTiming `json:"OccurrenceTiming"`
	// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
	AsNeededBoolean *bool `json:"AsNeededBoolean"`
	// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
	AsNeededCodeableConcept *scalarutils.Code `json:"AsNeededCodeableConcept"`
	// When the request transitioned to being actionable.
	AuthoredOn *scalarutils.DateTime `json:"AuthoredOn"`
	// The individual who initiated the request and has responsibility for its activation.
	Requester *FHIRReference `json:"Requester"`
	// Desired type of performer for doing the requested service.
	PerformerType *FHIRCodeableConcept `json:"PerformerType"`
	// The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
	Performer []*FHIRReference `json:"Performer"`
	// The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
	LocationCode *scalarutils.Code `json:"LocationCode"`
	// A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
	LocationReference []*FHIRReference `json:"LocationReference"`
	// An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
	ReasonCode *scalarutils.Code `json:"ReasonCode"`
	// Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in `supportingInfo`.
	ReasonReference []*FHIRReference `json:"ReasonReference"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
	Insurance []*FHIRReference `json:"Insurance"`
	// Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
	SupportingInfo []*FHIRReference `json:"SupportingInfo"`
	// One or more specimens that the laboratory procedure will use.
	Specimen []*FHIRReference `json:"Specimen"`
	// Anatomic location where the procedure should be performed. This is the target site.
	BodySite []*FHIRCodeableConcept `json:"BodySite"`
	// Any other notes and comments made about the service request. For example, internal billing notes.
	Note []*FHIRAnnotation `json:"Note"`
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction *string `json:"PatientInstruction"`
	// Key events in the history of the request.
	RelevantHistory []*FHIRReference `json:"RelevantHistory"`
}

// FHIRServiceRequestInput: input for ServiceRequest
type FHIRServiceRequestInput struct {
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	ID *string `json:"ID"`
	// Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
	Identifier []*FHIRIdentifierInput `json:"Identifier"`
	// The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
	InstantiatesCanonical *scalarutils.Canonical `json:"InstantiatesCanonical"`
	// The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
	InstantiatesURI *scalarutils.Instant `json:"InstantiatesURI"`
	// Plan/proposal/order fulfilled by this request.
	BasedOn []*FHIRReferenceInput `json:"BasedOn"`
	// The request takes the place of the referenced completed or terminated request(s).
	Replaces []*FHIRReferenceInput `json:"Replaces"`
	// A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
	Requisition *FHIRIdentifierInput `json:"Requisition"`
	// The status of the order.
	Status *scalarutils.Code `json:"Status"`
	// Whether the request is a proposal, plan, an original order or a reflex order.
	Intent *scalarutils.Code `json:"Intent"`
	// A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
	Category []*FHIRCodeableConceptInput `json:"Category"`
	// Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
	Priority *scalarutils.Code `json:"Priority"`
	// Set this to true if the record is saying that the service/procedure should NOT be performed.
	DoNotPerform *bool `json:"DoNotPerform"`
	// A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
	Code *FHIRCodeableConceptInput `json:"Code"`
	// Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
	OrderDetail []*FHIRCodeableConceptInput `json:"OrderDetail"`
	// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
	QuantityQuantity *FHIRQuantityInput `json:"QuantityQuantity"`
	// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
	QuantityRatio *FHIRRatioInput `json:"QuantityRatio"`
	// An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
	QuantityRange *FHIRRangeInput `json:"QuantityRange"`
	// On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
	Subject *FHIRReferenceInput `json:"Subject"`
	// An encounter that provides additional information about the healthcare context in which this request is made.
	Encounter *FHIRReferenceInput `json:"Encounter"`
	// The date/time at which the requested service should occur.
	OccurrenceDateTime *scalarutils.Date `json:"OccurrenceDateTime"`
	// The date/time at which the requested service should occur.
	OccurrencePeriod *FHIRPeriodInput `json:"OccurrencePeriod"`
	// The date/time at which the requested service should occur.
	OccurrenceTiming *FHIRTimingInput `json:"OccurrenceTiming"`
	// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
	AsNeededBoolean *bool `json:"AsNeededBoolean"`
	// If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
	AsNeededCodeableConcept *scalarutils.Code `json:"AsNeededCodeableConcept"`
	// When the request transitioned to being actionable.
	AuthoredOn *scalarutils.DateTime `json:"AuthoredOn"`
	// The individual who initiated the request and has responsibility for its activation.
	Requester *FHIRReferenceInput `json:"Requester"`
	// Desired type of performer for doing the requested service.
	PerformerType *FHIRCodeableConceptInput `json:"PerformerType"`
	// The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
	Performer []*FHIRReferenceInput `json:"Performer"`
	// The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
	LocationCode *scalarutils.Code `json:"LocationCode"`
	// A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
	LocationReference []*FHIRReferenceInput `json:"LocationReference"`
	// An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
	ReasonCode *scalarutils.Code `json:"ReasonCode"`
	// Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in `supportingInfo`.
	ReasonReference []*FHIRReferenceInput `json:"ReasonReference"`
	// Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
	Insurance []*FHIRReferenceInput `json:"Insurance"`
	// Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
	SupportingInfo []*FHIRReferenceInput `json:"SupportingInfo"`
	// One or more specimens that the laboratory procedure will use.
	Specimen []*FHIRReferenceInput `json:"Specimen"`
	// Anatomic location where the procedure should be performed. This is the target site.
	BodySite []*FHIRCodeableConceptInput `json:"BodySite"`
	// Any other notes and comments made about the service request. For example, internal billing notes.
	Note []*FHIRAnnotationInput `json:"Note"`
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction *string `json:"PatientInstruction"`
	// Key events in the history of the request.
	RelevantHistory []*FHIRReferenceInput `json:"RelevantHistory"`
}

// FHIRServiceRequestRelayConnection is a Relay connection for ServiceRequest
type FHIRServiceRequestRelayConnection struct {
	Edges    []*FHIRServiceRequestRelayEdge `json:"edges"`
	PageInfo *firebasetools.PageInfo        `json:"pageInfo"`
}

// FHIRServiceRequestRelayEdge is a Relay edge for ServiceRequest
type FHIRServiceRequestRelayEdge struct {
	Cursor *string             `json:"cursor"`
	Node   *FHIRServiceRequest `json:"node"`
}

// FHIRServiceRequestRelayPayload is used to return single instances of ServiceRequest
type FHIRServiceRequestRelayPayload struct {
	Resource *FHIRServiceRequest `json:"resource"`
}

// FHIRTiming definition: specifies an event that may occur multiple times. timing schedules are used to record when things are planned, expected or requested to occur. the most common usage is in dosage instructions for medications. they are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
type FHIRTiming struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identifies specific times when the event occurs.
	Event []*scalarutils.DateTime `json:"Event"`
	// A set of rules that describe when the event is scheduled.
	Repeat *FHIRTimingRepeat `json:"Repeat"`
	// A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
	Code scalarutils.Code `json:"Code"`
}

// FHIRTimingInput: input for Timing
type FHIRTimingInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Identifies specific times when the event occurs.
	Event *scalarutils.DateTime `json:"Event"`
	// A set of rules that describe when the event is scheduled.
	Repeat *FHIRTimingRepeatInput `json:"Repeat"`
	// A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
	Code scalarutils.Code `json:"Code"`
}

// FHIRTimingRepeat definition: specifies an event that may occur multiple times. timing schedules are used to record when things are planned, expected or requested to occur. the most common usage is in dosage instructions for medications. they are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
type FHIRTimingRepeat struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsDuration *FHIRDuration `json:"BoundsDuration"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsRange *FHIRRange `json:"BoundsRange"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsPeriod *FHIRPeriod `json:"BoundsPeriod"`
	// A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
	Count *string `json:"Count"`
	// If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
	CountMax *string `json:"CountMax"`
	// How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
	Duration *scalarutils.Decimal `json:"Duration"`
	// If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
	DurationMax *scalarutils.Decimal `json:"DurationMax"`
	// The units of time for the duration, in UCUM units.
	DurationUnit *TimingRepeatDurationUnitEnum `json:"DurationUnit"`
	// The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
	Frequency *string `json:"Frequency"`
	// If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
	FrequencyMax *string `json:"FrequencyMax"`
	// Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
	Period *scalarutils.Decimal `json:"Period"`
	// If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
	PeriodMax *scalarutils.Decimal `json:"PeriodMax"`
	// The units of time for the period in UCUM units.
	PeriodUnit *TimingRepeatPeriodUnitEnum `json:"PeriodUnit"`
	// If one or more days of week is provided, then the action happens only on the specified day(s).
	DayOfWeek []*scalarutils.Code `json:"DayOfWeek"`
	// Specified time of day for action to take place.
	TimeOfDay *time.Time `json:"TimeOfDay"`
	// An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
	When *TimingRepeatWhenEnum `json:"When"`
	// The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
	Offset *int `json:"Offset"`
}

// FHIRTimingRepeatInput: input for TimingRepeat
type FHIRTimingRepeatInput struct {
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	ID *string `json:"ID"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsDuration *FHIRDurationInput `json:"BoundsDuration"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsRange *FHIRRangeInput `json:"BoundsRange"`
	// Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
	BoundsPeriod *FHIRPeriodInput `json:"BoundsPeriod"`
	// A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
	Count *string `json:"Count"`
	// If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
	CountMax *string `json:"CountMax"`
	// How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
	Duration *scalarutils.Decimal `json:"Duration"`
	// If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
	DurationMax *scalarutils.Decimal `json:"DurationMax"`
	// The units of time for the duration, in UCUM units.
	DurationUnit *TimingRepeatDurationUnitEnum `json:"DurationUnit"`
	// The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
	Frequency *string `json:"Frequency"`
	// If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
	FrequencyMax *string `json:"FrequencyMax"`
	// Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
	Period *scalarutils.Decimal `json:"Period"`
	// If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
	PeriodMax *scalarutils.Decimal `json:"PeriodMax"`
	// The units of time for the period in UCUM units.
	PeriodUnit *TimingRepeatPeriodUnitEnum `json:"PeriodUnit"`
	// If one or more days of week is provided, then the action happens only on the specified day(s).
	DayOfWeek *scalarutils.Code `json:"DayOfWeek"`
	// Specified time of day for action to take place.
	TimeOfDay *time.Time `json:"TimeOfDay"`
	// An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
	When *TimingRepeatWhenEnum `json:"When"`
	// The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
	Offset *int `json:"Offset"`
}

type IdentificationDocument struct {
	DocumentType     IDDocumentType         `json:"documentType"`
	DocumentNumber   string                 `json:"documentNumber"`
	Title            *string                `json:"title"`
	ImageContentType *enumutils.ContentType `json:"imageContentType"`
	ImageBase64      *string                `json:"imageBase64"`
}

type NameInput struct {
	FirstName  string  `json:"firstName"`
	LastName   string  `json:"lastName"`
	OtherNames *string `json:"otherNames"`
}

type OTPEpisodeCreationInput struct {
	PatientID    string `json:"patientID"`
	ProviderCode string `json:"providerCode"`
	Msisdn       string `json:"msisdn"`
	Otp          string `json:"otp"`
	FullAccess   bool   `json:"fullAccess"`
}

type OTPEpisodeUpgradeInput struct {
	EpisodeID string `json:"episodeID"`
	Msisdn    string `json:"msisdn"`
	Otp       string `json:"otp"`
}

type PatientConnection struct {
	Edges    []*PatientEdge          `json:"edges"`
	PageInfo *firebasetools.PageInfo `json:"pageInfo"`
}

type PatientEdge struct {
	Cursor          string       `json:"cursor"`
	Node            *FHIRPatient `json:"node"`
	HasOpenEpisodes bool         `json:"hasOpenEpisodes"`
}

type PatientExtraInformationInput struct {
	PatientID     string                `json:"patientID"`
	MaritalStatus *MaritalStatus        `json:"maritalStatus"`
	Languages     []*enumutils.Language `json:"languages"`
	Emails        []*EmailInput         `json:"emails"`
}

type PatientPayload struct {
	PatientRecord   *FHIRPatient         `json:"patientRecord"`
	HasOpenEpisodes bool                 `json:"hasOpenEpisodes"`
	OpenEpisodes    []*FHIREpisodeOfCare `json:"openEpisodes"`
}

type PhoneNumberInput struct {
	Msisdn             string `json:"msisdn"`
	VerificationCode   string `json:"verificationCode"`
	IsUssd             bool   `json:"isUSSD"`
	CommunicationOptIn bool   `json:"communicationOptIn"`
}

type PhotoInput struct {
	PhotoContentType enumutils.ContentType `json:"photoContentType"`
	PhotoBase64data  string                `json:"photoBase64data"`
	PhotoFilename    string                `json:"photoFilename"`
}

type PhysicalAddress struct {
	MapsCode        string `json:"mapsCode"`
	PhysicalAddress string `json:"physicalAddress"`
}

type PostalAddress struct {
	PostalAddress string `json:"postalAddress"`
	PostalCode    string `json:"postalCode"`
}

type RetirePatientInput struct {
	ID string `json:"id"`
}

type SimpleNHIFInput struct {
	PatientID             string                 `json:"patientID"`
	MembershipNumber      string                 `json:"membershipNumber"`
	FrontImageBase64      *string                `json:"frontImageBase64"`
	FrontImageContentType *enumutils.ContentType `json:"frontImageContentType"`
	RearImageBase64       *string                `json:"rearImageBase64"`
	RearImageContentType  *enumutils.ContentType `json:"rearImageContentType"`
}

type SimpleNextOfKinInput struct {
	PatientID         string              `json:"patientID"`
	Names             []*NameInput        `json:"names"`
	PhoneNumbers      []*PhoneNumberInput `json:"phoneNumbers"`
	Emails            []*EmailInput       `json:"emails"`
	PhysicalAddresses []*PhysicalAddress  `json:"physicalAddresses"`
	PostalAddresses   []*PostalAddress    `json:"postalAddresses"`
	Gender            string              `json:"gender"`
	BirthDate         scalarutils.Date    `json:"birthDate"`
	Relationship      RelationshipType    `json:"relationship"`
	Active            bool                `json:"active"`
}

type SimplePatientRegistrationInput struct {
	ID                      *string                   `json:"id"`
	Names                   []*NameInput              `json:"names"`
	Gender                  string                    `json:"gender"`
	IdentificationDocuments []*IdentificationDocument `json:"identificationDocuments"`
	BirthDate               scalarutils.Date          `json:"birthDate"`
	PhoneNumbers            []*PhoneNumberInput       `json:"phoneNumbers"`
	Photos                  []*PhotoInput             `json:"photos"`
	Emails                  []*EmailInput             `json:"emails"`
	PhysicalAddresses       []*PhysicalAddress        `json:"physicalAddresses"`
	PostalAddresses         []*PostalAddress          `json:"postalAddresses"`
	MaritalStatus           *MaritalStatus            `json:"maritalStatus"`
	Languages               []*enumutils.Language     `json:"languages"`
	Active                  bool                      `json:"active"`
	ReplicateUssd           *bool                     `json:"replicateUSSD"`
}

// AddressTypeEnum is a FHIR enum
type AddressTypeEnum string

const (
	AddressTypeEnumPostal   AddressTypeEnum = "postal"
	AddressTypeEnumPhysical AddressTypeEnum = "physical"
	AddressTypeEnumBoth     AddressTypeEnum = "both"
)

var AllAddressTypeEnum = []AddressTypeEnum{
	AddressTypeEnumPostal,
	AddressTypeEnumPhysical,
	AddressTypeEnumBoth,
}

func (e AddressTypeEnum) IsValid() bool {
	switch e {
	case AddressTypeEnumPostal, AddressTypeEnumPhysical, AddressTypeEnumBoth:
		return true
	}
	return false
}

func (e AddressTypeEnum) String() string {
	return string(e)
}

func (e *AddressTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddressTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddressTypeEnum", str)
	}
	return nil
}

func (e AddressTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AddressUseEnum is a FHIR enum
type AddressUseEnum string

const (
	AddressUseEnumHome    AddressUseEnum = "home"
	AddressUseEnumWork    AddressUseEnum = "work"
	AddressUseEnumTemp    AddressUseEnum = "temp"
	AddressUseEnumOld     AddressUseEnum = "old"
	AddressUseEnumBilling AddressUseEnum = "billing"
)

var AllAddressUseEnum = []AddressUseEnum{
	AddressUseEnumHome,
	AddressUseEnumWork,
	AddressUseEnumTemp,
	AddressUseEnumOld,
	AddressUseEnumBilling,
}

func (e AddressUseEnum) IsValid() bool {
	switch e {
	case AddressUseEnumHome, AddressUseEnumWork, AddressUseEnumTemp, AddressUseEnumOld, AddressUseEnumBilling:
		return true
	}
	return false
}

func (e AddressUseEnum) String() string {
	return string(e)
}

func (e *AddressUseEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddressUseEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddressUseEnum", str)
	}
	return nil
}

func (e AddressUseEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AgeComparatorEnum is a FHIR enum
type AgeComparatorEnum string

const (
	AgeComparatorEnumLessThan             AgeComparatorEnum = "less_than"
	AgeComparatorEnumLessThanOrEqualTo    AgeComparatorEnum = "less_than_or_equal_to"
	AgeComparatorEnumGreaterThanOrEqualTo AgeComparatorEnum = "greater_than_or_equal_to"
	AgeComparatorEnumGreaterThan          AgeComparatorEnum = "greater_than"
)

var AllAgeComparatorEnum = []AgeComparatorEnum{
	AgeComparatorEnumLessThan,
	AgeComparatorEnumLessThanOrEqualTo,
	AgeComparatorEnumGreaterThanOrEqualTo,
	AgeComparatorEnumGreaterThan,
}

func (e AgeComparatorEnum) IsValid() bool {
	switch e {
	case AgeComparatorEnumLessThan, AgeComparatorEnumLessThanOrEqualTo, AgeComparatorEnumGreaterThanOrEqualTo, AgeComparatorEnumGreaterThan:
		return true
	}
	return false
}

func (e AgeComparatorEnum) String() string {
	return string(e)
}

func (e *AgeComparatorEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AgeComparatorEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AgeComparatorEnum", str)
	}
	return nil
}

func (e AgeComparatorEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AllergyIntoleranceCategoryEnum is a FHIR enum
type AllergyIntoleranceCategoryEnum string

const (
	AllergyIntoleranceCategoryEnumFood        AllergyIntoleranceCategoryEnum = "food"
	AllergyIntoleranceCategoryEnumMedication  AllergyIntoleranceCategoryEnum = "medication"
	AllergyIntoleranceCategoryEnumEnvironment AllergyIntoleranceCategoryEnum = "environment"
	AllergyIntoleranceCategoryEnumBiologic    AllergyIntoleranceCategoryEnum = "biologic"
)

var AllAllergyIntoleranceCategoryEnum = []AllergyIntoleranceCategoryEnum{
	AllergyIntoleranceCategoryEnumFood,
	AllergyIntoleranceCategoryEnumMedication,
	AllergyIntoleranceCategoryEnumEnvironment,
	AllergyIntoleranceCategoryEnumBiologic,
}

func (e AllergyIntoleranceCategoryEnum) IsValid() bool {
	switch e {
	case AllergyIntoleranceCategoryEnumFood, AllergyIntoleranceCategoryEnumMedication, AllergyIntoleranceCategoryEnumEnvironment, AllergyIntoleranceCategoryEnumBiologic:
		return true
	}
	return false
}

func (e AllergyIntoleranceCategoryEnum) String() string {
	return string(e)
}

func (e *AllergyIntoleranceCategoryEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllergyIntoleranceCategoryEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllergyIntoleranceCategoryEnum", str)
	}
	return nil
}

func (e AllergyIntoleranceCategoryEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AllergyIntoleranceCriticalityEnum is a FHIR enum
type AllergyIntoleranceCriticalityEnum string

const (
	AllergyIntoleranceCriticalityEnumLow            AllergyIntoleranceCriticalityEnum = "low"
	AllergyIntoleranceCriticalityEnumHigh           AllergyIntoleranceCriticalityEnum = "high"
	AllergyIntoleranceCriticalityEnumUnableToAssess AllergyIntoleranceCriticalityEnum = "unable_to_assess"
)

var AllAllergyIntoleranceCriticalityEnum = []AllergyIntoleranceCriticalityEnum{
	AllergyIntoleranceCriticalityEnumLow,
	AllergyIntoleranceCriticalityEnumHigh,
	AllergyIntoleranceCriticalityEnumUnableToAssess,
}

func (e AllergyIntoleranceCriticalityEnum) IsValid() bool {
	switch e {
	case AllergyIntoleranceCriticalityEnumLow, AllergyIntoleranceCriticalityEnumHigh, AllergyIntoleranceCriticalityEnumUnableToAssess:
		return true
	}
	return false
}

func (e AllergyIntoleranceCriticalityEnum) String() string {
	return string(e)
}

func (e *AllergyIntoleranceCriticalityEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllergyIntoleranceCriticalityEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllergyIntoleranceCriticalityEnum", str)
	}
	return nil
}

func (e AllergyIntoleranceCriticalityEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AllergyIntoleranceReactionSeverityEnum is a FHIR enum
type AllergyIntoleranceReactionSeverityEnum string

const (
	AllergyIntoleranceReactionSeverityEnumMild     AllergyIntoleranceReactionSeverityEnum = "mild"
	AllergyIntoleranceReactionSeverityEnumModerate AllergyIntoleranceReactionSeverityEnum = "moderate"
	AllergyIntoleranceReactionSeverityEnumSevere   AllergyIntoleranceReactionSeverityEnum = "severe"
)

var AllAllergyIntoleranceReactionSeverityEnum = []AllergyIntoleranceReactionSeverityEnum{
	AllergyIntoleranceReactionSeverityEnumMild,
	AllergyIntoleranceReactionSeverityEnumModerate,
	AllergyIntoleranceReactionSeverityEnumSevere,
}

func (e AllergyIntoleranceReactionSeverityEnum) IsValid() bool {
	switch e {
	case AllergyIntoleranceReactionSeverityEnumMild, AllergyIntoleranceReactionSeverityEnumModerate, AllergyIntoleranceReactionSeverityEnumSevere:
		return true
	}
	return false
}

func (e AllergyIntoleranceReactionSeverityEnum) String() string {
	return string(e)
}

func (e *AllergyIntoleranceReactionSeverityEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllergyIntoleranceReactionSeverityEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllergyIntoleranceReactionSeverityEnum", str)
	}
	return nil
}

func (e AllergyIntoleranceReactionSeverityEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// AllergyIntoleranceTypeEnum is a FHIR enum
type AllergyIntoleranceTypeEnum string

const (
	AllergyIntoleranceTypeEnumAllergy     AllergyIntoleranceTypeEnum = "allergy"
	AllergyIntoleranceTypeEnumIntolerance AllergyIntoleranceTypeEnum = "intolerance"
)

var AllAllergyIntoleranceTypeEnum = []AllergyIntoleranceTypeEnum{
	AllergyIntoleranceTypeEnumAllergy,
	AllergyIntoleranceTypeEnumIntolerance,
}

func (e AllergyIntoleranceTypeEnum) IsValid() bool {
	switch e {
	case AllergyIntoleranceTypeEnumAllergy, AllergyIntoleranceTypeEnumIntolerance:
		return true
	}
	return false
}

func (e AllergyIntoleranceTypeEnum) String() string {
	return string(e)
}

func (e *AllergyIntoleranceTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllergyIntoleranceTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllergyIntoleranceTypeEnum", str)
	}
	return nil
}

func (e AllergyIntoleranceTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// CompositionAttesterModeEnum is a FHIR enum
type CompositionAttesterModeEnum string

const (
	CompositionAttesterModeEnumPersonal     CompositionAttesterModeEnum = "personal"
	CompositionAttesterModeEnumProfessional CompositionAttesterModeEnum = "professional"
	CompositionAttesterModeEnumLegal        CompositionAttesterModeEnum = "legal"
	CompositionAttesterModeEnumOfficial     CompositionAttesterModeEnum = "official"
)

var AllCompositionAttesterModeEnum = []CompositionAttesterModeEnum{
	CompositionAttesterModeEnumPersonal,
	CompositionAttesterModeEnumProfessional,
	CompositionAttesterModeEnumLegal,
	CompositionAttesterModeEnumOfficial,
}

func (e CompositionAttesterModeEnum) IsValid() bool {
	switch e {
	case CompositionAttesterModeEnumPersonal, CompositionAttesterModeEnumProfessional, CompositionAttesterModeEnumLegal, CompositionAttesterModeEnumOfficial:
		return true
	}
	return false
}

func (e CompositionAttesterModeEnum) String() string {
	return string(e)
}

func (e *CompositionAttesterModeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompositionAttesterModeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompositionAttesterModeEnum", str)
	}
	return nil
}

func (e CompositionAttesterModeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// CompositionStatusEnum is a FHIR enum
type CompositionStatusEnum string

const (
	CompositionStatusEnumPreliminary    CompositionStatusEnum = "preliminary"
	CompositionStatusEnumFinal          CompositionStatusEnum = "final"
	CompositionStatusEnumAmended        CompositionStatusEnum = "amended"
	CompositionStatusEnumEnteredInError CompositionStatusEnum = "entered_in_error"
)

var AllCompositionStatusEnum = []CompositionStatusEnum{
	CompositionStatusEnumPreliminary,
	CompositionStatusEnumFinal,
	CompositionStatusEnumAmended,
	CompositionStatusEnumEnteredInError,
}

func (e CompositionStatusEnum) IsValid() bool {
	switch e {
	case CompositionStatusEnumPreliminary, CompositionStatusEnumFinal, CompositionStatusEnumAmended, CompositionStatusEnumEnteredInError:
		return true
	}
	return false
}

func (e CompositionStatusEnum) String() string {
	return string(e)
}

func (e *CompositionStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompositionStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompositionStatusEnum", str)
	}
	return nil
}

func (e CompositionStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ContactPointSystemEnum is a FHIR enum
type ContactPointSystemEnum string

const (
	ContactPointSystemEnumPhone ContactPointSystemEnum = "phone"
	ContactPointSystemEnumFax   ContactPointSystemEnum = "fax"
	ContactPointSystemEnumEmail ContactPointSystemEnum = "email"
	ContactPointSystemEnumPager ContactPointSystemEnum = "pager"
	ContactPointSystemEnumURL   ContactPointSystemEnum = "url"
	ContactPointSystemEnumSms   ContactPointSystemEnum = "sms"
	ContactPointSystemEnumOther ContactPointSystemEnum = "other"
)

var AllContactPointSystemEnum = []ContactPointSystemEnum{
	ContactPointSystemEnumPhone,
	ContactPointSystemEnumFax,
	ContactPointSystemEnumEmail,
	ContactPointSystemEnumPager,
	ContactPointSystemEnumURL,
	ContactPointSystemEnumSms,
	ContactPointSystemEnumOther,
}

func (e ContactPointSystemEnum) IsValid() bool {
	switch e {
	case ContactPointSystemEnumPhone, ContactPointSystemEnumFax, ContactPointSystemEnumEmail, ContactPointSystemEnumPager, ContactPointSystemEnumURL, ContactPointSystemEnumSms, ContactPointSystemEnumOther:
		return true
	}
	return false
}

func (e ContactPointSystemEnum) String() string {
	return string(e)
}

func (e *ContactPointSystemEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContactPointSystemEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContactPointSystemEnum", str)
	}
	return nil
}

func (e ContactPointSystemEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ContactPointUseEnum is a FHIR enum
type ContactPointUseEnum string

const (
	ContactPointUseEnumHome   ContactPointUseEnum = "home"
	ContactPointUseEnumWork   ContactPointUseEnum = "work"
	ContactPointUseEnumTemp   ContactPointUseEnum = "temp"
	ContactPointUseEnumOld    ContactPointUseEnum = "old"
	ContactPointUseEnumMobile ContactPointUseEnum = "mobile"
)

var AllContactPointUseEnum = []ContactPointUseEnum{
	ContactPointUseEnumHome,
	ContactPointUseEnumWork,
	ContactPointUseEnumTemp,
	ContactPointUseEnumOld,
	ContactPointUseEnumMobile,
}

func (e ContactPointUseEnum) IsValid() bool {
	switch e {
	case ContactPointUseEnumHome, ContactPointUseEnumWork, ContactPointUseEnumTemp, ContactPointUseEnumOld, ContactPointUseEnumMobile:
		return true
	}
	return false
}

func (e ContactPointUseEnum) String() string {
	return string(e)
}

func (e *ContactPointUseEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ContactPointUseEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ContactPointUseEnum", str)
	}
	return nil
}

func (e ContactPointUseEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// DurationComparatorEnum is a FHIR enum
type DurationComparatorEnum string

const (
	DurationComparatorEnumLessThan             DurationComparatorEnum = "less_than"
	DurationComparatorEnumLessThanOrEqualTo    DurationComparatorEnum = "less_than_or_equal_to"
	DurationComparatorEnumGreaterThanOrEqualTo DurationComparatorEnum = "greater_than_or_equal_to"
	DurationComparatorEnumGreaterThan          DurationComparatorEnum = "greater_than"
)

var AllDurationComparatorEnum = []DurationComparatorEnum{
	DurationComparatorEnumLessThan,
	DurationComparatorEnumLessThanOrEqualTo,
	DurationComparatorEnumGreaterThanOrEqualTo,
	DurationComparatorEnumGreaterThan,
}

func (e DurationComparatorEnum) IsValid() bool {
	switch e {
	case DurationComparatorEnumLessThan, DurationComparatorEnumLessThanOrEqualTo, DurationComparatorEnumGreaterThanOrEqualTo, DurationComparatorEnumGreaterThan:
		return true
	}
	return false
}

func (e DurationComparatorEnum) String() string {
	return string(e)
}

func (e *DurationComparatorEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DurationComparatorEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DurationComparatorEnum", str)
	}
	return nil
}

func (e DurationComparatorEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EncounterLocationStatusEnum is a FHIR enum
type EncounterLocationStatusEnum string

const (
	EncounterLocationStatusEnumPlanned   EncounterLocationStatusEnum = "planned"
	EncounterLocationStatusEnumActive    EncounterLocationStatusEnum = "active"
	EncounterLocationStatusEnumReserved  EncounterLocationStatusEnum = "reserved"
	EncounterLocationStatusEnumCompleted EncounterLocationStatusEnum = "completed"
)

var AllEncounterLocationStatusEnum = []EncounterLocationStatusEnum{
	EncounterLocationStatusEnumPlanned,
	EncounterLocationStatusEnumActive,
	EncounterLocationStatusEnumReserved,
	EncounterLocationStatusEnumCompleted,
}

func (e EncounterLocationStatusEnum) IsValid() bool {
	switch e {
	case EncounterLocationStatusEnumPlanned, EncounterLocationStatusEnumActive, EncounterLocationStatusEnumReserved, EncounterLocationStatusEnumCompleted:
		return true
	}
	return false
}

func (e EncounterLocationStatusEnum) String() string {
	return string(e)
}

func (e *EncounterLocationStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EncounterLocationStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EncounterLocationStatusEnum", str)
	}
	return nil
}

func (e EncounterLocationStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EncounterStatusEnum is a FHIR enum
type EncounterStatusEnum string

const (
	EncounterStatusEnumPlanned        EncounterStatusEnum = "planned"
	EncounterStatusEnumArrived        EncounterStatusEnum = "arrived"
	EncounterStatusEnumTriaged        EncounterStatusEnum = "triaged"
	EncounterStatusEnumInProgress     EncounterStatusEnum = "in_progress"
	EncounterStatusEnumOnleave        EncounterStatusEnum = "onleave"
	EncounterStatusEnumFinished       EncounterStatusEnum = "finished"
	EncounterStatusEnumCancelled      EncounterStatusEnum = "cancelled"
	EncounterStatusEnumEnteredInError EncounterStatusEnum = "entered_in_error"
	EncounterStatusEnumUnknown        EncounterStatusEnum = "unknown"
)

var AllEncounterStatusEnum = []EncounterStatusEnum{
	EncounterStatusEnumPlanned,
	EncounterStatusEnumArrived,
	EncounterStatusEnumTriaged,
	EncounterStatusEnumInProgress,
	EncounterStatusEnumOnleave,
	EncounterStatusEnumFinished,
	EncounterStatusEnumCancelled,
	EncounterStatusEnumEnteredInError,
	EncounterStatusEnumUnknown,
}

func (e EncounterStatusEnum) IsValid() bool {
	switch e {
	case EncounterStatusEnumPlanned, EncounterStatusEnumArrived, EncounterStatusEnumTriaged, EncounterStatusEnumInProgress, EncounterStatusEnumOnleave, EncounterStatusEnumFinished, EncounterStatusEnumCancelled, EncounterStatusEnumEnteredInError, EncounterStatusEnumUnknown:
		return true
	}
	return false
}

func (e EncounterStatusEnum) String() string {
	return string(e)
}

func (e *EncounterStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EncounterStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EncounterStatusEnum", str)
	}
	return nil
}

func (e EncounterStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EncounterStatusHistoryStatusEnum is a FHIR enum
type EncounterStatusHistoryStatusEnum string

const (
	EncounterStatusHistoryStatusEnumPlanned        EncounterStatusHistoryStatusEnum = "planned"
	EncounterStatusHistoryStatusEnumArrived        EncounterStatusHistoryStatusEnum = "arrived"
	EncounterStatusHistoryStatusEnumTriaged        EncounterStatusHistoryStatusEnum = "triaged"
	EncounterStatusHistoryStatusEnumInProgress     EncounterStatusHistoryStatusEnum = "in_progress"
	EncounterStatusHistoryStatusEnumOnleave        EncounterStatusHistoryStatusEnum = "onleave"
	EncounterStatusHistoryStatusEnumFinished       EncounterStatusHistoryStatusEnum = "finished"
	EncounterStatusHistoryStatusEnumCancelled      EncounterStatusHistoryStatusEnum = "cancelled"
	EncounterStatusHistoryStatusEnumEnteredInError EncounterStatusHistoryStatusEnum = "entered_in_error"
	EncounterStatusHistoryStatusEnumUnknown        EncounterStatusHistoryStatusEnum = "unknown"
)

var AllEncounterStatusHistoryStatusEnum = []EncounterStatusHistoryStatusEnum{
	EncounterStatusHistoryStatusEnumPlanned,
	EncounterStatusHistoryStatusEnumArrived,
	EncounterStatusHistoryStatusEnumTriaged,
	EncounterStatusHistoryStatusEnumInProgress,
	EncounterStatusHistoryStatusEnumOnleave,
	EncounterStatusHistoryStatusEnumFinished,
	EncounterStatusHistoryStatusEnumCancelled,
	EncounterStatusHistoryStatusEnumEnteredInError,
	EncounterStatusHistoryStatusEnumUnknown,
}

func (e EncounterStatusHistoryStatusEnum) IsValid() bool {
	switch e {
	case EncounterStatusHistoryStatusEnumPlanned, EncounterStatusHistoryStatusEnumArrived, EncounterStatusHistoryStatusEnumTriaged, EncounterStatusHistoryStatusEnumInProgress, EncounterStatusHistoryStatusEnumOnleave, EncounterStatusHistoryStatusEnumFinished, EncounterStatusHistoryStatusEnumCancelled, EncounterStatusHistoryStatusEnumEnteredInError, EncounterStatusHistoryStatusEnumUnknown:
		return true
	}
	return false
}

func (e EncounterStatusHistoryStatusEnum) String() string {
	return string(e)
}

func (e *EncounterStatusHistoryStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EncounterStatusHistoryStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EncounterStatusHistoryStatusEnum", str)
	}
	return nil
}

func (e EncounterStatusHistoryStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EpisodeOfCareStatusEnum is a FHIR enum
type EpisodeOfCareStatusEnum string

const (
	EpisodeOfCareStatusEnumPlanned        EpisodeOfCareStatusEnum = "planned"
	EpisodeOfCareStatusEnumWaitlist       EpisodeOfCareStatusEnum = "waitlist"
	EpisodeOfCareStatusEnumActive         EpisodeOfCareStatusEnum = "active"
	EpisodeOfCareStatusEnumOnhold         EpisodeOfCareStatusEnum = "onhold"
	EpisodeOfCareStatusEnumFinished       EpisodeOfCareStatusEnum = "finished"
	EpisodeOfCareStatusEnumCancelled      EpisodeOfCareStatusEnum = "cancelled"
	EpisodeOfCareStatusEnumEnteredInError EpisodeOfCareStatusEnum = "entered_in_error"
)

var AllEpisodeOfCareStatusEnum = []EpisodeOfCareStatusEnum{
	EpisodeOfCareStatusEnumPlanned,
	EpisodeOfCareStatusEnumWaitlist,
	EpisodeOfCareStatusEnumActive,
	EpisodeOfCareStatusEnumOnhold,
	EpisodeOfCareStatusEnumFinished,
	EpisodeOfCareStatusEnumCancelled,
	EpisodeOfCareStatusEnumEnteredInError,
}

func (e EpisodeOfCareStatusEnum) IsValid() bool {
	switch e {
	case EpisodeOfCareStatusEnumPlanned, EpisodeOfCareStatusEnumWaitlist, EpisodeOfCareStatusEnumActive, EpisodeOfCareStatusEnumOnhold, EpisodeOfCareStatusEnumFinished, EpisodeOfCareStatusEnumCancelled, EpisodeOfCareStatusEnumEnteredInError:
		return true
	}
	return false
}

func (e EpisodeOfCareStatusEnum) String() string {
	return string(e)
}

func (e *EpisodeOfCareStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EpisodeOfCareStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EpisodeOfCareStatusEnum", str)
	}
	return nil
}

func (e EpisodeOfCareStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// EpisodeOfCareStatusHistoryStatusEnum is a FHIR enum
type EpisodeOfCareStatusHistoryStatusEnum string

const (
	EpisodeOfCareStatusHistoryStatusEnumPlanned        EpisodeOfCareStatusHistoryStatusEnum = "planned"
	EpisodeOfCareStatusHistoryStatusEnumWaitlist       EpisodeOfCareStatusHistoryStatusEnum = "waitlist"
	EpisodeOfCareStatusHistoryStatusEnumActive         EpisodeOfCareStatusHistoryStatusEnum = "active"
	EpisodeOfCareStatusHistoryStatusEnumOnhold         EpisodeOfCareStatusHistoryStatusEnum = "onhold"
	EpisodeOfCareStatusHistoryStatusEnumFinished       EpisodeOfCareStatusHistoryStatusEnum = "finished"
	EpisodeOfCareStatusHistoryStatusEnumCancelled      EpisodeOfCareStatusHistoryStatusEnum = "cancelled"
	EpisodeOfCareStatusHistoryStatusEnumEnteredInError EpisodeOfCareStatusHistoryStatusEnum = "entered_in_error"
)

var AllEpisodeOfCareStatusHistoryStatusEnum = []EpisodeOfCareStatusHistoryStatusEnum{
	EpisodeOfCareStatusHistoryStatusEnumPlanned,
	EpisodeOfCareStatusHistoryStatusEnumWaitlist,
	EpisodeOfCareStatusHistoryStatusEnumActive,
	EpisodeOfCareStatusHistoryStatusEnumOnhold,
	EpisodeOfCareStatusHistoryStatusEnumFinished,
	EpisodeOfCareStatusHistoryStatusEnumCancelled,
	EpisodeOfCareStatusHistoryStatusEnumEnteredInError,
}

func (e EpisodeOfCareStatusHistoryStatusEnum) IsValid() bool {
	switch e {
	case EpisodeOfCareStatusHistoryStatusEnumPlanned, EpisodeOfCareStatusHistoryStatusEnumWaitlist, EpisodeOfCareStatusHistoryStatusEnumActive, EpisodeOfCareStatusHistoryStatusEnumOnhold, EpisodeOfCareStatusHistoryStatusEnumFinished, EpisodeOfCareStatusHistoryStatusEnumCancelled, EpisodeOfCareStatusHistoryStatusEnumEnteredInError:
		return true
	}
	return false
}

func (e EpisodeOfCareStatusHistoryStatusEnum) String() string {
	return string(e)
}

func (e *EpisodeOfCareStatusHistoryStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EpisodeOfCareStatusHistoryStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EpisodeOfCareStatusHistoryStatusEnum", str)
	}
	return nil
}

func (e EpisodeOfCareStatusHistoryStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// HumanNameUseEnum is a FHIR enum
type HumanNameUseEnum string

const (
	HumanNameUseEnumUsual     HumanNameUseEnum = "usual"
	HumanNameUseEnumOfficial  HumanNameUseEnum = "official"
	HumanNameUseEnumTemp      HumanNameUseEnum = "temp"
	HumanNameUseEnumNickname  HumanNameUseEnum = "nickname"
	HumanNameUseEnumAnonymous HumanNameUseEnum = "anonymous"
	HumanNameUseEnumOld       HumanNameUseEnum = "old"
	HumanNameUseEnumMaiden    HumanNameUseEnum = "maiden"
)

var AllHumanNameUseEnum = []HumanNameUseEnum{
	HumanNameUseEnumUsual,
	HumanNameUseEnumOfficial,
	HumanNameUseEnumTemp,
	HumanNameUseEnumNickname,
	HumanNameUseEnumAnonymous,
	HumanNameUseEnumOld,
	HumanNameUseEnumMaiden,
}

func (e HumanNameUseEnum) IsValid() bool {
	switch e {
	case HumanNameUseEnumUsual, HumanNameUseEnumOfficial, HumanNameUseEnumTemp, HumanNameUseEnumNickname, HumanNameUseEnumAnonymous, HumanNameUseEnumOld, HumanNameUseEnumMaiden:
		return true
	}
	return false
}

func (e HumanNameUseEnum) String() string {
	return string(e)
}

func (e *HumanNameUseEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HumanNameUseEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HumanNameUseEnum", str)
	}
	return nil
}

func (e HumanNameUseEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type IDDocumentType string

const (
	IDDocumentTypeNationalID IDDocumentType = "national_id"
	IDDocumentTypePassport   IDDocumentType = "passport"
	IDDocumentTypeAlienID    IDDocumentType = "alien_id"
)

var AllIDDocumentType = []IDDocumentType{
	IDDocumentTypeNationalID,
	IDDocumentTypePassport,
	IDDocumentTypeAlienID,
}

func (e IDDocumentType) IsValid() bool {
	switch e {
	case IDDocumentTypeNationalID, IDDocumentTypePassport, IDDocumentTypeAlienID:
		return true
	}
	return false
}

func (e IDDocumentType) String() string {
	return string(e)
}

func (e *IDDocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IDDocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IDDocumentType", str)
	}
	return nil
}

func (e IDDocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// IdentifierUseEnum is a FHIR enum
type IdentifierUseEnum string

const (
	IdentifierUseEnumUsual     IdentifierUseEnum = "usual"
	IdentifierUseEnumOfficial  IdentifierUseEnum = "official"
	IdentifierUseEnumTemp      IdentifierUseEnum = "temp"
	IdentifierUseEnumSecondary IdentifierUseEnum = "secondary"
	IdentifierUseEnumOld       IdentifierUseEnum = "old"
)

var AllIdentifierUseEnum = []IdentifierUseEnum{
	IdentifierUseEnumUsual,
	IdentifierUseEnumOfficial,
	IdentifierUseEnumTemp,
	IdentifierUseEnumSecondary,
	IdentifierUseEnumOld,
}

func (e IdentifierUseEnum) IsValid() bool {
	switch e {
	case IdentifierUseEnumUsual, IdentifierUseEnumOfficial, IdentifierUseEnumTemp, IdentifierUseEnumSecondary, IdentifierUseEnumOld:
		return true
	}
	return false
}

func (e IdentifierUseEnum) String() string {
	return string(e)
}

func (e *IdentifierUseEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = IdentifierUseEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid IdentifierUseEnum", str)
	}
	return nil
}

func (e IdentifierUseEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MaritalStatus string

const (
	MaritalStatusA   MaritalStatus = "A"
	MaritalStatusD   MaritalStatus = "D"
	MaritalStatusI   MaritalStatus = "I"
	MaritalStatusL   MaritalStatus = "L"
	MaritalStatusM   MaritalStatus = "M"
	MaritalStatusP   MaritalStatus = "P"
	MaritalStatusS   MaritalStatus = "S"
	MaritalStatusT   MaritalStatus = "T"
	MaritalStatusU   MaritalStatus = "U"
	MaritalStatusW   MaritalStatus = "W"
	MaritalStatusUnk MaritalStatus = "UNK"
)

var AllMaritalStatus = []MaritalStatus{
	MaritalStatusA,
	MaritalStatusD,
	MaritalStatusI,
	MaritalStatusL,
	MaritalStatusM,
	MaritalStatusP,
	MaritalStatusS,
	MaritalStatusT,
	MaritalStatusU,
	MaritalStatusW,
	MaritalStatusUnk,
}

func (e MaritalStatus) IsValid() bool {
	switch e {
	case MaritalStatusA, MaritalStatusD, MaritalStatusI, MaritalStatusL, MaritalStatusM, MaritalStatusP, MaritalStatusS, MaritalStatusT, MaritalStatusU, MaritalStatusW, MaritalStatusUnk:
		return true
	}
	return false
}

func (e MaritalStatus) String() string {
	return string(e)
}

func (e *MaritalStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MaritalStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MaritalStatus", str)
	}
	return nil
}

func (e MaritalStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// NarrativeStatusEnum is a FHIR enum
type NarrativeStatusEnum string

const (
	NarrativeStatusEnumGenerated  NarrativeStatusEnum = "generated"
	NarrativeStatusEnumExtensions NarrativeStatusEnum = "extensions"
	NarrativeStatusEnumAdditional NarrativeStatusEnum = "additional"
	NarrativeStatusEnumEmpty      NarrativeStatusEnum = "empty"
)

var AllNarrativeStatusEnum = []NarrativeStatusEnum{
	NarrativeStatusEnumGenerated,
	NarrativeStatusEnumExtensions,
	NarrativeStatusEnumAdditional,
	NarrativeStatusEnumEmpty,
}

func (e NarrativeStatusEnum) IsValid() bool {
	switch e {
	case NarrativeStatusEnumGenerated, NarrativeStatusEnumExtensions, NarrativeStatusEnumAdditional, NarrativeStatusEnumEmpty:
		return true
	}
	return false
}

func (e NarrativeStatusEnum) String() string {
	return string(e)
}

func (e *NarrativeStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NarrativeStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NarrativeStatusEnum", str)
	}
	return nil
}

func (e NarrativeStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// ObservationStatusEnum is a FHIR enum
type ObservationStatusEnum string

const (
	ObservationStatusEnumRegistered     ObservationStatusEnum = "registered"
	ObservationStatusEnumPreliminary    ObservationStatusEnum = "preliminary"
	ObservationStatusEnumFinal          ObservationStatusEnum = "final"
	ObservationStatusEnumAmended        ObservationStatusEnum = "amended"
	ObservationStatusEnumCorrected      ObservationStatusEnum = "corrected"
	ObservationStatusEnumCancelled      ObservationStatusEnum = "cancelled"
	ObservationStatusEnumEnteredInError ObservationStatusEnum = "entered_in_error"
	ObservationStatusEnumUnknown        ObservationStatusEnum = "unknown"
)

var AllObservationStatusEnum = []ObservationStatusEnum{
	ObservationStatusEnumRegistered,
	ObservationStatusEnumPreliminary,
	ObservationStatusEnumFinal,
	ObservationStatusEnumAmended,
	ObservationStatusEnumCorrected,
	ObservationStatusEnumCancelled,
	ObservationStatusEnumEnteredInError,
	ObservationStatusEnumUnknown,
}

func (e ObservationStatusEnum) IsValid() bool {
	switch e {
	case ObservationStatusEnumRegistered, ObservationStatusEnumPreliminary, ObservationStatusEnumFinal, ObservationStatusEnumAmended, ObservationStatusEnumCorrected, ObservationStatusEnumCancelled, ObservationStatusEnumEnteredInError, ObservationStatusEnumUnknown:
		return true
	}
	return false
}

func (e ObservationStatusEnum) String() string {
	return string(e)
}

func (e *ObservationStatusEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ObservationStatusEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ObservationStatusEnum", str)
	}
	return nil
}

func (e ObservationStatusEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// PatientContactGenderEnum is a FHIR enum
type PatientContactGenderEnum string

const (
	PatientContactGenderEnumMale    PatientContactGenderEnum = "male"
	PatientContactGenderEnumFemale  PatientContactGenderEnum = "female"
	PatientContactGenderEnumOther   PatientContactGenderEnum = "other"
	PatientContactGenderEnumUnknown PatientContactGenderEnum = "unknown"
)

var AllPatientContactGenderEnum = []PatientContactGenderEnum{
	PatientContactGenderEnumMale,
	PatientContactGenderEnumFemale,
	PatientContactGenderEnumOther,
	PatientContactGenderEnumUnknown,
}

func (e PatientContactGenderEnum) IsValid() bool {
	switch e {
	case PatientContactGenderEnumMale, PatientContactGenderEnumFemale, PatientContactGenderEnumOther, PatientContactGenderEnumUnknown:
		return true
	}
	return false
}

func (e PatientContactGenderEnum) String() string {
	return string(e)
}

func (e *PatientContactGenderEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PatientContactGenderEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PatientContactGenderEnum", str)
	}
	return nil
}

func (e PatientContactGenderEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// PatientGenderEnum is a FHIR enum
type PatientGenderEnum string

const (
	PatientGenderEnumMale    PatientGenderEnum = "male"
	PatientGenderEnumFemale  PatientGenderEnum = "female"
	PatientGenderEnumOther   PatientGenderEnum = "other"
	PatientGenderEnumUnknown PatientGenderEnum = "unknown"
)

var AllPatientGenderEnum = []PatientGenderEnum{
	PatientGenderEnumMale,
	PatientGenderEnumFemale,
	PatientGenderEnumOther,
	PatientGenderEnumUnknown,
}

func (e PatientGenderEnum) IsValid() bool {
	switch e {
	case PatientGenderEnumMale, PatientGenderEnumFemale, PatientGenderEnumOther, PatientGenderEnumUnknown:
		return true
	}
	return false
}

func (e PatientGenderEnum) String() string {
	return string(e)
}

func (e *PatientGenderEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PatientGenderEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PatientGenderEnum", str)
	}
	return nil
}

func (e PatientGenderEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// PatientLinkTypeEnum is a FHIR enum
type PatientLinkTypeEnum string

const (
	PatientLinkTypeEnumReplacedBy PatientLinkTypeEnum = "replaced_by"
	PatientLinkTypeEnumReplaces   PatientLinkTypeEnum = "replaces"
	PatientLinkTypeEnumRefer      PatientLinkTypeEnum = "refer"
	PatientLinkTypeEnumSeealso    PatientLinkTypeEnum = "seealso"
)

var AllPatientLinkTypeEnum = []PatientLinkTypeEnum{
	PatientLinkTypeEnumReplacedBy,
	PatientLinkTypeEnumReplaces,
	PatientLinkTypeEnumRefer,
	PatientLinkTypeEnumSeealso,
}

func (e PatientLinkTypeEnum) IsValid() bool {
	switch e {
	case PatientLinkTypeEnumReplacedBy, PatientLinkTypeEnumReplaces, PatientLinkTypeEnumRefer, PatientLinkTypeEnumSeealso:
		return true
	}
	return false
}

func (e PatientLinkTypeEnum) String() string {
	return string(e)
}

func (e *PatientLinkTypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PatientLinkTypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PatientLinkTypeEnum", str)
	}
	return nil
}

func (e PatientLinkTypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// QuantityComparatorEnum is a FHIR enum
type QuantityComparatorEnum string

const (
	QuantityComparatorEnumLessThan             QuantityComparatorEnum = "less_than"
	QuantityComparatorEnumLessThanOrEqualTo    QuantityComparatorEnum = "less_than_or_equal_to"
	QuantityComparatorEnumGreaterThanOrEqualTo QuantityComparatorEnum = "greater_than_or_equal_to"
	QuantityComparatorEnumGreaterThan          QuantityComparatorEnum = "greater_than"
)

var AllQuantityComparatorEnum = []QuantityComparatorEnum{
	QuantityComparatorEnumLessThan,
	QuantityComparatorEnumLessThanOrEqualTo,
	QuantityComparatorEnumGreaterThanOrEqualTo,
	QuantityComparatorEnumGreaterThan,
}

func (e QuantityComparatorEnum) IsValid() bool {
	switch e {
	case QuantityComparatorEnumLessThan, QuantityComparatorEnumLessThanOrEqualTo, QuantityComparatorEnumGreaterThanOrEqualTo, QuantityComparatorEnumGreaterThan:
		return true
	}
	return false
}

func (e QuantityComparatorEnum) String() string {
	return string(e)
}

func (e *QuantityComparatorEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuantityComparatorEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuantityComparatorEnum", str)
	}
	return nil
}

func (e QuantityComparatorEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RelationshipType string

const (
	RelationshipTypeC RelationshipType = "C"
	RelationshipTypeE RelationshipType = "E"
	RelationshipTypeF RelationshipType = "F"
	RelationshipTypeI RelationshipType = "I"
	RelationshipTypeN RelationshipType = "N"
	RelationshipTypeO RelationshipType = "O"
	RelationshipTypeS RelationshipType = "S"
	RelationshipTypeU RelationshipType = "U"
)

var AllRelationshipType = []RelationshipType{
	RelationshipTypeC,
	RelationshipTypeE,
	RelationshipTypeF,
	RelationshipTypeI,
	RelationshipTypeN,
	RelationshipTypeO,
	RelationshipTypeS,
	RelationshipTypeU,
}

func (e RelationshipType) IsValid() bool {
	switch e {
	case RelationshipTypeC, RelationshipTypeE, RelationshipTypeF, RelationshipTypeI, RelationshipTypeN, RelationshipTypeO, RelationshipTypeS, RelationshipTypeU:
		return true
	}
	return false
}

func (e RelationshipType) String() string {
	return string(e)
}

func (e *RelationshipType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RelationshipType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RelationshipType", str)
	}
	return nil
}

func (e RelationshipType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// TimingRepeatDurationUnitEnum is a FHIR enum
type TimingRepeatDurationUnitEnum string

const (
	TimingRepeatDurationUnitEnumS   TimingRepeatDurationUnitEnum = "s"
	TimingRepeatDurationUnitEnumMin TimingRepeatDurationUnitEnum = "min"
	TimingRepeatDurationUnitEnumH   TimingRepeatDurationUnitEnum = "h"
	TimingRepeatDurationUnitEnumD   TimingRepeatDurationUnitEnum = "d"
	TimingRepeatDurationUnitEnumWk  TimingRepeatDurationUnitEnum = "wk"
	TimingRepeatDurationUnitEnumMo  TimingRepeatDurationUnitEnum = "mo"
	TimingRepeatDurationUnitEnumA   TimingRepeatDurationUnitEnum = "a"
)

var AllTimingRepeatDurationUnitEnum = []TimingRepeatDurationUnitEnum{
	TimingRepeatDurationUnitEnumS,
	TimingRepeatDurationUnitEnumMin,
	TimingRepeatDurationUnitEnumH,
	TimingRepeatDurationUnitEnumD,
	TimingRepeatDurationUnitEnumWk,
	TimingRepeatDurationUnitEnumMo,
	TimingRepeatDurationUnitEnumA,
}

func (e TimingRepeatDurationUnitEnum) IsValid() bool {
	switch e {
	case TimingRepeatDurationUnitEnumS, TimingRepeatDurationUnitEnumMin, TimingRepeatDurationUnitEnumH, TimingRepeatDurationUnitEnumD, TimingRepeatDurationUnitEnumWk, TimingRepeatDurationUnitEnumMo, TimingRepeatDurationUnitEnumA:
		return true
	}
	return false
}

func (e TimingRepeatDurationUnitEnum) String() string {
	return string(e)
}

func (e *TimingRepeatDurationUnitEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimingRepeatDurationUnitEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimingRepeatDurationUnitEnum", str)
	}
	return nil
}

func (e TimingRepeatDurationUnitEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// TimingRepeatPeriodUnitEnum is a FHIR enum
type TimingRepeatPeriodUnitEnum string

const (
	TimingRepeatPeriodUnitEnumS   TimingRepeatPeriodUnitEnum = "s"
	TimingRepeatPeriodUnitEnumMin TimingRepeatPeriodUnitEnum = "min"
	TimingRepeatPeriodUnitEnumH   TimingRepeatPeriodUnitEnum = "h"
	TimingRepeatPeriodUnitEnumD   TimingRepeatPeriodUnitEnum = "d"
	TimingRepeatPeriodUnitEnumWk  TimingRepeatPeriodUnitEnum = "wk"
	TimingRepeatPeriodUnitEnumMo  TimingRepeatPeriodUnitEnum = "mo"
	TimingRepeatPeriodUnitEnumA   TimingRepeatPeriodUnitEnum = "a"
)

var AllTimingRepeatPeriodUnitEnum = []TimingRepeatPeriodUnitEnum{
	TimingRepeatPeriodUnitEnumS,
	TimingRepeatPeriodUnitEnumMin,
	TimingRepeatPeriodUnitEnumH,
	TimingRepeatPeriodUnitEnumD,
	TimingRepeatPeriodUnitEnumWk,
	TimingRepeatPeriodUnitEnumMo,
	TimingRepeatPeriodUnitEnumA,
}

func (e TimingRepeatPeriodUnitEnum) IsValid() bool {
	switch e {
	case TimingRepeatPeriodUnitEnumS, TimingRepeatPeriodUnitEnumMin, TimingRepeatPeriodUnitEnumH, TimingRepeatPeriodUnitEnumD, TimingRepeatPeriodUnitEnumWk, TimingRepeatPeriodUnitEnumMo, TimingRepeatPeriodUnitEnumA:
		return true
	}
	return false
}

func (e TimingRepeatPeriodUnitEnum) String() string {
	return string(e)
}

func (e *TimingRepeatPeriodUnitEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimingRepeatPeriodUnitEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimingRepeatPeriodUnitEnum", str)
	}
	return nil
}

func (e TimingRepeatPeriodUnitEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// TimingRepeatWhenEnum is a FHIR enum
type TimingRepeatWhenEnum string

const (
	TimingRepeatWhenEnumMorn      TimingRepeatWhenEnum = "MORN"
	TimingRepeatWhenEnumMornEarly TimingRepeatWhenEnum = "MORN_early"
	TimingRepeatWhenEnumMornLate  TimingRepeatWhenEnum = "MORN_late"
	TimingRepeatWhenEnumNoon      TimingRepeatWhenEnum = "NOON"
	TimingRepeatWhenEnumAft       TimingRepeatWhenEnum = "AFT"
	TimingRepeatWhenEnumAftEarly  TimingRepeatWhenEnum = "AFT_early"
	TimingRepeatWhenEnumAftLate   TimingRepeatWhenEnum = "AFT_late"
	TimingRepeatWhenEnumEve       TimingRepeatWhenEnum = "EVE"
	TimingRepeatWhenEnumEveEarly  TimingRepeatWhenEnum = "EVE_early"
	TimingRepeatWhenEnumEveLate   TimingRepeatWhenEnum = "EVE_late"
	TimingRepeatWhenEnumNight     TimingRepeatWhenEnum = "NIGHT"
	TimingRepeatWhenEnumPhs       TimingRepeatWhenEnum = "PHS"
	TimingRepeatWhenEnumHs        TimingRepeatWhenEnum = "HS"
	TimingRepeatWhenEnumWake      TimingRepeatWhenEnum = "WAKE"
	TimingRepeatWhenEnumC         TimingRepeatWhenEnum = "C"
	TimingRepeatWhenEnumCm        TimingRepeatWhenEnum = "CM"
	TimingRepeatWhenEnumCd        TimingRepeatWhenEnum = "CD"
	TimingRepeatWhenEnumCv        TimingRepeatWhenEnum = "CV"
	TimingRepeatWhenEnumAc        TimingRepeatWhenEnum = "AC"
	TimingRepeatWhenEnumAcm       TimingRepeatWhenEnum = "ACM"
	TimingRepeatWhenEnumAcd       TimingRepeatWhenEnum = "ACD"
	TimingRepeatWhenEnumAcv       TimingRepeatWhenEnum = "ACV"
	TimingRepeatWhenEnumPc        TimingRepeatWhenEnum = "PC"
	TimingRepeatWhenEnumPcm       TimingRepeatWhenEnum = "PCM"
	TimingRepeatWhenEnumPcd       TimingRepeatWhenEnum = "PCD"
	TimingRepeatWhenEnumPcv       TimingRepeatWhenEnum = "PCV"
)

var AllTimingRepeatWhenEnum = []TimingRepeatWhenEnum{
	TimingRepeatWhenEnumMorn,
	TimingRepeatWhenEnumMornEarly,
	TimingRepeatWhenEnumMornLate,
	TimingRepeatWhenEnumNoon,
	TimingRepeatWhenEnumAft,
	TimingRepeatWhenEnumAftEarly,
	TimingRepeatWhenEnumAftLate,
	TimingRepeatWhenEnumEve,
	TimingRepeatWhenEnumEveEarly,
	TimingRepeatWhenEnumEveLate,
	TimingRepeatWhenEnumNight,
	TimingRepeatWhenEnumPhs,
	TimingRepeatWhenEnumHs,
	TimingRepeatWhenEnumWake,
	TimingRepeatWhenEnumC,
	TimingRepeatWhenEnumCm,
	TimingRepeatWhenEnumCd,
	TimingRepeatWhenEnumCv,
	TimingRepeatWhenEnumAc,
	TimingRepeatWhenEnumAcm,
	TimingRepeatWhenEnumAcd,
	TimingRepeatWhenEnumAcv,
	TimingRepeatWhenEnumPc,
	TimingRepeatWhenEnumPcm,
	TimingRepeatWhenEnumPcd,
	TimingRepeatWhenEnumPcv,
}

func (e TimingRepeatWhenEnum) IsValid() bool {
	switch e {
	case TimingRepeatWhenEnumMorn, TimingRepeatWhenEnumMornEarly, TimingRepeatWhenEnumMornLate, TimingRepeatWhenEnumNoon, TimingRepeatWhenEnumAft, TimingRepeatWhenEnumAftEarly, TimingRepeatWhenEnumAftLate, TimingRepeatWhenEnumEve, TimingRepeatWhenEnumEveEarly, TimingRepeatWhenEnumEveLate, TimingRepeatWhenEnumNight, TimingRepeatWhenEnumPhs, TimingRepeatWhenEnumHs, TimingRepeatWhenEnumWake, TimingRepeatWhenEnumC, TimingRepeatWhenEnumCm, TimingRepeatWhenEnumCd, TimingRepeatWhenEnumCv, TimingRepeatWhenEnumAc, TimingRepeatWhenEnumAcm, TimingRepeatWhenEnumAcd, TimingRepeatWhenEnumAcv, TimingRepeatWhenEnumPc, TimingRepeatWhenEnumPcm, TimingRepeatWhenEnumPcd, TimingRepeatWhenEnumPcv:
		return true
	}
	return false
}

func (e TimingRepeatWhenEnum) String() string {
	return string(e)
}

func (e *TimingRepeatWhenEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimingRepeatWhenEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimingRepeatWhenEnum", str)
	}
	return nil
}

func (e TimingRepeatWhenEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
