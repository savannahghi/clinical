name: Clinical Multitenant Deployment

on: [push]

env:
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  DOCKER_IMAGE_TAG: eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:${{  github.sha }}
  NAMESPACE: ${{ secrets.NAMESPACE }}
  APP_REPLICA_COUNT: ${{ secrets.APP_REPLICA_COUNT }}
  PORT: ${{ secrets.PORT }}
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  SERVICE_HOST: ${{ secrets.SERVICE_HOST }}
  GOOGLE_PROJECT_NUMBER: ${{ secrets.GOOGLE_PROJECT_NUMBER }}
  CLOUD_HEALTH_PUBSUB_TOPIC: ${{ secrets.CLOUD_HEALTH_PUBSUB_TOPIC }}
  CLOUD_HEALTH_DATASET_ID: ${{ secrets.CLOUD_HEALTH_DATASET_ID }}
  CLOUD_HEALTH_DATASET_LOCATION: ${{ secrets.CLOUD_HEALTH_DATASET_LOCATION }}
  OPENCONCEPTLAB_TOKEN: ${{ secrets.OPENCONCEPTLAB_TOKEN }}
  OPENCONCEPTLAB_API_URL: ${{ secrets.OPENCONCEPTLAB_API_URL }}
  CLOUD_HEALTH_FHIRSTORE_ID: ${{ secrets.CLOUD_HEALTH_FHIRSTORE_ID }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SAVANNAH_ADMIN_EMAIL: ${{ secrets.SAVANNAH_ADMIN_EMAIL }}
  APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
  APP_NAME: ${{ secrets.APP_NAME }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
  AUTHSERVER_ENDPOINT: ${{ secrets.AUTHSERVER_ENDPOINT }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
  AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
  GRANT_TYPE: ${{ secrets.GRANT_TYPE }}
  MYCAREHUB_CLIENT_ID: ${{ secrets.MYCAREHUB_CLIENT_ID }}
  MYCAREHUB_CLIENT_SECRET: ${{ secrets.MYCAREHUB_CLIENT_SECRET }}
  MYCAREHUB_INTROSPECT_URL: ${{ secrets.MYCAREHUB_INTROSPECT_URL }}
  CLINICAL_BUCKET_NAME: ${{ secrets.CLINICAL_BUCKET_NAME }}
  SENTRY_TRACE_SAMPLE_RATE: ${{ secrets.SENTRY_TRACE_SAMPLE_RATE }}

jobs:
  deploy_to_multitenant_staging:
    name: Deploy multitenant staging server to google kubernetes engine
    if: ${{ github.ref == 'refs/heads/develop-v2'}}
    strategy:
      matrix:
        environment: [multitenant-staging, sil-uat]

    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      - name: Build and Push Image
        run: |-
          docker build -t eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA .
          docker push eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Deploy to Google Kubernetes engine
        shell: bash
        run: cd deploy/ && cat deploy.sh && sh deploy.sh

  deploy_to_multitenant_prod:
    name: Deploy multitenant production to google kubernetes engine
    if: ${{ github.ref == 'refs/heads/main-v2'}}
    strategy:
      matrix:
        environment: [multitenant-prod, sil-prod]

    runs-on: ubuntu-latest
    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker
      - name: Build and Push Image
        run: |-
          docker build -t eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA .
          docker push eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Deploy to Google Kubernetes engine
        shell: bash
        run: cd deploy/ && cat deploy.sh && sh deploy.sh
