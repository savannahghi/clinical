name: Deployment

on:
  push:
    branches: [develop]

env:
  DOCKER_BUILDKIT: 1 # Enable Buildkit and let compose use it to speed up image building
  # Schema Registry CLI command version
  CLI_VERSION: v0.0.1
  # Schema Registry URL
  REGISTRY_URL: ${{ secrets.TEST_SCHEMA_REGISTRY_URL }}

concurrency:
  group: build_and_push_image

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest
    environment:
      name: test # run this only in test environment for now
    steps:
      - uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          export_default_credentials: true
      
      # Build docker image
      - name: Build
        run: |-
          docker build -t eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA --build-arg=ACCESS_TOKEN=${{ secrets.ACCESS_TOKEN }} .
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q

      # Push image to Google Container Registry
      - name: Push
        run: |-
          docker push eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA

  deploy_to_staging:
    name: Deploy Staging Server to Google Cloud Run
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    needs: [build_and_push_image]
    steps:
      - name: Checkout working branches
        uses: actions/checkout@v2

      # Deploy to Google Cloud Run Serverless
      - name: Get GCP project credential 
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          export_default_credentials: true
      
      # Build docker image
      - name: Build
        run: |-
          docker build -t eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA .
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q
      # Push image to Google Container Registry
      - name: Push
        run: |-
          docker push eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA


      # Deploy to Google Cloud Run Serverless
      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy ${{ secrets.SERVICE_NAME }} --image eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA \
          --region europe-west1 \
          --platform managed \
          --allow-unauthenticated \
          --min-instances=${{ secrets.MIN_INST }} \
          --max-instances=${{ secrets.MAX_INST }} \
          --memory=${{ secrets.MEMORY_LIMIT}} \
          --cpu=${{ secrets.CPU }} \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars "FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}" \
          --set-env-vars "JWT_KEY=${{ secrets.JWT_KEY }}" \
          --set-env-vars "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" \
          --set-env-vars "GOOGLE_PROJECT_NUMBER=${{ secrets.GOOGLE_PROJECT_NUMBER }}" \
          --set-env-vars "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" \
          --set-env-vars "ROOT_COLLECTION_SUFFIX=${{ secrets.ROOT_COLLECTION_SUFFIX }}" \
          --set-env-vars "CLOUD_HEALTH_PUBSUB_TOPIC=${{ secrets.CLOUD_HEALTH_PUBSUB_TOPIC }}" \
          --set-env-vars "CLOUD_HEALTH_DATASET_ID=${{ secrets.CLOUD_HEALTH_DATASET_ID }}" \
          --set-env-vars "CLOUD_HEALTH_FHIRSTORE_ID=${{ secrets.CLOUD_HEALTH_FHIRSTORE_ID }}" \
          --set-env-vars "OPENCONCEPTLAB_TOKEN=${{ secrets.OPENCONCEPTLAB_TOKEN }}" \
          --set-env-vars "SERVICE_HOST=${{ secrets.SERVICE_HOST }}" \
          --set-env-vars "OPENCONCEPTLAB_API_URL=${{ secrets.OPENCONCEPTLAB_API_URL }}"



  deploy_to_test:
    name: Deploy Test Server to Google Cloud Run
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/alpha'
    environment:
      name: test
    needs: [build_and_push_image]
    steps:
      - name: Checkout working branches
        uses: actions/checkout@v2

      # Deploy to Google Cloud Run Serverless
      - name: Get GCP project credential 
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          export_default_credentials: true
      
      # Deploy to Google Cloud Run Serverless
      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy ${{ secrets.SERVICE_NAME }} --image eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA \
          --region europe-west1 \
          --platform managed \
          --allow-unauthenticated \
          --min-instances=${{ secrets.MIN_INST }} \
          --max-instances=${{ secrets.MAX_INST }} \
          --memory=${{ secrets.MEMORY_LIMIT}} \
          --cpu=${{ secrets.CPU }} \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars "FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}" \
          --set-env-vars "JWT_KEY=${{ secrets.JWT_KEY }}" \
          --set-env-vars "GOOGLE_PROJECT_NUMBER=${{ secrets.GOOGLE_PROJECT_NUMBER }}" \
          --set-env-vars "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" \
          --set-env-vars "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" \
          --set-env-vars "ROOT_COLLECTION_SUFFIX=${{ secrets.ROOT_COLLECTION_SUFFIX }}" \
          --set-env-vars "CLOUD_HEALTH_PUBSUB_TOPIC=${{ secrets.CLOUD_HEALTH_PUBSUB_TOPIC }}" \
          --set-env-vars "CLOUD_HEALTH_DATASET_ID=${{ secrets.CLOUD_HEALTH_DATASET_ID }}" \
          --set-env-vars "CLOUD_HEALTH_FHIRSTORE_ID=${{ secrets.CLOUD_HEALTH_FHIRSTORE_ID }}" \
          --set-env-vars "OPENCONCEPTLAB_TOKEN=${{ secrets.OPENCONCEPTLAB_TOKEN }}" \
          --set-env-vars "SERVICE_HOST=${{ secrets.SERVICE_HOST }}" \
          --set-env-vars "OPENCONCEPTLAB_API_URL=${{ secrets.OPENCONCEPTLAB_API_URL }}"

  deploy_to_prod:
    name: Deploy Staging Server to Google Cloud Run
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
    needs: [build_and_push_image]
    steps:
      - name: Checkout working branches
        uses: actions/checkout@v2

      # Deploy to Google Cloud Run Serverless
      - name: Get GCP project credential 
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          export_default_credentials: true
      
      # Build docker image
      - name: Build
        run: |-
          docker build -t eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA .
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          gcloud auth configure-docker -q
      # Push image to Google Container Registry
      - name: Push
        run: |-
          docker push eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA


      # Deploy to Google Cloud Run Serverless
      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy ${{ secrets.SERVICE_NAME }} --image eu.gcr.io/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ secrets.GCR_NAME }}:$GITHUB_SHA \
          --region europe-west1 \
          --platform managed \
          --allow-unauthenticated \
          --min-instances=${{ secrets.MIN_INST }} \
          --max-instances=${{ secrets.MAX_INST }} \
          --memory=${{ secrets.MEMORY_LIMIT}} \
          --cpu=${{ secrets.CPU }} \
          --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ secrets.GOOGLE_CLOUD_PROJECT }}" \
          --set-env-vars "FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}" \
          --set-env-vars "JWT_KEY=${{ secrets.JWT_KEY }}" \
          --set-env-vars "GOOGLE_PROJECT_NUMBER=${{ secrets.GOOGLE_PROJECT_NUMBER }}" \
          --set-env-vars "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" \
          --set-env-vars "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" \
          --set-env-vars "ROOT_COLLECTION_SUFFIX=${{ secrets.ROOT_COLLECTION_SUFFIX }}" \
          --set-env-vars "CLOUD_HEALTH_PUBSUB_TOPIC=${{ secrets.CLOUD_HEALTH_PUBSUB_TOPIC }}" \
          --set-env-vars "CLOUD_HEALTH_DATASET_ID=${{ secrets.CLOUD_HEALTH_DATASET_ID }}" \
          --set-env-vars "CLOUD_HEALTH_FHIRSTORE_ID=${{ secrets.CLOUD_HEALTH_FHIRSTORE_ID }}" \
          --set-env-vars "OPENCONCEPTLAB_TOKEN=${{ secrets.OPENCONCEPTLAB_TOKEN }}" \
          --set-env-vars "SERVICE_HOST=${{ secrets.SERVICE_HOST }}" \
          --set-env-vars "OPENCONCEPTLAB_API_URL=${{ secrets.OPENCONCEPTLAB_API_URL }}"


  push_schema:
    name: Publish schema to schema registry
    strategy:
      matrix:
        go-version: [1.16.x]
    runs-on: ubuntu-latest
    needs: [deploy_to_test]
    steps:
      - name: Checkout working branches
        uses: actions/checkout@v2

      # Install Go
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

       # install CLI command and push schema to registry
       # just to be sure, we re-validate the schema against schema registry
      - name: Install CLI command and push schema to registry
        run: |
          go install github.com/savannahghi/bewellcli@$CLI_VERSION
          bewellcli service validate-schema --name clinical --version $GITHUB_SHA --url ${{ secrets.SERVICE_GRAPHQL_URL }}
          bewellcli service push-schema --name clinical --version $GITHUB_SHA --url ${{ secrets.SERVICE_GRAPHQL_URL }}
